
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Household
 * 
 */
export type Household = $Result.DefaultSelection<Prisma.$HouseholdPayload>
/**
 * Model CarbonFootprint
 * 
 */
export type CarbonFootprint = $Result.DefaultSelection<Prisma.$CarbonFootprintPayload>
/**
 * Model EmissionFactor
 * 
 */
export type EmissionFactor = $Result.DefaultSelection<Prisma.$EmissionFactorPayload>
/**
 * Model VehicleProperty
 * 
 */
export type VehicleProperty = $Result.DefaultSelection<Prisma.$VehiclePropertyPayload>
/**
 * Model PrivateVehicle
 * 
 */
export type PrivateVehicle = $Result.DefaultSelection<Prisma.$PrivateVehiclePayload>
/**
 * Model Transportation
 * 
 */
export type Transportation = $Result.DefaultSelection<Prisma.$TransportationPayload>
/**
 * Model HouseholdElectricity
 * 
 */
export type HouseholdElectricity = $Result.DefaultSelection<Prisma.$HouseholdElectricityPayload>
/**
 * Model ElectricityBill
 * 
 */
export type ElectricityBill = $Result.DefaultSelection<Prisma.$ElectricityBillPayload>
/**
 * Model HouseholdWaterSupply
 * 
 */
export type HouseholdWaterSupply = $Result.DefaultSelection<Prisma.$HouseholdWaterSupplyPayload>
/**
 * Model WaterBill
 * 
 */
export type WaterBill = $Result.DefaultSelection<Prisma.$WaterBillPayload>
/**
 * Model HouseholdOtherEnergy
 * 
 */
export type HouseholdOtherEnergy = $Result.DefaultSelection<Prisma.$HouseholdOtherEnergyPayload>
/**
 * Model OtherEnergyConsumption
 * 
 */
export type OtherEnergyConsumption = $Result.DefaultSelection<Prisma.$OtherEnergyConsumptionPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model ProfilePermission
 * 
 */
export type ProfilePermission = $Result.DefaultSelection<Prisma.$ProfilePermissionPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const HouseType: {
  SINGLE_HOUSE: 'SINGLE_HOUSE',
  TOWNHOUSE: 'TOWNHOUSE',
  CONDO: 'CONDO',
  APARTMENT: 'APARTMENT'
};

export type HouseType = (typeof HouseType)[keyof typeof HouseType]


export const SourceType: {
  PRIVATE_VEHICLE: 'PRIVATE_VEHICLE',
  PUBLIC_VEHICLE: 'PUBLIC_VEHICLE',
  ELECTRICITY: 'ELECTRICITY',
  WATER_SUPPLY: 'WATER_SUPPLY',
  COOKING: 'COOKING',
  HEATING: 'HEATING',
  COOLING: 'COOLING',
  COMBUSTION: 'COMBUSTION'
};

export type SourceType = (typeof SourceType)[keyof typeof SourceType]


export const ModelType: {
  MODEL_1500_CC: 'MODEL_1500_CC',
  MODEL_1600_CC: 'MODEL_1600_CC',
  MODEL_1800_CC: 'MODEL_1800_CC',
  MODEL_2000_CC: 'MODEL_2000_CC',
  NGV: 'NGV',
  LPG: 'LPG'
};

export type ModelType = (typeof ModelType)[keyof typeof ModelType]


export const EnergyUsageType: {
  HEATING: 'HEATING',
  COOKING: 'COOKING',
  COOLING: 'COOLING',
  COMBUSTION: 'COMBUSTION'
};

export type EnergyUsageType = (typeof EnergyUsageType)[keyof typeof EnergyUsageType]


export const MaximumLevel: {
  PROVINCE: 'PROVINCE',
  DISTRICT: 'DISTRICT',
  SUBDISTRICT: 'SUBDISTRICT'
};

export type MaximumLevel = (typeof MaximumLevel)[keyof typeof MaximumLevel]

}

export type HouseType = $Enums.HouseType

export const HouseType: typeof $Enums.HouseType

export type SourceType = $Enums.SourceType

export const SourceType: typeof $Enums.SourceType

export type ModelType = $Enums.ModelType

export const ModelType: typeof $Enums.ModelType

export type EnergyUsageType = $Enums.EnergyUsageType

export const EnergyUsageType: typeof $Enums.EnergyUsageType

export type MaximumLevel = $Enums.MaximumLevel

export const MaximumLevel: typeof $Enums.MaximumLevel

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Addresses
 * const addresses = await prisma.address.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Addresses
   * const addresses = await prisma.address.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.household`: Exposes CRUD operations for the **Household** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Households
    * const households = await prisma.household.findMany()
    * ```
    */
  get household(): Prisma.HouseholdDelegate<ExtArgs>;

  /**
   * `prisma.carbonFootprint`: Exposes CRUD operations for the **CarbonFootprint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarbonFootprints
    * const carbonFootprints = await prisma.carbonFootprint.findMany()
    * ```
    */
  get carbonFootprint(): Prisma.CarbonFootprintDelegate<ExtArgs>;

  /**
   * `prisma.emissionFactor`: Exposes CRUD operations for the **EmissionFactor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmissionFactors
    * const emissionFactors = await prisma.emissionFactor.findMany()
    * ```
    */
  get emissionFactor(): Prisma.EmissionFactorDelegate<ExtArgs>;

  /**
   * `prisma.vehicleProperty`: Exposes CRUD operations for the **VehicleProperty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VehicleProperties
    * const vehicleProperties = await prisma.vehicleProperty.findMany()
    * ```
    */
  get vehicleProperty(): Prisma.VehiclePropertyDelegate<ExtArgs>;

  /**
   * `prisma.privateVehicle`: Exposes CRUD operations for the **PrivateVehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrivateVehicles
    * const privateVehicles = await prisma.privateVehicle.findMany()
    * ```
    */
  get privateVehicle(): Prisma.PrivateVehicleDelegate<ExtArgs>;

  /**
   * `prisma.transportation`: Exposes CRUD operations for the **Transportation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transportation
    * const transportation = await prisma.transportation.findMany()
    * ```
    */
  get transportation(): Prisma.TransportationDelegate<ExtArgs>;

  /**
   * `prisma.householdElectricity`: Exposes CRUD operations for the **HouseholdElectricity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HouseholdElectricities
    * const householdElectricities = await prisma.householdElectricity.findMany()
    * ```
    */
  get householdElectricity(): Prisma.HouseholdElectricityDelegate<ExtArgs>;

  /**
   * `prisma.electricityBill`: Exposes CRUD operations for the **ElectricityBill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ElectricityBills
    * const electricityBills = await prisma.electricityBill.findMany()
    * ```
    */
  get electricityBill(): Prisma.ElectricityBillDelegate<ExtArgs>;

  /**
   * `prisma.householdWaterSupply`: Exposes CRUD operations for the **HouseholdWaterSupply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HouseholdWaterSupplies
    * const householdWaterSupplies = await prisma.householdWaterSupply.findMany()
    * ```
    */
  get householdWaterSupply(): Prisma.HouseholdWaterSupplyDelegate<ExtArgs>;

  /**
   * `prisma.waterBill`: Exposes CRUD operations for the **WaterBill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WaterBills
    * const waterBills = await prisma.waterBill.findMany()
    * ```
    */
  get waterBill(): Prisma.WaterBillDelegate<ExtArgs>;

  /**
   * `prisma.householdOtherEnergy`: Exposes CRUD operations for the **HouseholdOtherEnergy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HouseholdOtherEnergies
    * const householdOtherEnergies = await prisma.householdOtherEnergy.findMany()
    * ```
    */
  get householdOtherEnergy(): Prisma.HouseholdOtherEnergyDelegate<ExtArgs>;

  /**
   * `prisma.otherEnergyConsumption`: Exposes CRUD operations for the **OtherEnergyConsumption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OtherEnergyConsumptions
    * const otherEnergyConsumptions = await prisma.otherEnergyConsumption.findMany()
    * ```
    */
  get otherEnergyConsumption(): Prisma.OtherEnergyConsumptionDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.profilePermission`: Exposes CRUD operations for the **ProfilePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilePermissions
    * const profilePermissions = await prisma.profilePermission.findMany()
    * ```
    */
  get profilePermission(): Prisma.ProfilePermissionDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Address: 'Address',
    Household: 'Household',
    CarbonFootprint: 'CarbonFootprint',
    EmissionFactor: 'EmissionFactor',
    VehicleProperty: 'VehicleProperty',
    PrivateVehicle: 'PrivateVehicle',
    Transportation: 'Transportation',
    HouseholdElectricity: 'HouseholdElectricity',
    ElectricityBill: 'ElectricityBill',
    HouseholdWaterSupply: 'HouseholdWaterSupply',
    WaterBill: 'WaterBill',
    HouseholdOtherEnergy: 'HouseholdOtherEnergy',
    OtherEnergyConsumption: 'OtherEnergyConsumption',
    Profile: 'Profile',
    ProfilePermission: 'ProfilePermission',
    Team: 'Team'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'address' | 'household' | 'carbonFootprint' | 'emissionFactor' | 'vehicleProperty' | 'privateVehicle' | 'transportation' | 'householdElectricity' | 'electricityBill' | 'householdWaterSupply' | 'waterBill' | 'householdOtherEnergy' | 'otherEnergyConsumption' | 'profile' | 'profilePermission' | 'team'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Household: {
        payload: Prisma.$HouseholdPayload<ExtArgs>
        fields: Prisma.HouseholdFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HouseholdFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HouseholdFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>
          }
          findFirst: {
            args: Prisma.HouseholdFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HouseholdFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>
          }
          findMany: {
            args: Prisma.HouseholdFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>[]
          }
          create: {
            args: Prisma.HouseholdCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>
          }
          createMany: {
            args: Prisma.HouseholdCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HouseholdDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>
          }
          update: {
            args: Prisma.HouseholdUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>
          }
          deleteMany: {
            args: Prisma.HouseholdDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HouseholdUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HouseholdUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdPayload>
          }
          aggregate: {
            args: Prisma.HouseholdAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHousehold>
          }
          groupBy: {
            args: Prisma.HouseholdGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdGroupByOutputType>[]
          }
          count: {
            args: Prisma.HouseholdCountArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdCountAggregateOutputType> | number
          }
        }
      }
      CarbonFootprint: {
        payload: Prisma.$CarbonFootprintPayload<ExtArgs>
        fields: Prisma.CarbonFootprintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarbonFootprintFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarbonFootprintFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>
          }
          findFirst: {
            args: Prisma.CarbonFootprintFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarbonFootprintFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>
          }
          findMany: {
            args: Prisma.CarbonFootprintFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>[]
          }
          create: {
            args: Prisma.CarbonFootprintCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>
          }
          createMany: {
            args: Prisma.CarbonFootprintCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CarbonFootprintDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>
          }
          update: {
            args: Prisma.CarbonFootprintUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>
          }
          deleteMany: {
            args: Prisma.CarbonFootprintDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CarbonFootprintUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CarbonFootprintUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarbonFootprintPayload>
          }
          aggregate: {
            args: Prisma.CarbonFootprintAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarbonFootprint>
          }
          groupBy: {
            args: Prisma.CarbonFootprintGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarbonFootprintGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarbonFootprintCountArgs<ExtArgs>,
            result: $Utils.Optional<CarbonFootprintCountAggregateOutputType> | number
          }
        }
      }
      EmissionFactor: {
        payload: Prisma.$EmissionFactorPayload<ExtArgs>
        fields: Prisma.EmissionFactorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmissionFactorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmissionFactorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>
          }
          findFirst: {
            args: Prisma.EmissionFactorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmissionFactorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>
          }
          findMany: {
            args: Prisma.EmissionFactorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>[]
          }
          create: {
            args: Prisma.EmissionFactorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>
          }
          createMany: {
            args: Prisma.EmissionFactorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmissionFactorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>
          }
          update: {
            args: Prisma.EmissionFactorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>
          }
          deleteMany: {
            args: Prisma.EmissionFactorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmissionFactorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmissionFactorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmissionFactorPayload>
          }
          aggregate: {
            args: Prisma.EmissionFactorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmissionFactor>
          }
          groupBy: {
            args: Prisma.EmissionFactorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmissionFactorGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmissionFactorCountArgs<ExtArgs>,
            result: $Utils.Optional<EmissionFactorCountAggregateOutputType> | number
          }
        }
      }
      VehicleProperty: {
        payload: Prisma.$VehiclePropertyPayload<ExtArgs>
        fields: Prisma.VehiclePropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehiclePropertyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehiclePropertyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>
          }
          findFirst: {
            args: Prisma.VehiclePropertyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehiclePropertyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>
          }
          findMany: {
            args: Prisma.VehiclePropertyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>[]
          }
          create: {
            args: Prisma.VehiclePropertyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>
          }
          createMany: {
            args: Prisma.VehiclePropertyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VehiclePropertyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>
          }
          update: {
            args: Prisma.VehiclePropertyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>
          }
          deleteMany: {
            args: Prisma.VehiclePropertyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VehiclePropertyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VehiclePropertyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePropertyPayload>
          }
          aggregate: {
            args: Prisma.VehiclePropertyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVehicleProperty>
          }
          groupBy: {
            args: Prisma.VehiclePropertyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VehiclePropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehiclePropertyCountArgs<ExtArgs>,
            result: $Utils.Optional<VehiclePropertyCountAggregateOutputType> | number
          }
        }
      }
      PrivateVehicle: {
        payload: Prisma.$PrivateVehiclePayload<ExtArgs>
        fields: Prisma.PrivateVehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrivateVehicleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrivateVehicleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>
          }
          findFirst: {
            args: Prisma.PrivateVehicleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrivateVehicleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>
          }
          findMany: {
            args: Prisma.PrivateVehicleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>[]
          }
          create: {
            args: Prisma.PrivateVehicleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>
          }
          createMany: {
            args: Prisma.PrivateVehicleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PrivateVehicleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>
          }
          update: {
            args: Prisma.PrivateVehicleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>
          }
          deleteMany: {
            args: Prisma.PrivateVehicleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PrivateVehicleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PrivateVehicleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrivateVehiclePayload>
          }
          aggregate: {
            args: Prisma.PrivateVehicleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePrivateVehicle>
          }
          groupBy: {
            args: Prisma.PrivateVehicleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PrivateVehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrivateVehicleCountArgs<ExtArgs>,
            result: $Utils.Optional<PrivateVehicleCountAggregateOutputType> | number
          }
        }
      }
      Transportation: {
        payload: Prisma.$TransportationPayload<ExtArgs>
        fields: Prisma.TransportationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransportationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransportationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>
          }
          findFirst: {
            args: Prisma.TransportationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransportationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>
          }
          findMany: {
            args: Prisma.TransportationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>[]
          }
          create: {
            args: Prisma.TransportationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>
          }
          createMany: {
            args: Prisma.TransportationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransportationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>
          }
          update: {
            args: Prisma.TransportationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>
          }
          deleteMany: {
            args: Prisma.TransportationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransportationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransportationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransportationPayload>
          }
          aggregate: {
            args: Prisma.TransportationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransportation>
          }
          groupBy: {
            args: Prisma.TransportationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransportationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransportationCountArgs<ExtArgs>,
            result: $Utils.Optional<TransportationCountAggregateOutputType> | number
          }
        }
      }
      HouseholdElectricity: {
        payload: Prisma.$HouseholdElectricityPayload<ExtArgs>
        fields: Prisma.HouseholdElectricityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HouseholdElectricityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HouseholdElectricityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>
          }
          findFirst: {
            args: Prisma.HouseholdElectricityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HouseholdElectricityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>
          }
          findMany: {
            args: Prisma.HouseholdElectricityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>[]
          }
          create: {
            args: Prisma.HouseholdElectricityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>
          }
          createMany: {
            args: Prisma.HouseholdElectricityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HouseholdElectricityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>
          }
          update: {
            args: Prisma.HouseholdElectricityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>
          }
          deleteMany: {
            args: Prisma.HouseholdElectricityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HouseholdElectricityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HouseholdElectricityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdElectricityPayload>
          }
          aggregate: {
            args: Prisma.HouseholdElectricityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHouseholdElectricity>
          }
          groupBy: {
            args: Prisma.HouseholdElectricityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdElectricityGroupByOutputType>[]
          }
          count: {
            args: Prisma.HouseholdElectricityCountArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdElectricityCountAggregateOutputType> | number
          }
        }
      }
      ElectricityBill: {
        payload: Prisma.$ElectricityBillPayload<ExtArgs>
        fields: Prisma.ElectricityBillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ElectricityBillFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ElectricityBillFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>
          }
          findFirst: {
            args: Prisma.ElectricityBillFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ElectricityBillFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>
          }
          findMany: {
            args: Prisma.ElectricityBillFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>[]
          }
          create: {
            args: Prisma.ElectricityBillCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>
          }
          createMany: {
            args: Prisma.ElectricityBillCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ElectricityBillDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>
          }
          update: {
            args: Prisma.ElectricityBillUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>
          }
          deleteMany: {
            args: Prisma.ElectricityBillDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ElectricityBillUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ElectricityBillUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElectricityBillPayload>
          }
          aggregate: {
            args: Prisma.ElectricityBillAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateElectricityBill>
          }
          groupBy: {
            args: Prisma.ElectricityBillGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ElectricityBillGroupByOutputType>[]
          }
          count: {
            args: Prisma.ElectricityBillCountArgs<ExtArgs>,
            result: $Utils.Optional<ElectricityBillCountAggregateOutputType> | number
          }
        }
      }
      HouseholdWaterSupply: {
        payload: Prisma.$HouseholdWaterSupplyPayload<ExtArgs>
        fields: Prisma.HouseholdWaterSupplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HouseholdWaterSupplyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HouseholdWaterSupplyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>
          }
          findFirst: {
            args: Prisma.HouseholdWaterSupplyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HouseholdWaterSupplyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>
          }
          findMany: {
            args: Prisma.HouseholdWaterSupplyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>[]
          }
          create: {
            args: Prisma.HouseholdWaterSupplyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>
          }
          createMany: {
            args: Prisma.HouseholdWaterSupplyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HouseholdWaterSupplyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>
          }
          update: {
            args: Prisma.HouseholdWaterSupplyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>
          }
          deleteMany: {
            args: Prisma.HouseholdWaterSupplyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HouseholdWaterSupplyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HouseholdWaterSupplyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdWaterSupplyPayload>
          }
          aggregate: {
            args: Prisma.HouseholdWaterSupplyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHouseholdWaterSupply>
          }
          groupBy: {
            args: Prisma.HouseholdWaterSupplyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdWaterSupplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.HouseholdWaterSupplyCountArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdWaterSupplyCountAggregateOutputType> | number
          }
        }
      }
      WaterBill: {
        payload: Prisma.$WaterBillPayload<ExtArgs>
        fields: Prisma.WaterBillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WaterBillFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WaterBillFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>
          }
          findFirst: {
            args: Prisma.WaterBillFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WaterBillFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>
          }
          findMany: {
            args: Prisma.WaterBillFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>[]
          }
          create: {
            args: Prisma.WaterBillCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>
          }
          createMany: {
            args: Prisma.WaterBillCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WaterBillDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>
          }
          update: {
            args: Prisma.WaterBillUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>
          }
          deleteMany: {
            args: Prisma.WaterBillDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WaterBillUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WaterBillUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WaterBillPayload>
          }
          aggregate: {
            args: Prisma.WaterBillAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWaterBill>
          }
          groupBy: {
            args: Prisma.WaterBillGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WaterBillGroupByOutputType>[]
          }
          count: {
            args: Prisma.WaterBillCountArgs<ExtArgs>,
            result: $Utils.Optional<WaterBillCountAggregateOutputType> | number
          }
        }
      }
      HouseholdOtherEnergy: {
        payload: Prisma.$HouseholdOtherEnergyPayload<ExtArgs>
        fields: Prisma.HouseholdOtherEnergyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HouseholdOtherEnergyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HouseholdOtherEnergyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>
          }
          findFirst: {
            args: Prisma.HouseholdOtherEnergyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HouseholdOtherEnergyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>
          }
          findMany: {
            args: Prisma.HouseholdOtherEnergyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>[]
          }
          create: {
            args: Prisma.HouseholdOtherEnergyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>
          }
          createMany: {
            args: Prisma.HouseholdOtherEnergyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HouseholdOtherEnergyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>
          }
          update: {
            args: Prisma.HouseholdOtherEnergyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>
          }
          deleteMany: {
            args: Prisma.HouseholdOtherEnergyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HouseholdOtherEnergyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HouseholdOtherEnergyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HouseholdOtherEnergyPayload>
          }
          aggregate: {
            args: Prisma.HouseholdOtherEnergyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHouseholdOtherEnergy>
          }
          groupBy: {
            args: Prisma.HouseholdOtherEnergyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdOtherEnergyGroupByOutputType>[]
          }
          count: {
            args: Prisma.HouseholdOtherEnergyCountArgs<ExtArgs>,
            result: $Utils.Optional<HouseholdOtherEnergyCountAggregateOutputType> | number
          }
        }
      }
      OtherEnergyConsumption: {
        payload: Prisma.$OtherEnergyConsumptionPayload<ExtArgs>
        fields: Prisma.OtherEnergyConsumptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtherEnergyConsumptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtherEnergyConsumptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>
          }
          findFirst: {
            args: Prisma.OtherEnergyConsumptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtherEnergyConsumptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>
          }
          findMany: {
            args: Prisma.OtherEnergyConsumptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>[]
          }
          create: {
            args: Prisma.OtherEnergyConsumptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>
          }
          createMany: {
            args: Prisma.OtherEnergyConsumptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OtherEnergyConsumptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>
          }
          update: {
            args: Prisma.OtherEnergyConsumptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>
          }
          deleteMany: {
            args: Prisma.OtherEnergyConsumptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OtherEnergyConsumptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OtherEnergyConsumptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OtherEnergyConsumptionPayload>
          }
          aggregate: {
            args: Prisma.OtherEnergyConsumptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOtherEnergyConsumption>
          }
          groupBy: {
            args: Prisma.OtherEnergyConsumptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OtherEnergyConsumptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtherEnergyConsumptionCountArgs<ExtArgs>,
            result: $Utils.Optional<OtherEnergyConsumptionCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      ProfilePermission: {
        payload: Prisma.$ProfilePermissionPayload<ExtArgs>
        fields: Prisma.ProfilePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilePermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilePermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>
          }
          findFirst: {
            args: Prisma.ProfilePermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilePermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>
          }
          findMany: {
            args: Prisma.ProfilePermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>[]
          }
          create: {
            args: Prisma.ProfilePermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>
          }
          createMany: {
            args: Prisma.ProfilePermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfilePermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>
          }
          update: {
            args: Prisma.ProfilePermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>
          }
          deleteMany: {
            args: Prisma.ProfilePermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilePermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfilePermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePermissionPayload>
          }
          aggregate: {
            args: Prisma.ProfilePermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfilePermission>
          }
          groupBy: {
            args: Prisma.ProfilePermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfilePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilePermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfilePermissionCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>,
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    households: number
    teams: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    households?: boolean | AddressCountOutputTypeCountHouseholdsArgs
    teams?: boolean | AddressCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountHouseholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdWhereInput
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }



  /**
   * Count Type HouseholdCountOutputType
   */

  export type HouseholdCountOutputType = {
    carbonFootprints: number
    privateVehicles: number
    transportations: number
    householdElectricities: number
    waterBills: number
    householdOtherEnergies: number
    electricityBills: number
    householdWaterSupplies: number
    otherEnergyConsumptions: number
  }

  export type HouseholdCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carbonFootprints?: boolean | HouseholdCountOutputTypeCountCarbonFootprintsArgs
    privateVehicles?: boolean | HouseholdCountOutputTypeCountPrivateVehiclesArgs
    transportations?: boolean | HouseholdCountOutputTypeCountTransportationsArgs
    householdElectricities?: boolean | HouseholdCountOutputTypeCountHouseholdElectricitiesArgs
    waterBills?: boolean | HouseholdCountOutputTypeCountWaterBillsArgs
    householdOtherEnergies?: boolean | HouseholdCountOutputTypeCountHouseholdOtherEnergiesArgs
    electricityBills?: boolean | HouseholdCountOutputTypeCountElectricityBillsArgs
    householdWaterSupplies?: boolean | HouseholdCountOutputTypeCountHouseholdWaterSuppliesArgs
    otherEnergyConsumptions?: boolean | HouseholdCountOutputTypeCountOtherEnergyConsumptionsArgs
  }

  // Custom InputTypes

  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdCountOutputType
     */
    select?: HouseholdCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountCarbonFootprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarbonFootprintWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountPrivateVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivateVehicleWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountTransportationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportationWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountHouseholdElectricitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdElectricityWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountWaterBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaterBillWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountHouseholdOtherEnergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdOtherEnergyWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountElectricityBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElectricityBillWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountHouseholdWaterSuppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdWaterSupplyWhereInput
  }


  /**
   * HouseholdCountOutputType without action
   */
  export type HouseholdCountOutputTypeCountOtherEnergyConsumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtherEnergyConsumptionWhereInput
  }



  /**
   * Count Type EmissionFactorCountOutputType
   */

  export type EmissionFactorCountOutputType = {
    privateVehicles: number
    electricityBills: number
    waterBills: number
    otherEnergyConsumptions: number
  }

  export type EmissionFactorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privateVehicles?: boolean | EmissionFactorCountOutputTypeCountPrivateVehiclesArgs
    electricityBills?: boolean | EmissionFactorCountOutputTypeCountElectricityBillsArgs
    waterBills?: boolean | EmissionFactorCountOutputTypeCountWaterBillsArgs
    otherEnergyConsumptions?: boolean | EmissionFactorCountOutputTypeCountOtherEnergyConsumptionsArgs
  }

  // Custom InputTypes

  /**
   * EmissionFactorCountOutputType without action
   */
  export type EmissionFactorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactorCountOutputType
     */
    select?: EmissionFactorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EmissionFactorCountOutputType without action
   */
  export type EmissionFactorCountOutputTypeCountPrivateVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivateVehicleWhereInput
  }


  /**
   * EmissionFactorCountOutputType without action
   */
  export type EmissionFactorCountOutputTypeCountElectricityBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElectricityBillWhereInput
  }


  /**
   * EmissionFactorCountOutputType without action
   */
  export type EmissionFactorCountOutputTypeCountWaterBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaterBillWhereInput
  }


  /**
   * EmissionFactorCountOutputType without action
   */
  export type EmissionFactorCountOutputTypeCountOtherEnergyConsumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtherEnergyConsumptionWhereInput
  }



  /**
   * Count Type VehiclePropertyCountOutputType
   */

  export type VehiclePropertyCountOutputType = {
    privateVehicles: number
  }

  export type VehiclePropertyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privateVehicles?: boolean | VehiclePropertyCountOutputTypeCountPrivateVehiclesArgs
  }

  // Custom InputTypes

  /**
   * VehiclePropertyCountOutputType without action
   */
  export type VehiclePropertyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehiclePropertyCountOutputType
     */
    select?: VehiclePropertyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * VehiclePropertyCountOutputType without action
   */
  export type VehiclePropertyCountOutputTypeCountPrivateVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivateVehicleWhereInput
  }



  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    profilePermissions: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profilePermissions?: boolean | ProfileCountOutputTypeCountProfilePermissionsArgs
  }

  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountProfilePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePermissionWhereInput
  }



  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    profilePermissions: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profilePermissions?: boolean | TeamCountOutputTypeCountProfilePermissionsArgs
  }

  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountProfilePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePermissionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    regionName: string | null
    provinceName: string | null
    districtName: string | null
    subdistrictName: string | null
    zipcode: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    regionName: string | null
    provinceName: string | null
    districtName: string | null
    subdistrictName: string | null
    zipcode: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    regionName: number
    provinceName: number
    districtName: number
    subdistrictName: number
    zipcode: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    regionName?: true
    provinceName?: true
    districtName?: true
    subdistrictName?: true
    zipcode?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    regionName?: true
    provinceName?: true
    districtName?: true
    subdistrictName?: true
    zipcode?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    regionName?: true
    provinceName?: true
    districtName?: true
    subdistrictName?: true
    zipcode?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: number
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionName?: boolean
    provinceName?: boolean
    districtName?: boolean
    subdistrictName?: boolean
    zipcode?: boolean
    households?: boolean | Address$householdsArgs<ExtArgs>
    teams?: boolean | Address$teamsArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    regionName?: boolean
    provinceName?: boolean
    districtName?: boolean
    subdistrictName?: boolean
    zipcode?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    households?: boolean | Address$householdsArgs<ExtArgs>
    teams?: boolean | Address$teamsArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      households: Prisma.$HouseholdPayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      regionName: string
      provinceName: string
      districtName: string
      subdistrictName: string
      zipcode: string
    }, ExtArgs["result"]["address"]>
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    households<T extends Address$householdsArgs<ExtArgs> = {}>(args?: Subset<T, Address$householdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findMany'> | Null>;

    teams<T extends Address$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Address$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'Int'>
    readonly regionName: FieldRef<"Address", 'String'>
    readonly provinceName: FieldRef<"Address", 'String'>
    readonly districtName: FieldRef<"Address", 'String'>
    readonly subdistrictName: FieldRef<"Address", 'String'>
    readonly zipcode: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }


  /**
   * Address.households
   */
  export type Address$householdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    where?: HouseholdWhereInput
    orderBy?: HouseholdOrderByWithRelationInput | HouseholdOrderByWithRelationInput[]
    cursor?: HouseholdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HouseholdScalarFieldEnum | HouseholdScalarFieldEnum[]
  }


  /**
   * Address.teams
   */
  export type Address$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
  }



  /**
   * Model Household
   */

  export type AggregateHousehold = {
    _count: HouseholdCountAggregateOutputType | null
    _avg: HouseholdAvgAggregateOutputType | null
    _sum: HouseholdSumAggregateOutputType | null
    _min: HouseholdMinAggregateOutputType | null
    _max: HouseholdMaxAggregateOutputType | null
  }

  export type HouseholdAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type HouseholdSumAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type HouseholdMinAggregateOutputType = {
    id: number | null
    addressId: number | null
    addressDetail: string | null
    houseType: $Enums.HouseType | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdMaxAggregateOutputType = {
    id: number | null
    addressId: number | null
    addressDetail: string | null
    houseType: $Enums.HouseType | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdCountAggregateOutputType = {
    id: number
    addressId: number
    addressDetail: number
    houseType: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type HouseholdAvgAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type HouseholdSumAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type HouseholdMinAggregateInputType = {
    id?: true
    addressId?: true
    addressDetail?: true
    houseType?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdMaxAggregateInputType = {
    id?: true
    addressId?: true
    addressDetail?: true
    houseType?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdCountAggregateInputType = {
    id?: true
    addressId?: true
    addressDetail?: true
    houseType?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type HouseholdAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Household to aggregate.
     */
    where?: HouseholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Households to fetch.
     */
    orderBy?: HouseholdOrderByWithRelationInput | HouseholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Households from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Households.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Households
    **/
    _count?: true | HouseholdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseholdAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseholdSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseholdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseholdMaxAggregateInputType
  }

  export type GetHouseholdAggregateType<T extends HouseholdAggregateArgs> = {
        [P in keyof T & keyof AggregateHousehold]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHousehold[P]>
      : GetScalarType<T[P], AggregateHousehold[P]>
  }




  export type HouseholdGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdWhereInput
    orderBy?: HouseholdOrderByWithAggregationInput | HouseholdOrderByWithAggregationInput[]
    by: HouseholdScalarFieldEnum[] | HouseholdScalarFieldEnum
    having?: HouseholdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseholdCountAggregateInputType | true
    _avg?: HouseholdAvgAggregateInputType
    _sum?: HouseholdSumAggregateInputType
    _min?: HouseholdMinAggregateInputType
    _max?: HouseholdMaxAggregateInputType
  }

  export type HouseholdGroupByOutputType = {
    id: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: HouseholdCountAggregateOutputType | null
    _avg: HouseholdAvgAggregateOutputType | null
    _sum: HouseholdSumAggregateOutputType | null
    _min: HouseholdMinAggregateOutputType | null
    _max: HouseholdMaxAggregateOutputType | null
  }

  type GetHouseholdGroupByPayload<T extends HouseholdGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HouseholdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseholdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseholdGroupByOutputType[P]>
            : GetScalarType<T[P], HouseholdGroupByOutputType[P]>
        }
      >
    >


  export type HouseholdSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressId?: boolean
    addressDetail?: boolean
    houseType?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    carbonFootprints?: boolean | Household$carbonFootprintsArgs<ExtArgs>
    privateVehicles?: boolean | Household$privateVehiclesArgs<ExtArgs>
    transportations?: boolean | Household$transportationsArgs<ExtArgs>
    householdElectricities?: boolean | Household$householdElectricitiesArgs<ExtArgs>
    waterBills?: boolean | Household$waterBillsArgs<ExtArgs>
    householdOtherEnergies?: boolean | Household$householdOtherEnergiesArgs<ExtArgs>
    electricityBills?: boolean | Household$electricityBillsArgs<ExtArgs>
    householdWaterSupplies?: boolean | Household$householdWaterSuppliesArgs<ExtArgs>
    otherEnergyConsumptions?: boolean | Household$otherEnergyConsumptionsArgs<ExtArgs>
    _count?: boolean | HouseholdCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["household"]>

  export type HouseholdSelectScalar = {
    id?: boolean
    addressId?: boolean
    addressDetail?: boolean
    houseType?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type HouseholdInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
    carbonFootprints?: boolean | Household$carbonFootprintsArgs<ExtArgs>
    privateVehicles?: boolean | Household$privateVehiclesArgs<ExtArgs>
    transportations?: boolean | Household$transportationsArgs<ExtArgs>
    householdElectricities?: boolean | Household$householdElectricitiesArgs<ExtArgs>
    waterBills?: boolean | Household$waterBillsArgs<ExtArgs>
    householdOtherEnergies?: boolean | Household$householdOtherEnergiesArgs<ExtArgs>
    electricityBills?: boolean | Household$electricityBillsArgs<ExtArgs>
    householdWaterSupplies?: boolean | Household$householdWaterSuppliesArgs<ExtArgs>
    otherEnergyConsumptions?: boolean | Household$otherEnergyConsumptionsArgs<ExtArgs>
    _count?: boolean | HouseholdCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HouseholdPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Household"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>
      carbonFootprints: Prisma.$CarbonFootprintPayload<ExtArgs>[]
      privateVehicles: Prisma.$PrivateVehiclePayload<ExtArgs>[]
      transportations: Prisma.$TransportationPayload<ExtArgs>[]
      householdElectricities: Prisma.$HouseholdElectricityPayload<ExtArgs>[]
      waterBills: Prisma.$WaterBillPayload<ExtArgs>[]
      householdOtherEnergies: Prisma.$HouseholdOtherEnergyPayload<ExtArgs>[]
      electricityBills: Prisma.$ElectricityBillPayload<ExtArgs>[]
      householdWaterSupplies: Prisma.$HouseholdWaterSupplyPayload<ExtArgs>[]
      otherEnergyConsumptions: Prisma.$OtherEnergyConsumptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      addressId: number
      addressDetail: string
      houseType: $Enums.HouseType
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["household"]>
    composites: {}
  }


  type HouseholdGetPayload<S extends boolean | null | undefined | HouseholdDefaultArgs> = $Result.GetResult<Prisma.$HouseholdPayload, S>

  type HouseholdCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HouseholdFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HouseholdCountAggregateInputType | true
    }

  export interface HouseholdDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Household'], meta: { name: 'Household' } }
    /**
     * Find zero or one Household that matches the filter.
     * @param {HouseholdFindUniqueArgs} args - Arguments to find a Household
     * @example
     * // Get one Household
     * const household = await prisma.household.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseholdFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdFindUniqueArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Household that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseholdFindUniqueOrThrowArgs} args - Arguments to find a Household
     * @example
     * // Get one Household
     * const household = await prisma.household.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseholdFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Household that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdFindFirstArgs} args - Arguments to find a Household
     * @example
     * // Get one Household
     * const household = await prisma.household.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseholdFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdFindFirstArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Household that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdFindFirstOrThrowArgs} args - Arguments to find a Household
     * @example
     * // Get one Household
     * const household = await prisma.household.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseholdFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Households that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Households
     * const households = await prisma.household.findMany()
     * 
     * // Get first 10 Households
     * const households = await prisma.household.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const householdWithIdOnly = await prisma.household.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseholdFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Household.
     * @param {HouseholdCreateArgs} args - Arguments to create a Household.
     * @example
     * // Create one Household
     * const Household = await prisma.household.create({
     *   data: {
     *     // ... data to create a Household
     *   }
     * })
     * 
    **/
    create<T extends HouseholdCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdCreateArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Households.
     *     @param {HouseholdCreateManyArgs} args - Arguments to create many Households.
     *     @example
     *     // Create many Households
     *     const household = await prisma.household.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseholdCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Household.
     * @param {HouseholdDeleteArgs} args - Arguments to delete one Household.
     * @example
     * // Delete one Household
     * const Household = await prisma.household.delete({
     *   where: {
     *     // ... filter to delete one Household
     *   }
     * })
     * 
    **/
    delete<T extends HouseholdDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdDeleteArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Household.
     * @param {HouseholdUpdateArgs} args - Arguments to update one Household.
     * @example
     * // Update one Household
     * const household = await prisma.household.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseholdUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdUpdateArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Households.
     * @param {HouseholdDeleteManyArgs} args - Arguments to filter Households to delete.
     * @example
     * // Delete a few Households
     * const { count } = await prisma.household.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseholdDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Households.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Households
     * const household = await prisma.household.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseholdUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Household.
     * @param {HouseholdUpsertArgs} args - Arguments to update or create a Household.
     * @example
     * // Update or create a Household
     * const household = await prisma.household.upsert({
     *   create: {
     *     // ... data to create a Household
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Household we want to update
     *   }
     * })
    **/
    upsert<T extends HouseholdUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdUpsertArgs<ExtArgs>>
    ): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Households.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdCountArgs} args - Arguments to filter Households to count.
     * @example
     * // Count the number of Households
     * const count = await prisma.household.count({
     *   where: {
     *     // ... the filter for the Households we want to count
     *   }
     * })
    **/
    count<T extends HouseholdCountArgs>(
      args?: Subset<T, HouseholdCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseholdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Household.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseholdAggregateArgs>(args: Subset<T, HouseholdAggregateArgs>): Prisma.PrismaPromise<GetHouseholdAggregateType<T>>

    /**
     * Group by Household.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseholdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseholdGroupByArgs['orderBy'] }
        : { orderBy?: HouseholdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseholdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseholdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Household model
   */
  readonly fields: HouseholdFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Household.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HouseholdClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    carbonFootprints<T extends Household$carbonFootprintsArgs<ExtArgs> = {}>(args?: Subset<T, Household$carbonFootprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findMany'> | Null>;

    privateVehicles<T extends Household$privateVehiclesArgs<ExtArgs> = {}>(args?: Subset<T, Household$privateVehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findMany'> | Null>;

    transportations<T extends Household$transportationsArgs<ExtArgs> = {}>(args?: Subset<T, Household$transportationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findMany'> | Null>;

    householdElectricities<T extends Household$householdElectricitiesArgs<ExtArgs> = {}>(args?: Subset<T, Household$householdElectricitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findMany'> | Null>;

    waterBills<T extends Household$waterBillsArgs<ExtArgs> = {}>(args?: Subset<T, Household$waterBillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findMany'> | Null>;

    householdOtherEnergies<T extends Household$householdOtherEnergiesArgs<ExtArgs> = {}>(args?: Subset<T, Household$householdOtherEnergiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findMany'> | Null>;

    electricityBills<T extends Household$electricityBillsArgs<ExtArgs> = {}>(args?: Subset<T, Household$electricityBillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findMany'> | Null>;

    householdWaterSupplies<T extends Household$householdWaterSuppliesArgs<ExtArgs> = {}>(args?: Subset<T, Household$householdWaterSuppliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    otherEnergyConsumptions<T extends Household$otherEnergyConsumptionsArgs<ExtArgs> = {}>(args?: Subset<T, Household$otherEnergyConsumptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Household model
   */ 
  interface HouseholdFieldRefs {
    readonly id: FieldRef<"Household", 'Int'>
    readonly addressId: FieldRef<"Household", 'Int'>
    readonly addressDetail: FieldRef<"Household", 'String'>
    readonly houseType: FieldRef<"Household", 'HouseType'>
    readonly recordedDate: FieldRef<"Household", 'DateTime'>
    readonly createdAt: FieldRef<"Household", 'DateTime'>
    readonly createdBy: FieldRef<"Household", 'DateTime'>
    readonly updatedAt: FieldRef<"Household", 'DateTime'>
    readonly updatedBy: FieldRef<"Household", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Household findUnique
   */
  export type HouseholdFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * Filter, which Household to fetch.
     */
    where: HouseholdWhereUniqueInput
  }


  /**
   * Household findUniqueOrThrow
   */
  export type HouseholdFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * Filter, which Household to fetch.
     */
    where: HouseholdWhereUniqueInput
  }


  /**
   * Household findFirst
   */
  export type HouseholdFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * Filter, which Household to fetch.
     */
    where?: HouseholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Households to fetch.
     */
    orderBy?: HouseholdOrderByWithRelationInput | HouseholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Households.
     */
    cursor?: HouseholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Households from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Households.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Households.
     */
    distinct?: HouseholdScalarFieldEnum | HouseholdScalarFieldEnum[]
  }


  /**
   * Household findFirstOrThrow
   */
  export type HouseholdFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * Filter, which Household to fetch.
     */
    where?: HouseholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Households to fetch.
     */
    orderBy?: HouseholdOrderByWithRelationInput | HouseholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Households.
     */
    cursor?: HouseholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Households from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Households.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Households.
     */
    distinct?: HouseholdScalarFieldEnum | HouseholdScalarFieldEnum[]
  }


  /**
   * Household findMany
   */
  export type HouseholdFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * Filter, which Households to fetch.
     */
    where?: HouseholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Households to fetch.
     */
    orderBy?: HouseholdOrderByWithRelationInput | HouseholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Households.
     */
    cursor?: HouseholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Households from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Households.
     */
    skip?: number
    distinct?: HouseholdScalarFieldEnum | HouseholdScalarFieldEnum[]
  }


  /**
   * Household create
   */
  export type HouseholdCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * The data needed to create a Household.
     */
    data: XOR<HouseholdCreateInput, HouseholdUncheckedCreateInput>
  }


  /**
   * Household createMany
   */
  export type HouseholdCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Households.
     */
    data: HouseholdCreateManyInput | HouseholdCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Household update
   */
  export type HouseholdUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * The data needed to update a Household.
     */
    data: XOR<HouseholdUpdateInput, HouseholdUncheckedUpdateInput>
    /**
     * Choose, which Household to update.
     */
    where: HouseholdWhereUniqueInput
  }


  /**
   * Household updateMany
   */
  export type HouseholdUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Households.
     */
    data: XOR<HouseholdUpdateManyMutationInput, HouseholdUncheckedUpdateManyInput>
    /**
     * Filter which Households to update
     */
    where?: HouseholdWhereInput
  }


  /**
   * Household upsert
   */
  export type HouseholdUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * The filter to search for the Household to update in case it exists.
     */
    where: HouseholdWhereUniqueInput
    /**
     * In case the Household found by the `where` argument doesn't exist, create a new Household with this data.
     */
    create: XOR<HouseholdCreateInput, HouseholdUncheckedCreateInput>
    /**
     * In case the Household was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseholdUpdateInput, HouseholdUncheckedUpdateInput>
  }


  /**
   * Household delete
   */
  export type HouseholdDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
    /**
     * Filter which Household to delete.
     */
    where: HouseholdWhereUniqueInput
  }


  /**
   * Household deleteMany
   */
  export type HouseholdDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Households to delete
     */
    where?: HouseholdWhereInput
  }


  /**
   * Household.carbonFootprints
   */
  export type Household$carbonFootprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    where?: CarbonFootprintWhereInput
    orderBy?: CarbonFootprintOrderByWithRelationInput | CarbonFootprintOrderByWithRelationInput[]
    cursor?: CarbonFootprintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarbonFootprintScalarFieldEnum | CarbonFootprintScalarFieldEnum[]
  }


  /**
   * Household.privateVehicles
   */
  export type Household$privateVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    where?: PrivateVehicleWhereInput
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    cursor?: PrivateVehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrivateVehicleScalarFieldEnum | PrivateVehicleScalarFieldEnum[]
  }


  /**
   * Household.transportations
   */
  export type Household$transportationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    where?: TransportationWhereInput
    orderBy?: TransportationOrderByWithRelationInput | TransportationOrderByWithRelationInput[]
    cursor?: TransportationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransportationScalarFieldEnum | TransportationScalarFieldEnum[]
  }


  /**
   * Household.householdElectricities
   */
  export type Household$householdElectricitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    where?: HouseholdElectricityWhereInput
    orderBy?: HouseholdElectricityOrderByWithRelationInput | HouseholdElectricityOrderByWithRelationInput[]
    cursor?: HouseholdElectricityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HouseholdElectricityScalarFieldEnum | HouseholdElectricityScalarFieldEnum[]
  }


  /**
   * Household.waterBills
   */
  export type Household$waterBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    where?: WaterBillWhereInput
    orderBy?: WaterBillOrderByWithRelationInput | WaterBillOrderByWithRelationInput[]
    cursor?: WaterBillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WaterBillScalarFieldEnum | WaterBillScalarFieldEnum[]
  }


  /**
   * Household.householdOtherEnergies
   */
  export type Household$householdOtherEnergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    where?: HouseholdOtherEnergyWhereInput
    orderBy?: HouseholdOtherEnergyOrderByWithRelationInput | HouseholdOtherEnergyOrderByWithRelationInput[]
    cursor?: HouseholdOtherEnergyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HouseholdOtherEnergyScalarFieldEnum | HouseholdOtherEnergyScalarFieldEnum[]
  }


  /**
   * Household.electricityBills
   */
  export type Household$electricityBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    where?: ElectricityBillWhereInput
    orderBy?: ElectricityBillOrderByWithRelationInput | ElectricityBillOrderByWithRelationInput[]
    cursor?: ElectricityBillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ElectricityBillScalarFieldEnum | ElectricityBillScalarFieldEnum[]
  }


  /**
   * Household.householdWaterSupplies
   */
  export type Household$householdWaterSuppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    where?: HouseholdWaterSupplyWhereInput
    orderBy?: HouseholdWaterSupplyOrderByWithRelationInput | HouseholdWaterSupplyOrderByWithRelationInput[]
    cursor?: HouseholdWaterSupplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HouseholdWaterSupplyScalarFieldEnum | HouseholdWaterSupplyScalarFieldEnum[]
  }


  /**
   * Household.otherEnergyConsumptions
   */
  export type Household$otherEnergyConsumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    where?: OtherEnergyConsumptionWhereInput
    orderBy?: OtherEnergyConsumptionOrderByWithRelationInput | OtherEnergyConsumptionOrderByWithRelationInput[]
    cursor?: OtherEnergyConsumptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtherEnergyConsumptionScalarFieldEnum | OtherEnergyConsumptionScalarFieldEnum[]
  }


  /**
   * Household without action
   */
  export type HouseholdDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Household
     */
    select?: HouseholdSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdInclude<ExtArgs> | null
  }



  /**
   * Model CarbonFootprint
   */

  export type AggregateCarbonFootprint = {
    _count: CarbonFootprintCountAggregateOutputType | null
    _avg: CarbonFootprintAvgAggregateOutputType | null
    _sum: CarbonFootprintSumAggregateOutputType | null
    _min: CarbonFootprintMinAggregateOutputType | null
    _max: CarbonFootprintMaxAggregateOutputType | null
  }

  export type CarbonFootprintAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    householdElectricityId: number | null
    householdWaterSupplyId: number | null
    householdOtherEnergyId: number | null
    transportaionId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type CarbonFootprintSumAggregateOutputType = {
    id: number | null
    householdId: number | null
    householdElectricityId: number | null
    householdWaterSupplyId: number | null
    householdOtherEnergyId: number | null
    transportaionId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type CarbonFootprintMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    householdElectricityId: number | null
    householdWaterSupplyId: number | null
    householdOtherEnergyId: number | null
    transportaionId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type CarbonFootprintMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    householdElectricityId: number | null
    householdWaterSupplyId: number | null
    householdOtherEnergyId: number | null
    transportaionId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type CarbonFootprintCountAggregateOutputType = {
    id: number
    householdId: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type CarbonFootprintAvgAggregateInputType = {
    id?: true
    householdId?: true
    householdElectricityId?: true
    householdWaterSupplyId?: true
    householdOtherEnergyId?: true
    transportaionId?: true
    totalCarbonFootprint?: true
  }

  export type CarbonFootprintSumAggregateInputType = {
    id?: true
    householdId?: true
    householdElectricityId?: true
    householdWaterSupplyId?: true
    householdOtherEnergyId?: true
    transportaionId?: true
    totalCarbonFootprint?: true
  }

  export type CarbonFootprintMinAggregateInputType = {
    id?: true
    householdId?: true
    householdElectricityId?: true
    householdWaterSupplyId?: true
    householdOtherEnergyId?: true
    transportaionId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CarbonFootprintMaxAggregateInputType = {
    id?: true
    householdId?: true
    householdElectricityId?: true
    householdWaterSupplyId?: true
    householdOtherEnergyId?: true
    transportaionId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CarbonFootprintCountAggregateInputType = {
    id?: true
    householdId?: true
    householdElectricityId?: true
    householdWaterSupplyId?: true
    householdOtherEnergyId?: true
    transportaionId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type CarbonFootprintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarbonFootprint to aggregate.
     */
    where?: CarbonFootprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarbonFootprints to fetch.
     */
    orderBy?: CarbonFootprintOrderByWithRelationInput | CarbonFootprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarbonFootprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarbonFootprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarbonFootprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarbonFootprints
    **/
    _count?: true | CarbonFootprintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarbonFootprintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarbonFootprintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarbonFootprintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarbonFootprintMaxAggregateInputType
  }

  export type GetCarbonFootprintAggregateType<T extends CarbonFootprintAggregateArgs> = {
        [P in keyof T & keyof AggregateCarbonFootprint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarbonFootprint[P]>
      : GetScalarType<T[P], AggregateCarbonFootprint[P]>
  }




  export type CarbonFootprintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarbonFootprintWhereInput
    orderBy?: CarbonFootprintOrderByWithAggregationInput | CarbonFootprintOrderByWithAggregationInput[]
    by: CarbonFootprintScalarFieldEnum[] | CarbonFootprintScalarFieldEnum
    having?: CarbonFootprintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarbonFootprintCountAggregateInputType | true
    _avg?: CarbonFootprintAvgAggregateInputType
    _sum?: CarbonFootprintSumAggregateInputType
    _min?: CarbonFootprintMinAggregateInputType
    _max?: CarbonFootprintMaxAggregateInputType
  }

  export type CarbonFootprintGroupByOutputType = {
    id: number
    householdId: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: CarbonFootprintCountAggregateOutputType | null
    _avg: CarbonFootprintAvgAggregateOutputType | null
    _sum: CarbonFootprintSumAggregateOutputType | null
    _min: CarbonFootprintMinAggregateOutputType | null
    _max: CarbonFootprintMaxAggregateOutputType | null
  }

  type GetCarbonFootprintGroupByPayload<T extends CarbonFootprintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarbonFootprintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarbonFootprintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarbonFootprintGroupByOutputType[P]>
            : GetScalarType<T[P], CarbonFootprintGroupByOutputType[P]>
        }
      >
    >


  export type CarbonFootprintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    householdElectricityId?: boolean
    householdWaterSupplyId?: boolean
    householdOtherEnergyId?: boolean
    transportaionId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    householdElectricity?: boolean | HouseholdElectricityDefaultArgs<ExtArgs>
    householdWaterSupply?: boolean | HouseholdWaterSupplyDefaultArgs<ExtArgs>
    householdOtherEnergy?: boolean | HouseholdOtherEnergyDefaultArgs<ExtArgs>
    transportation?: boolean | TransportationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carbonFootprint"]>

  export type CarbonFootprintSelectScalar = {
    id?: boolean
    householdId?: boolean
    householdElectricityId?: boolean
    householdWaterSupplyId?: boolean
    householdOtherEnergyId?: boolean
    transportaionId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type CarbonFootprintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    householdElectricity?: boolean | HouseholdElectricityDefaultArgs<ExtArgs>
    householdWaterSupply?: boolean | HouseholdWaterSupplyDefaultArgs<ExtArgs>
    householdOtherEnergy?: boolean | HouseholdOtherEnergyDefaultArgs<ExtArgs>
    transportation?: boolean | TransportationDefaultArgs<ExtArgs>
  }


  export type $CarbonFootprintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CarbonFootprint"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      householdElectricity: Prisma.$HouseholdElectricityPayload<ExtArgs>
      householdWaterSupply: Prisma.$HouseholdWaterSupplyPayload<ExtArgs>
      householdOtherEnergy: Prisma.$HouseholdOtherEnergyPayload<ExtArgs>
      transportation: Prisma.$TransportationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      householdElectricityId: number
      householdWaterSupplyId: number
      householdOtherEnergyId: number
      transportaionId: number
      totalCarbonFootprint: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["carbonFootprint"]>
    composites: {}
  }


  type CarbonFootprintGetPayload<S extends boolean | null | undefined | CarbonFootprintDefaultArgs> = $Result.GetResult<Prisma.$CarbonFootprintPayload, S>

  type CarbonFootprintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CarbonFootprintFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CarbonFootprintCountAggregateInputType | true
    }

  export interface CarbonFootprintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarbonFootprint'], meta: { name: 'CarbonFootprint' } }
    /**
     * Find zero or one CarbonFootprint that matches the filter.
     * @param {CarbonFootprintFindUniqueArgs} args - Arguments to find a CarbonFootprint
     * @example
     * // Get one CarbonFootprint
     * const carbonFootprint = await prisma.carbonFootprint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarbonFootprintFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CarbonFootprintFindUniqueArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CarbonFootprint that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarbonFootprintFindUniqueOrThrowArgs} args - Arguments to find a CarbonFootprint
     * @example
     * // Get one CarbonFootprint
     * const carbonFootprint = await prisma.carbonFootprint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarbonFootprintFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarbonFootprintFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CarbonFootprint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintFindFirstArgs} args - Arguments to find a CarbonFootprint
     * @example
     * // Get one CarbonFootprint
     * const carbonFootprint = await prisma.carbonFootprint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarbonFootprintFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CarbonFootprintFindFirstArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CarbonFootprint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintFindFirstOrThrowArgs} args - Arguments to find a CarbonFootprint
     * @example
     * // Get one CarbonFootprint
     * const carbonFootprint = await prisma.carbonFootprint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarbonFootprintFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarbonFootprintFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CarbonFootprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarbonFootprints
     * const carbonFootprints = await prisma.carbonFootprint.findMany()
     * 
     * // Get first 10 CarbonFootprints
     * const carbonFootprints = await prisma.carbonFootprint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carbonFootprintWithIdOnly = await prisma.carbonFootprint.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarbonFootprintFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarbonFootprintFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CarbonFootprint.
     * @param {CarbonFootprintCreateArgs} args - Arguments to create a CarbonFootprint.
     * @example
     * // Create one CarbonFootprint
     * const CarbonFootprint = await prisma.carbonFootprint.create({
     *   data: {
     *     // ... data to create a CarbonFootprint
     *   }
     * })
     * 
    **/
    create<T extends CarbonFootprintCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarbonFootprintCreateArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CarbonFootprints.
     *     @param {CarbonFootprintCreateManyArgs} args - Arguments to create many CarbonFootprints.
     *     @example
     *     // Create many CarbonFootprints
     *     const carbonFootprint = await prisma.carbonFootprint.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarbonFootprintCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarbonFootprintCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarbonFootprint.
     * @param {CarbonFootprintDeleteArgs} args - Arguments to delete one CarbonFootprint.
     * @example
     * // Delete one CarbonFootprint
     * const CarbonFootprint = await prisma.carbonFootprint.delete({
     *   where: {
     *     // ... filter to delete one CarbonFootprint
     *   }
     * })
     * 
    **/
    delete<T extends CarbonFootprintDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarbonFootprintDeleteArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CarbonFootprint.
     * @param {CarbonFootprintUpdateArgs} args - Arguments to update one CarbonFootprint.
     * @example
     * // Update one CarbonFootprint
     * const carbonFootprint = await prisma.carbonFootprint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarbonFootprintUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarbonFootprintUpdateArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CarbonFootprints.
     * @param {CarbonFootprintDeleteManyArgs} args - Arguments to filter CarbonFootprints to delete.
     * @example
     * // Delete a few CarbonFootprints
     * const { count } = await prisma.carbonFootprint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarbonFootprintDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarbonFootprintDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarbonFootprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarbonFootprints
     * const carbonFootprint = await prisma.carbonFootprint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarbonFootprintUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarbonFootprintUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarbonFootprint.
     * @param {CarbonFootprintUpsertArgs} args - Arguments to update or create a CarbonFootprint.
     * @example
     * // Update or create a CarbonFootprint
     * const carbonFootprint = await prisma.carbonFootprint.upsert({
     *   create: {
     *     // ... data to create a CarbonFootprint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarbonFootprint we want to update
     *   }
     * })
    **/
    upsert<T extends CarbonFootprintUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarbonFootprintUpsertArgs<ExtArgs>>
    ): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CarbonFootprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintCountArgs} args - Arguments to filter CarbonFootprints to count.
     * @example
     * // Count the number of CarbonFootprints
     * const count = await prisma.carbonFootprint.count({
     *   where: {
     *     // ... the filter for the CarbonFootprints we want to count
     *   }
     * })
    **/
    count<T extends CarbonFootprintCountArgs>(
      args?: Subset<T, CarbonFootprintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarbonFootprintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarbonFootprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarbonFootprintAggregateArgs>(args: Subset<T, CarbonFootprintAggregateArgs>): Prisma.PrismaPromise<GetCarbonFootprintAggregateType<T>>

    /**
     * Group by CarbonFootprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarbonFootprintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarbonFootprintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarbonFootprintGroupByArgs['orderBy'] }
        : { orderBy?: CarbonFootprintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarbonFootprintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarbonFootprintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CarbonFootprint model
   */
  readonly fields: CarbonFootprintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarbonFootprint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarbonFootprintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    householdElectricity<T extends HouseholdElectricityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdElectricityDefaultArgs<ExtArgs>>): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    householdWaterSupply<T extends HouseholdWaterSupplyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdWaterSupplyDefaultArgs<ExtArgs>>): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    householdOtherEnergy<T extends HouseholdOtherEnergyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdOtherEnergyDefaultArgs<ExtArgs>>): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    transportation<T extends TransportationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransportationDefaultArgs<ExtArgs>>): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CarbonFootprint model
   */ 
  interface CarbonFootprintFieldRefs {
    readonly id: FieldRef<"CarbonFootprint", 'Int'>
    readonly householdId: FieldRef<"CarbonFootprint", 'Int'>
    readonly householdElectricityId: FieldRef<"CarbonFootprint", 'Int'>
    readonly householdWaterSupplyId: FieldRef<"CarbonFootprint", 'Int'>
    readonly householdOtherEnergyId: FieldRef<"CarbonFootprint", 'Int'>
    readonly transportaionId: FieldRef<"CarbonFootprint", 'Int'>
    readonly totalCarbonFootprint: FieldRef<"CarbonFootprint", 'Decimal'>
    readonly recordedDate: FieldRef<"CarbonFootprint", 'DateTime'>
    readonly createdAt: FieldRef<"CarbonFootprint", 'DateTime'>
    readonly createdBy: FieldRef<"CarbonFootprint", 'DateTime'>
    readonly updatedAt: FieldRef<"CarbonFootprint", 'DateTime'>
    readonly updatedBy: FieldRef<"CarbonFootprint", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * CarbonFootprint findUnique
   */
  export type CarbonFootprintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * Filter, which CarbonFootprint to fetch.
     */
    where: CarbonFootprintWhereUniqueInput
  }


  /**
   * CarbonFootprint findUniqueOrThrow
   */
  export type CarbonFootprintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * Filter, which CarbonFootprint to fetch.
     */
    where: CarbonFootprintWhereUniqueInput
  }


  /**
   * CarbonFootprint findFirst
   */
  export type CarbonFootprintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * Filter, which CarbonFootprint to fetch.
     */
    where?: CarbonFootprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarbonFootprints to fetch.
     */
    orderBy?: CarbonFootprintOrderByWithRelationInput | CarbonFootprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarbonFootprints.
     */
    cursor?: CarbonFootprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarbonFootprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarbonFootprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarbonFootprints.
     */
    distinct?: CarbonFootprintScalarFieldEnum | CarbonFootprintScalarFieldEnum[]
  }


  /**
   * CarbonFootprint findFirstOrThrow
   */
  export type CarbonFootprintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * Filter, which CarbonFootprint to fetch.
     */
    where?: CarbonFootprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarbonFootprints to fetch.
     */
    orderBy?: CarbonFootprintOrderByWithRelationInput | CarbonFootprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarbonFootprints.
     */
    cursor?: CarbonFootprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarbonFootprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarbonFootprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarbonFootprints.
     */
    distinct?: CarbonFootprintScalarFieldEnum | CarbonFootprintScalarFieldEnum[]
  }


  /**
   * CarbonFootprint findMany
   */
  export type CarbonFootprintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * Filter, which CarbonFootprints to fetch.
     */
    where?: CarbonFootprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarbonFootprints to fetch.
     */
    orderBy?: CarbonFootprintOrderByWithRelationInput | CarbonFootprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarbonFootprints.
     */
    cursor?: CarbonFootprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarbonFootprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarbonFootprints.
     */
    skip?: number
    distinct?: CarbonFootprintScalarFieldEnum | CarbonFootprintScalarFieldEnum[]
  }


  /**
   * CarbonFootprint create
   */
  export type CarbonFootprintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * The data needed to create a CarbonFootprint.
     */
    data: XOR<CarbonFootprintCreateInput, CarbonFootprintUncheckedCreateInput>
  }


  /**
   * CarbonFootprint createMany
   */
  export type CarbonFootprintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarbonFootprints.
     */
    data: CarbonFootprintCreateManyInput | CarbonFootprintCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CarbonFootprint update
   */
  export type CarbonFootprintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * The data needed to update a CarbonFootprint.
     */
    data: XOR<CarbonFootprintUpdateInput, CarbonFootprintUncheckedUpdateInput>
    /**
     * Choose, which CarbonFootprint to update.
     */
    where: CarbonFootprintWhereUniqueInput
  }


  /**
   * CarbonFootprint updateMany
   */
  export type CarbonFootprintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarbonFootprints.
     */
    data: XOR<CarbonFootprintUpdateManyMutationInput, CarbonFootprintUncheckedUpdateManyInput>
    /**
     * Filter which CarbonFootprints to update
     */
    where?: CarbonFootprintWhereInput
  }


  /**
   * CarbonFootprint upsert
   */
  export type CarbonFootprintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * The filter to search for the CarbonFootprint to update in case it exists.
     */
    where: CarbonFootprintWhereUniqueInput
    /**
     * In case the CarbonFootprint found by the `where` argument doesn't exist, create a new CarbonFootprint with this data.
     */
    create: XOR<CarbonFootprintCreateInput, CarbonFootprintUncheckedCreateInput>
    /**
     * In case the CarbonFootprint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarbonFootprintUpdateInput, CarbonFootprintUncheckedUpdateInput>
  }


  /**
   * CarbonFootprint delete
   */
  export type CarbonFootprintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    /**
     * Filter which CarbonFootprint to delete.
     */
    where: CarbonFootprintWhereUniqueInput
  }


  /**
   * CarbonFootprint deleteMany
   */
  export type CarbonFootprintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarbonFootprints to delete
     */
    where?: CarbonFootprintWhereInput
  }


  /**
   * CarbonFootprint without action
   */
  export type CarbonFootprintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
  }



  /**
   * Model EmissionFactor
   */

  export type AggregateEmissionFactor = {
    _count: EmissionFactorCountAggregateOutputType | null
    _avg: EmissionFactorAvgAggregateOutputType | null
    _sum: EmissionFactorSumAggregateOutputType | null
    _min: EmissionFactorMinAggregateOutputType | null
    _max: EmissionFactorMaxAggregateOutputType | null
  }

  export type EmissionFactorAvgAggregateOutputType = {
    id: number | null
    carbonCoefficient: Decimal | null
  }

  export type EmissionFactorSumAggregateOutputType = {
    id: number | null
    carbonCoefficient: Decimal | null
  }

  export type EmissionFactorMinAggregateOutputType = {
    id: number | null
    sourceType: $Enums.SourceType | null
    name: string | null
    carbonCoefficient: Decimal | null
    unit: string | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type EmissionFactorMaxAggregateOutputType = {
    id: number | null
    sourceType: $Enums.SourceType | null
    name: string | null
    carbonCoefficient: Decimal | null
    unit: string | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type EmissionFactorCountAggregateOutputType = {
    id: number
    sourceType: number
    name: number
    carbonCoefficient: number
    unit: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type EmissionFactorAvgAggregateInputType = {
    id?: true
    carbonCoefficient?: true
  }

  export type EmissionFactorSumAggregateInputType = {
    id?: true
    carbonCoefficient?: true
  }

  export type EmissionFactorMinAggregateInputType = {
    id?: true
    sourceType?: true
    name?: true
    carbonCoefficient?: true
    unit?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type EmissionFactorMaxAggregateInputType = {
    id?: true
    sourceType?: true
    name?: true
    carbonCoefficient?: true
    unit?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type EmissionFactorCountAggregateInputType = {
    id?: true
    sourceType?: true
    name?: true
    carbonCoefficient?: true
    unit?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type EmissionFactorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmissionFactor to aggregate.
     */
    where?: EmissionFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmissionFactors to fetch.
     */
    orderBy?: EmissionFactorOrderByWithRelationInput | EmissionFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmissionFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmissionFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmissionFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmissionFactors
    **/
    _count?: true | EmissionFactorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmissionFactorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmissionFactorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmissionFactorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmissionFactorMaxAggregateInputType
  }

  export type GetEmissionFactorAggregateType<T extends EmissionFactorAggregateArgs> = {
        [P in keyof T & keyof AggregateEmissionFactor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmissionFactor[P]>
      : GetScalarType<T[P], AggregateEmissionFactor[P]>
  }




  export type EmissionFactorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmissionFactorWhereInput
    orderBy?: EmissionFactorOrderByWithAggregationInput | EmissionFactorOrderByWithAggregationInput[]
    by: EmissionFactorScalarFieldEnum[] | EmissionFactorScalarFieldEnum
    having?: EmissionFactorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmissionFactorCountAggregateInputType | true
    _avg?: EmissionFactorAvgAggregateInputType
    _sum?: EmissionFactorSumAggregateInputType
    _min?: EmissionFactorMinAggregateInputType
    _max?: EmissionFactorMaxAggregateInputType
  }

  export type EmissionFactorGroupByOutputType = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal
    unit: string
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: EmissionFactorCountAggregateOutputType | null
    _avg: EmissionFactorAvgAggregateOutputType | null
    _sum: EmissionFactorSumAggregateOutputType | null
    _min: EmissionFactorMinAggregateOutputType | null
    _max: EmissionFactorMaxAggregateOutputType | null
  }

  type GetEmissionFactorGroupByPayload<T extends EmissionFactorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmissionFactorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmissionFactorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmissionFactorGroupByOutputType[P]>
            : GetScalarType<T[P], EmissionFactorGroupByOutputType[P]>
        }
      >
    >


  export type EmissionFactorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceType?: boolean
    name?: boolean
    carbonCoefficient?: boolean
    unit?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    privateVehicles?: boolean | EmissionFactor$privateVehiclesArgs<ExtArgs>
    electricityBills?: boolean | EmissionFactor$electricityBillsArgs<ExtArgs>
    waterBills?: boolean | EmissionFactor$waterBillsArgs<ExtArgs>
    otherEnergyConsumptions?: boolean | EmissionFactor$otherEnergyConsumptionsArgs<ExtArgs>
    _count?: boolean | EmissionFactorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emissionFactor"]>

  export type EmissionFactorSelectScalar = {
    id?: boolean
    sourceType?: boolean
    name?: boolean
    carbonCoefficient?: boolean
    unit?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type EmissionFactorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privateVehicles?: boolean | EmissionFactor$privateVehiclesArgs<ExtArgs>
    electricityBills?: boolean | EmissionFactor$electricityBillsArgs<ExtArgs>
    waterBills?: boolean | EmissionFactor$waterBillsArgs<ExtArgs>
    otherEnergyConsumptions?: boolean | EmissionFactor$otherEnergyConsumptionsArgs<ExtArgs>
    _count?: boolean | EmissionFactorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EmissionFactorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmissionFactor"
    objects: {
      privateVehicles: Prisma.$PrivateVehiclePayload<ExtArgs>[]
      electricityBills: Prisma.$ElectricityBillPayload<ExtArgs>[]
      waterBills: Prisma.$WaterBillPayload<ExtArgs>[]
      otherEnergyConsumptions: Prisma.$OtherEnergyConsumptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sourceType: $Enums.SourceType
      name: string
      carbonCoefficient: Prisma.Decimal
      unit: string
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["emissionFactor"]>
    composites: {}
  }


  type EmissionFactorGetPayload<S extends boolean | null | undefined | EmissionFactorDefaultArgs> = $Result.GetResult<Prisma.$EmissionFactorPayload, S>

  type EmissionFactorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmissionFactorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EmissionFactorCountAggregateInputType | true
    }

  export interface EmissionFactorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmissionFactor'], meta: { name: 'EmissionFactor' } }
    /**
     * Find zero or one EmissionFactor that matches the filter.
     * @param {EmissionFactorFindUniqueArgs} args - Arguments to find a EmissionFactor
     * @example
     * // Get one EmissionFactor
     * const emissionFactor = await prisma.emissionFactor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmissionFactorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmissionFactorFindUniqueArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EmissionFactor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmissionFactorFindUniqueOrThrowArgs} args - Arguments to find a EmissionFactor
     * @example
     * // Get one EmissionFactor
     * const emissionFactor = await prisma.emissionFactor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmissionFactorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmissionFactorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EmissionFactor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorFindFirstArgs} args - Arguments to find a EmissionFactor
     * @example
     * // Get one EmissionFactor
     * const emissionFactor = await prisma.emissionFactor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmissionFactorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmissionFactorFindFirstArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EmissionFactor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorFindFirstOrThrowArgs} args - Arguments to find a EmissionFactor
     * @example
     * // Get one EmissionFactor
     * const emissionFactor = await prisma.emissionFactor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmissionFactorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmissionFactorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EmissionFactors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmissionFactors
     * const emissionFactors = await prisma.emissionFactor.findMany()
     * 
     * // Get first 10 EmissionFactors
     * const emissionFactors = await prisma.emissionFactor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emissionFactorWithIdOnly = await prisma.emissionFactor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmissionFactorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmissionFactorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EmissionFactor.
     * @param {EmissionFactorCreateArgs} args - Arguments to create a EmissionFactor.
     * @example
     * // Create one EmissionFactor
     * const EmissionFactor = await prisma.emissionFactor.create({
     *   data: {
     *     // ... data to create a EmissionFactor
     *   }
     * })
     * 
    **/
    create<T extends EmissionFactorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmissionFactorCreateArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EmissionFactors.
     *     @param {EmissionFactorCreateManyArgs} args - Arguments to create many EmissionFactors.
     *     @example
     *     // Create many EmissionFactors
     *     const emissionFactor = await prisma.emissionFactor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmissionFactorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmissionFactorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmissionFactor.
     * @param {EmissionFactorDeleteArgs} args - Arguments to delete one EmissionFactor.
     * @example
     * // Delete one EmissionFactor
     * const EmissionFactor = await prisma.emissionFactor.delete({
     *   where: {
     *     // ... filter to delete one EmissionFactor
     *   }
     * })
     * 
    **/
    delete<T extends EmissionFactorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmissionFactorDeleteArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EmissionFactor.
     * @param {EmissionFactorUpdateArgs} args - Arguments to update one EmissionFactor.
     * @example
     * // Update one EmissionFactor
     * const emissionFactor = await prisma.emissionFactor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmissionFactorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmissionFactorUpdateArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EmissionFactors.
     * @param {EmissionFactorDeleteManyArgs} args - Arguments to filter EmissionFactors to delete.
     * @example
     * // Delete a few EmissionFactors
     * const { count } = await prisma.emissionFactor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmissionFactorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmissionFactorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmissionFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmissionFactors
     * const emissionFactor = await prisma.emissionFactor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmissionFactorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmissionFactorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmissionFactor.
     * @param {EmissionFactorUpsertArgs} args - Arguments to update or create a EmissionFactor.
     * @example
     * // Update or create a EmissionFactor
     * const emissionFactor = await prisma.emissionFactor.upsert({
     *   create: {
     *     // ... data to create a EmissionFactor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmissionFactor we want to update
     *   }
     * })
    **/
    upsert<T extends EmissionFactorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmissionFactorUpsertArgs<ExtArgs>>
    ): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EmissionFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorCountArgs} args - Arguments to filter EmissionFactors to count.
     * @example
     * // Count the number of EmissionFactors
     * const count = await prisma.emissionFactor.count({
     *   where: {
     *     // ... the filter for the EmissionFactors we want to count
     *   }
     * })
    **/
    count<T extends EmissionFactorCountArgs>(
      args?: Subset<T, EmissionFactorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmissionFactorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmissionFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmissionFactorAggregateArgs>(args: Subset<T, EmissionFactorAggregateArgs>): Prisma.PrismaPromise<GetEmissionFactorAggregateType<T>>

    /**
     * Group by EmissionFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmissionFactorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmissionFactorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmissionFactorGroupByArgs['orderBy'] }
        : { orderBy?: EmissionFactorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmissionFactorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmissionFactorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmissionFactor model
   */
  readonly fields: EmissionFactorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmissionFactor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmissionFactorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    privateVehicles<T extends EmissionFactor$privateVehiclesArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactor$privateVehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findMany'> | Null>;

    electricityBills<T extends EmissionFactor$electricityBillsArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactor$electricityBillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findMany'> | Null>;

    waterBills<T extends EmissionFactor$waterBillsArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactor$waterBillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findMany'> | Null>;

    otherEnergyConsumptions<T extends EmissionFactor$otherEnergyConsumptionsArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactor$otherEnergyConsumptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EmissionFactor model
   */ 
  interface EmissionFactorFieldRefs {
    readonly id: FieldRef<"EmissionFactor", 'Int'>
    readonly sourceType: FieldRef<"EmissionFactor", 'SourceType'>
    readonly name: FieldRef<"EmissionFactor", 'String'>
    readonly carbonCoefficient: FieldRef<"EmissionFactor", 'Decimal'>
    readonly unit: FieldRef<"EmissionFactor", 'String'>
    readonly createdAt: FieldRef<"EmissionFactor", 'DateTime'>
    readonly createdBy: FieldRef<"EmissionFactor", 'DateTime'>
    readonly updatedAt: FieldRef<"EmissionFactor", 'DateTime'>
    readonly updatedBy: FieldRef<"EmissionFactor", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * EmissionFactor findUnique
   */
  export type EmissionFactorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * Filter, which EmissionFactor to fetch.
     */
    where: EmissionFactorWhereUniqueInput
  }


  /**
   * EmissionFactor findUniqueOrThrow
   */
  export type EmissionFactorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * Filter, which EmissionFactor to fetch.
     */
    where: EmissionFactorWhereUniqueInput
  }


  /**
   * EmissionFactor findFirst
   */
  export type EmissionFactorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * Filter, which EmissionFactor to fetch.
     */
    where?: EmissionFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmissionFactors to fetch.
     */
    orderBy?: EmissionFactorOrderByWithRelationInput | EmissionFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmissionFactors.
     */
    cursor?: EmissionFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmissionFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmissionFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmissionFactors.
     */
    distinct?: EmissionFactorScalarFieldEnum | EmissionFactorScalarFieldEnum[]
  }


  /**
   * EmissionFactor findFirstOrThrow
   */
  export type EmissionFactorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * Filter, which EmissionFactor to fetch.
     */
    where?: EmissionFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmissionFactors to fetch.
     */
    orderBy?: EmissionFactorOrderByWithRelationInput | EmissionFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmissionFactors.
     */
    cursor?: EmissionFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmissionFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmissionFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmissionFactors.
     */
    distinct?: EmissionFactorScalarFieldEnum | EmissionFactorScalarFieldEnum[]
  }


  /**
   * EmissionFactor findMany
   */
  export type EmissionFactorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * Filter, which EmissionFactors to fetch.
     */
    where?: EmissionFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmissionFactors to fetch.
     */
    orderBy?: EmissionFactorOrderByWithRelationInput | EmissionFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmissionFactors.
     */
    cursor?: EmissionFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmissionFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmissionFactors.
     */
    skip?: number
    distinct?: EmissionFactorScalarFieldEnum | EmissionFactorScalarFieldEnum[]
  }


  /**
   * EmissionFactor create
   */
  export type EmissionFactorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * The data needed to create a EmissionFactor.
     */
    data: XOR<EmissionFactorCreateInput, EmissionFactorUncheckedCreateInput>
  }


  /**
   * EmissionFactor createMany
   */
  export type EmissionFactorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmissionFactors.
     */
    data: EmissionFactorCreateManyInput | EmissionFactorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EmissionFactor update
   */
  export type EmissionFactorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * The data needed to update a EmissionFactor.
     */
    data: XOR<EmissionFactorUpdateInput, EmissionFactorUncheckedUpdateInput>
    /**
     * Choose, which EmissionFactor to update.
     */
    where: EmissionFactorWhereUniqueInput
  }


  /**
   * EmissionFactor updateMany
   */
  export type EmissionFactorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmissionFactors.
     */
    data: XOR<EmissionFactorUpdateManyMutationInput, EmissionFactorUncheckedUpdateManyInput>
    /**
     * Filter which EmissionFactors to update
     */
    where?: EmissionFactorWhereInput
  }


  /**
   * EmissionFactor upsert
   */
  export type EmissionFactorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * The filter to search for the EmissionFactor to update in case it exists.
     */
    where: EmissionFactorWhereUniqueInput
    /**
     * In case the EmissionFactor found by the `where` argument doesn't exist, create a new EmissionFactor with this data.
     */
    create: XOR<EmissionFactorCreateInput, EmissionFactorUncheckedCreateInput>
    /**
     * In case the EmissionFactor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmissionFactorUpdateInput, EmissionFactorUncheckedUpdateInput>
  }


  /**
   * EmissionFactor delete
   */
  export type EmissionFactorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
    /**
     * Filter which EmissionFactor to delete.
     */
    where: EmissionFactorWhereUniqueInput
  }


  /**
   * EmissionFactor deleteMany
   */
  export type EmissionFactorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmissionFactors to delete
     */
    where?: EmissionFactorWhereInput
  }


  /**
   * EmissionFactor.privateVehicles
   */
  export type EmissionFactor$privateVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    where?: PrivateVehicleWhereInput
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    cursor?: PrivateVehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrivateVehicleScalarFieldEnum | PrivateVehicleScalarFieldEnum[]
  }


  /**
   * EmissionFactor.electricityBills
   */
  export type EmissionFactor$electricityBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    where?: ElectricityBillWhereInput
    orderBy?: ElectricityBillOrderByWithRelationInput | ElectricityBillOrderByWithRelationInput[]
    cursor?: ElectricityBillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ElectricityBillScalarFieldEnum | ElectricityBillScalarFieldEnum[]
  }


  /**
   * EmissionFactor.waterBills
   */
  export type EmissionFactor$waterBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    where?: WaterBillWhereInput
    orderBy?: WaterBillOrderByWithRelationInput | WaterBillOrderByWithRelationInput[]
    cursor?: WaterBillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WaterBillScalarFieldEnum | WaterBillScalarFieldEnum[]
  }


  /**
   * EmissionFactor.otherEnergyConsumptions
   */
  export type EmissionFactor$otherEnergyConsumptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    where?: OtherEnergyConsumptionWhereInput
    orderBy?: OtherEnergyConsumptionOrderByWithRelationInput | OtherEnergyConsumptionOrderByWithRelationInput[]
    cursor?: OtherEnergyConsumptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtherEnergyConsumptionScalarFieldEnum | OtherEnergyConsumptionScalarFieldEnum[]
  }


  /**
   * EmissionFactor without action
   */
  export type EmissionFactorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmissionFactor
     */
    select?: EmissionFactorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmissionFactorInclude<ExtArgs> | null
  }



  /**
   * Model VehicleProperty
   */

  export type AggregateVehicleProperty = {
    _count: VehiclePropertyCountAggregateOutputType | null
    _avg: VehiclePropertyAvgAggregateOutputType | null
    _sum: VehiclePropertySumAggregateOutputType | null
    _min: VehiclePropertyMinAggregateOutputType | null
    _max: VehiclePropertyMaxAggregateOutputType | null
  }

  export type VehiclePropertyAvgAggregateOutputType = {
    id: number | null
    consumptionRate: Decimal | null
  }

  export type VehiclePropertySumAggregateOutputType = {
    id: number | null
    consumptionRate: Decimal | null
  }

  export type VehiclePropertyMinAggregateOutputType = {
    id: number | null
    modelType: $Enums.ModelType | null
    consumptionRate: Decimal | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type VehiclePropertyMaxAggregateOutputType = {
    id: number | null
    modelType: $Enums.ModelType | null
    consumptionRate: Decimal | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type VehiclePropertyCountAggregateOutputType = {
    id: number
    modelType: number
    consumptionRate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type VehiclePropertyAvgAggregateInputType = {
    id?: true
    consumptionRate?: true
  }

  export type VehiclePropertySumAggregateInputType = {
    id?: true
    consumptionRate?: true
  }

  export type VehiclePropertyMinAggregateInputType = {
    id?: true
    modelType?: true
    consumptionRate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type VehiclePropertyMaxAggregateInputType = {
    id?: true
    modelType?: true
    consumptionRate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type VehiclePropertyCountAggregateInputType = {
    id?: true
    modelType?: true
    consumptionRate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type VehiclePropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VehicleProperty to aggregate.
     */
    where?: VehiclePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleProperties to fetch.
     */
    orderBy?: VehiclePropertyOrderByWithRelationInput | VehiclePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehiclePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VehicleProperties
    **/
    _count?: true | VehiclePropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehiclePropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehiclePropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehiclePropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehiclePropertyMaxAggregateInputType
  }

  export type GetVehiclePropertyAggregateType<T extends VehiclePropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicleProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicleProperty[P]>
      : GetScalarType<T[P], AggregateVehicleProperty[P]>
  }




  export type VehiclePropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehiclePropertyWhereInput
    orderBy?: VehiclePropertyOrderByWithAggregationInput | VehiclePropertyOrderByWithAggregationInput[]
    by: VehiclePropertyScalarFieldEnum[] | VehiclePropertyScalarFieldEnum
    having?: VehiclePropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehiclePropertyCountAggregateInputType | true
    _avg?: VehiclePropertyAvgAggregateInputType
    _sum?: VehiclePropertySumAggregateInputType
    _min?: VehiclePropertyMinAggregateInputType
    _max?: VehiclePropertyMaxAggregateInputType
  }

  export type VehiclePropertyGroupByOutputType = {
    id: number
    modelType: $Enums.ModelType
    consumptionRate: Decimal
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: VehiclePropertyCountAggregateOutputType | null
    _avg: VehiclePropertyAvgAggregateOutputType | null
    _sum: VehiclePropertySumAggregateOutputType | null
    _min: VehiclePropertyMinAggregateOutputType | null
    _max: VehiclePropertyMaxAggregateOutputType | null
  }

  type GetVehiclePropertyGroupByPayload<T extends VehiclePropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehiclePropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehiclePropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehiclePropertyGroupByOutputType[P]>
            : GetScalarType<T[P], VehiclePropertyGroupByOutputType[P]>
        }
      >
    >


  export type VehiclePropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelType?: boolean
    consumptionRate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    privateVehicles?: boolean | VehicleProperty$privateVehiclesArgs<ExtArgs>
    _count?: boolean | VehiclePropertyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicleProperty"]>

  export type VehiclePropertySelectScalar = {
    id?: boolean
    modelType?: boolean
    consumptionRate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type VehiclePropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privateVehicles?: boolean | VehicleProperty$privateVehiclesArgs<ExtArgs>
    _count?: boolean | VehiclePropertyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $VehiclePropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VehicleProperty"
    objects: {
      privateVehicles: Prisma.$PrivateVehiclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      modelType: $Enums.ModelType
      consumptionRate: Prisma.Decimal
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["vehicleProperty"]>
    composites: {}
  }


  type VehiclePropertyGetPayload<S extends boolean | null | undefined | VehiclePropertyDefaultArgs> = $Result.GetResult<Prisma.$VehiclePropertyPayload, S>

  type VehiclePropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VehiclePropertyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: VehiclePropertyCountAggregateInputType | true
    }

  export interface VehiclePropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VehicleProperty'], meta: { name: 'VehicleProperty' } }
    /**
     * Find zero or one VehicleProperty that matches the filter.
     * @param {VehiclePropertyFindUniqueArgs} args - Arguments to find a VehicleProperty
     * @example
     * // Get one VehicleProperty
     * const vehicleProperty = await prisma.vehicleProperty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VehiclePropertyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VehiclePropertyFindUniqueArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VehicleProperty that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VehiclePropertyFindUniqueOrThrowArgs} args - Arguments to find a VehicleProperty
     * @example
     * // Get one VehicleProperty
     * const vehicleProperty = await prisma.vehicleProperty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VehiclePropertyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VehiclePropertyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VehicleProperty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyFindFirstArgs} args - Arguments to find a VehicleProperty
     * @example
     * // Get one VehicleProperty
     * const vehicleProperty = await prisma.vehicleProperty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VehiclePropertyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VehiclePropertyFindFirstArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VehicleProperty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyFindFirstOrThrowArgs} args - Arguments to find a VehicleProperty
     * @example
     * // Get one VehicleProperty
     * const vehicleProperty = await prisma.vehicleProperty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VehiclePropertyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VehiclePropertyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VehicleProperties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VehicleProperties
     * const vehicleProperties = await prisma.vehicleProperty.findMany()
     * 
     * // Get first 10 VehicleProperties
     * const vehicleProperties = await prisma.vehicleProperty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehiclePropertyWithIdOnly = await prisma.vehicleProperty.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VehiclePropertyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VehiclePropertyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VehicleProperty.
     * @param {VehiclePropertyCreateArgs} args - Arguments to create a VehicleProperty.
     * @example
     * // Create one VehicleProperty
     * const VehicleProperty = await prisma.vehicleProperty.create({
     *   data: {
     *     // ... data to create a VehicleProperty
     *   }
     * })
     * 
    **/
    create<T extends VehiclePropertyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VehiclePropertyCreateArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VehicleProperties.
     *     @param {VehiclePropertyCreateManyArgs} args - Arguments to create many VehicleProperties.
     *     @example
     *     // Create many VehicleProperties
     *     const vehicleProperty = await prisma.vehicleProperty.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VehiclePropertyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VehiclePropertyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VehicleProperty.
     * @param {VehiclePropertyDeleteArgs} args - Arguments to delete one VehicleProperty.
     * @example
     * // Delete one VehicleProperty
     * const VehicleProperty = await prisma.vehicleProperty.delete({
     *   where: {
     *     // ... filter to delete one VehicleProperty
     *   }
     * })
     * 
    **/
    delete<T extends VehiclePropertyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VehiclePropertyDeleteArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VehicleProperty.
     * @param {VehiclePropertyUpdateArgs} args - Arguments to update one VehicleProperty.
     * @example
     * // Update one VehicleProperty
     * const vehicleProperty = await prisma.vehicleProperty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VehiclePropertyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VehiclePropertyUpdateArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VehicleProperties.
     * @param {VehiclePropertyDeleteManyArgs} args - Arguments to filter VehicleProperties to delete.
     * @example
     * // Delete a few VehicleProperties
     * const { count } = await prisma.vehicleProperty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VehiclePropertyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VehiclePropertyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VehicleProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VehicleProperties
     * const vehicleProperty = await prisma.vehicleProperty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VehiclePropertyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VehiclePropertyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VehicleProperty.
     * @param {VehiclePropertyUpsertArgs} args - Arguments to update or create a VehicleProperty.
     * @example
     * // Update or create a VehicleProperty
     * const vehicleProperty = await prisma.vehicleProperty.upsert({
     *   create: {
     *     // ... data to create a VehicleProperty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VehicleProperty we want to update
     *   }
     * })
    **/
    upsert<T extends VehiclePropertyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VehiclePropertyUpsertArgs<ExtArgs>>
    ): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VehicleProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyCountArgs} args - Arguments to filter VehicleProperties to count.
     * @example
     * // Count the number of VehicleProperties
     * const count = await prisma.vehicleProperty.count({
     *   where: {
     *     // ... the filter for the VehicleProperties we want to count
     *   }
     * })
    **/
    count<T extends VehiclePropertyCountArgs>(
      args?: Subset<T, VehiclePropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehiclePropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VehicleProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehiclePropertyAggregateArgs>(args: Subset<T, VehiclePropertyAggregateArgs>): Prisma.PrismaPromise<GetVehiclePropertyAggregateType<T>>

    /**
     * Group by VehicleProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclePropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehiclePropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehiclePropertyGroupByArgs['orderBy'] }
        : { orderBy?: VehiclePropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehiclePropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehiclePropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VehicleProperty model
   */
  readonly fields: VehiclePropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VehicleProperty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehiclePropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    privateVehicles<T extends VehicleProperty$privateVehiclesArgs<ExtArgs> = {}>(args?: Subset<T, VehicleProperty$privateVehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VehicleProperty model
   */ 
  interface VehiclePropertyFieldRefs {
    readonly id: FieldRef<"VehicleProperty", 'Int'>
    readonly modelType: FieldRef<"VehicleProperty", 'ModelType'>
    readonly consumptionRate: FieldRef<"VehicleProperty", 'Decimal'>
    readonly createdAt: FieldRef<"VehicleProperty", 'DateTime'>
    readonly createdBy: FieldRef<"VehicleProperty", 'DateTime'>
    readonly updatedAt: FieldRef<"VehicleProperty", 'DateTime'>
    readonly updatedBy: FieldRef<"VehicleProperty", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * VehicleProperty findUnique
   */
  export type VehiclePropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * Filter, which VehicleProperty to fetch.
     */
    where: VehiclePropertyWhereUniqueInput
  }


  /**
   * VehicleProperty findUniqueOrThrow
   */
  export type VehiclePropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * Filter, which VehicleProperty to fetch.
     */
    where: VehiclePropertyWhereUniqueInput
  }


  /**
   * VehicleProperty findFirst
   */
  export type VehiclePropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * Filter, which VehicleProperty to fetch.
     */
    where?: VehiclePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleProperties to fetch.
     */
    orderBy?: VehiclePropertyOrderByWithRelationInput | VehiclePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VehicleProperties.
     */
    cursor?: VehiclePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VehicleProperties.
     */
    distinct?: VehiclePropertyScalarFieldEnum | VehiclePropertyScalarFieldEnum[]
  }


  /**
   * VehicleProperty findFirstOrThrow
   */
  export type VehiclePropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * Filter, which VehicleProperty to fetch.
     */
    where?: VehiclePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleProperties to fetch.
     */
    orderBy?: VehiclePropertyOrderByWithRelationInput | VehiclePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VehicleProperties.
     */
    cursor?: VehiclePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VehicleProperties.
     */
    distinct?: VehiclePropertyScalarFieldEnum | VehiclePropertyScalarFieldEnum[]
  }


  /**
   * VehicleProperty findMany
   */
  export type VehiclePropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * Filter, which VehicleProperties to fetch.
     */
    where?: VehiclePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VehicleProperties to fetch.
     */
    orderBy?: VehiclePropertyOrderByWithRelationInput | VehiclePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VehicleProperties.
     */
    cursor?: VehiclePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VehicleProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VehicleProperties.
     */
    skip?: number
    distinct?: VehiclePropertyScalarFieldEnum | VehiclePropertyScalarFieldEnum[]
  }


  /**
   * VehicleProperty create
   */
  export type VehiclePropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a VehicleProperty.
     */
    data: XOR<VehiclePropertyCreateInput, VehiclePropertyUncheckedCreateInput>
  }


  /**
   * VehicleProperty createMany
   */
  export type VehiclePropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VehicleProperties.
     */
    data: VehiclePropertyCreateManyInput | VehiclePropertyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * VehicleProperty update
   */
  export type VehiclePropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a VehicleProperty.
     */
    data: XOR<VehiclePropertyUpdateInput, VehiclePropertyUncheckedUpdateInput>
    /**
     * Choose, which VehicleProperty to update.
     */
    where: VehiclePropertyWhereUniqueInput
  }


  /**
   * VehicleProperty updateMany
   */
  export type VehiclePropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VehicleProperties.
     */
    data: XOR<VehiclePropertyUpdateManyMutationInput, VehiclePropertyUncheckedUpdateManyInput>
    /**
     * Filter which VehicleProperties to update
     */
    where?: VehiclePropertyWhereInput
  }


  /**
   * VehicleProperty upsert
   */
  export type VehiclePropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the VehicleProperty to update in case it exists.
     */
    where: VehiclePropertyWhereUniqueInput
    /**
     * In case the VehicleProperty found by the `where` argument doesn't exist, create a new VehicleProperty with this data.
     */
    create: XOR<VehiclePropertyCreateInput, VehiclePropertyUncheckedCreateInput>
    /**
     * In case the VehicleProperty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehiclePropertyUpdateInput, VehiclePropertyUncheckedUpdateInput>
  }


  /**
   * VehicleProperty delete
   */
  export type VehiclePropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
    /**
     * Filter which VehicleProperty to delete.
     */
    where: VehiclePropertyWhereUniqueInput
  }


  /**
   * VehicleProperty deleteMany
   */
  export type VehiclePropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VehicleProperties to delete
     */
    where?: VehiclePropertyWhereInput
  }


  /**
   * VehicleProperty.privateVehicles
   */
  export type VehicleProperty$privateVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    where?: PrivateVehicleWhereInput
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    cursor?: PrivateVehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrivateVehicleScalarFieldEnum | PrivateVehicleScalarFieldEnum[]
  }


  /**
   * VehicleProperty without action
   */
  export type VehiclePropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleProperty
     */
    select?: VehiclePropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VehiclePropertyInclude<ExtArgs> | null
  }



  /**
   * Model PrivateVehicle
   */

  export type AggregatePrivateVehicle = {
    _count: PrivateVehicleCountAggregateOutputType | null
    _avg: PrivateVehicleAvgAggregateOutputType | null
    _sum: PrivateVehicleSumAggregateOutputType | null
    _min: PrivateVehicleMinAggregateOutputType | null
    _max: PrivateVehicleMaxAggregateOutputType | null
  }

  export type PrivateVehicleAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    vehiclePropertyId: number | null
    startMonthDistance: Decimal | null
    endMonthDistance: Decimal | null
    fuelComsumptionPerMonth: Decimal | null
    carbonEmissionEq: Decimal | null
  }

  export type PrivateVehicleSumAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    vehiclePropertyId: number | null
    startMonthDistance: Decimal | null
    endMonthDistance: Decimal | null
    fuelComsumptionPerMonth: Decimal | null
    carbonEmissionEq: Decimal | null
  }

  export type PrivateVehicleMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    vehiclePropertyId: number | null
    startMonthDistance: Decimal | null
    endMonthDistance: Decimal | null
    fuelComsumptionPerMonth: Decimal | null
    isRegularMaintain: boolean | null
    carbonEmissionEq: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type PrivateVehicleMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    vehiclePropertyId: number | null
    startMonthDistance: Decimal | null
    endMonthDistance: Decimal | null
    fuelComsumptionPerMonth: Decimal | null
    isRegularMaintain: boolean | null
    carbonEmissionEq: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type PrivateVehicleCountAggregateOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    vehiclePropertyId: number
    startMonthDistance: number
    endMonthDistance: number
    fuelComsumptionPerMonth: number
    isRegularMaintain: number
    carbonEmissionEq: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type PrivateVehicleAvgAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    vehiclePropertyId?: true
    startMonthDistance?: true
    endMonthDistance?: true
    fuelComsumptionPerMonth?: true
    carbonEmissionEq?: true
  }

  export type PrivateVehicleSumAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    vehiclePropertyId?: true
    startMonthDistance?: true
    endMonthDistance?: true
    fuelComsumptionPerMonth?: true
    carbonEmissionEq?: true
  }

  export type PrivateVehicleMinAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    vehiclePropertyId?: true
    startMonthDistance?: true
    endMonthDistance?: true
    fuelComsumptionPerMonth?: true
    isRegularMaintain?: true
    carbonEmissionEq?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type PrivateVehicleMaxAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    vehiclePropertyId?: true
    startMonthDistance?: true
    endMonthDistance?: true
    fuelComsumptionPerMonth?: true
    isRegularMaintain?: true
    carbonEmissionEq?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type PrivateVehicleCountAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    vehiclePropertyId?: true
    startMonthDistance?: true
    endMonthDistance?: true
    fuelComsumptionPerMonth?: true
    isRegularMaintain?: true
    carbonEmissionEq?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type PrivateVehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrivateVehicle to aggregate.
     */
    where?: PrivateVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateVehicles to fetch.
     */
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrivateVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrivateVehicles
    **/
    _count?: true | PrivateVehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrivateVehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrivateVehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrivateVehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrivateVehicleMaxAggregateInputType
  }

  export type GetPrivateVehicleAggregateType<T extends PrivateVehicleAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivateVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivateVehicle[P]>
      : GetScalarType<T[P], AggregatePrivateVehicle[P]>
  }




  export type PrivateVehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivateVehicleWhereInput
    orderBy?: PrivateVehicleOrderByWithAggregationInput | PrivateVehicleOrderByWithAggregationInput[]
    by: PrivateVehicleScalarFieldEnum[] | PrivateVehicleScalarFieldEnum
    having?: PrivateVehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrivateVehicleCountAggregateInputType | true
    _avg?: PrivateVehicleAvgAggregateInputType
    _sum?: PrivateVehicleSumAggregateInputType
    _min?: PrivateVehicleMinAggregateInputType
    _max?: PrivateVehicleMaxAggregateInputType
  }

  export type PrivateVehicleGroupByOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal
    endMonthDistance: Decimal
    fuelComsumptionPerMonth: Decimal
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: PrivateVehicleCountAggregateOutputType | null
    _avg: PrivateVehicleAvgAggregateOutputType | null
    _sum: PrivateVehicleSumAggregateOutputType | null
    _min: PrivateVehicleMinAggregateOutputType | null
    _max: PrivateVehicleMaxAggregateOutputType | null
  }

  type GetPrivateVehicleGroupByPayload<T extends PrivateVehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrivateVehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrivateVehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrivateVehicleGroupByOutputType[P]>
            : GetScalarType<T[P], PrivateVehicleGroupByOutputType[P]>
        }
      >
    >


  export type PrivateVehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    vehiclePropertyId?: boolean
    startMonthDistance?: boolean
    endMonthDistance?: boolean
    fuelComsumptionPerMonth?: boolean
    isRegularMaintain?: boolean
    carbonEmissionEq?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
    vehicleProperty?: boolean | VehiclePropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["privateVehicle"]>

  export type PrivateVehicleSelectScalar = {
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    vehiclePropertyId?: boolean
    startMonthDistance?: boolean
    endMonthDistance?: boolean
    fuelComsumptionPerMonth?: boolean
    isRegularMaintain?: boolean
    carbonEmissionEq?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type PrivateVehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
    vehicleProperty?: boolean | VehiclePropertyDefaultArgs<ExtArgs>
  }


  export type $PrivateVehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrivateVehicle"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      emissionFactor: Prisma.$EmissionFactorPayload<ExtArgs>
      vehicleProperty: Prisma.$VehiclePropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      emissionFactorId: number
      vehiclePropertyId: number
      startMonthDistance: Prisma.Decimal
      endMonthDistance: Prisma.Decimal
      fuelComsumptionPerMonth: Prisma.Decimal
      isRegularMaintain: boolean
      carbonEmissionEq: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["privateVehicle"]>
    composites: {}
  }


  type PrivateVehicleGetPayload<S extends boolean | null | undefined | PrivateVehicleDefaultArgs> = $Result.GetResult<Prisma.$PrivateVehiclePayload, S>

  type PrivateVehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrivateVehicleFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PrivateVehicleCountAggregateInputType | true
    }

  export interface PrivateVehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrivateVehicle'], meta: { name: 'PrivateVehicle' } }
    /**
     * Find zero or one PrivateVehicle that matches the filter.
     * @param {PrivateVehicleFindUniqueArgs} args - Arguments to find a PrivateVehicle
     * @example
     * // Get one PrivateVehicle
     * const privateVehicle = await prisma.privateVehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrivateVehicleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PrivateVehicleFindUniqueArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PrivateVehicle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrivateVehicleFindUniqueOrThrowArgs} args - Arguments to find a PrivateVehicle
     * @example
     * // Get one PrivateVehicle
     * const privateVehicle = await prisma.privateVehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrivateVehicleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PrivateVehicleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PrivateVehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleFindFirstArgs} args - Arguments to find a PrivateVehicle
     * @example
     * // Get one PrivateVehicle
     * const privateVehicle = await prisma.privateVehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrivateVehicleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PrivateVehicleFindFirstArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PrivateVehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleFindFirstOrThrowArgs} args - Arguments to find a PrivateVehicle
     * @example
     * // Get one PrivateVehicle
     * const privateVehicle = await prisma.privateVehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrivateVehicleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PrivateVehicleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PrivateVehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrivateVehicles
     * const privateVehicles = await prisma.privateVehicle.findMany()
     * 
     * // Get first 10 PrivateVehicles
     * const privateVehicles = await prisma.privateVehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privateVehicleWithIdOnly = await prisma.privateVehicle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PrivateVehicleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrivateVehicleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PrivateVehicle.
     * @param {PrivateVehicleCreateArgs} args - Arguments to create a PrivateVehicle.
     * @example
     * // Create one PrivateVehicle
     * const PrivateVehicle = await prisma.privateVehicle.create({
     *   data: {
     *     // ... data to create a PrivateVehicle
     *   }
     * })
     * 
    **/
    create<T extends PrivateVehicleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PrivateVehicleCreateArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PrivateVehicles.
     *     @param {PrivateVehicleCreateManyArgs} args - Arguments to create many PrivateVehicles.
     *     @example
     *     // Create many PrivateVehicles
     *     const privateVehicle = await prisma.privateVehicle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrivateVehicleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrivateVehicleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PrivateVehicle.
     * @param {PrivateVehicleDeleteArgs} args - Arguments to delete one PrivateVehicle.
     * @example
     * // Delete one PrivateVehicle
     * const PrivateVehicle = await prisma.privateVehicle.delete({
     *   where: {
     *     // ... filter to delete one PrivateVehicle
     *   }
     * })
     * 
    **/
    delete<T extends PrivateVehicleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PrivateVehicleDeleteArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PrivateVehicle.
     * @param {PrivateVehicleUpdateArgs} args - Arguments to update one PrivateVehicle.
     * @example
     * // Update one PrivateVehicle
     * const privateVehicle = await prisma.privateVehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrivateVehicleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PrivateVehicleUpdateArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PrivateVehicles.
     * @param {PrivateVehicleDeleteManyArgs} args - Arguments to filter PrivateVehicles to delete.
     * @example
     * // Delete a few PrivateVehicles
     * const { count } = await prisma.privateVehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrivateVehicleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrivateVehicleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivateVehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrivateVehicles
     * const privateVehicle = await prisma.privateVehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrivateVehicleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PrivateVehicleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrivateVehicle.
     * @param {PrivateVehicleUpsertArgs} args - Arguments to update or create a PrivateVehicle.
     * @example
     * // Update or create a PrivateVehicle
     * const privateVehicle = await prisma.privateVehicle.upsert({
     *   create: {
     *     // ... data to create a PrivateVehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrivateVehicle we want to update
     *   }
     * })
    **/
    upsert<T extends PrivateVehicleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PrivateVehicleUpsertArgs<ExtArgs>>
    ): Prisma__PrivateVehicleClient<$Result.GetResult<Prisma.$PrivateVehiclePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PrivateVehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleCountArgs} args - Arguments to filter PrivateVehicles to count.
     * @example
     * // Count the number of PrivateVehicles
     * const count = await prisma.privateVehicle.count({
     *   where: {
     *     // ... the filter for the PrivateVehicles we want to count
     *   }
     * })
    **/
    count<T extends PrivateVehicleCountArgs>(
      args?: Subset<T, PrivateVehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivateVehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrivateVehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivateVehicleAggregateArgs>(args: Subset<T, PrivateVehicleAggregateArgs>): Prisma.PrismaPromise<GetPrivateVehicleAggregateType<T>>

    /**
     * Group by PrivateVehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivateVehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrivateVehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrivateVehicleGroupByArgs['orderBy'] }
        : { orderBy?: PrivateVehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrivateVehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivateVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrivateVehicle model
   */
  readonly fields: PrivateVehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrivateVehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrivateVehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    emissionFactor<T extends EmissionFactorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactorDefaultArgs<ExtArgs>>): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    vehicleProperty<T extends VehiclePropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehiclePropertyDefaultArgs<ExtArgs>>): Prisma__VehiclePropertyClient<$Result.GetResult<Prisma.$VehiclePropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PrivateVehicle model
   */ 
  interface PrivateVehicleFieldRefs {
    readonly id: FieldRef<"PrivateVehicle", 'Int'>
    readonly householdId: FieldRef<"PrivateVehicle", 'Int'>
    readonly emissionFactorId: FieldRef<"PrivateVehicle", 'Int'>
    readonly vehiclePropertyId: FieldRef<"PrivateVehicle", 'Int'>
    readonly startMonthDistance: FieldRef<"PrivateVehicle", 'Decimal'>
    readonly endMonthDistance: FieldRef<"PrivateVehicle", 'Decimal'>
    readonly fuelComsumptionPerMonth: FieldRef<"PrivateVehicle", 'Decimal'>
    readonly isRegularMaintain: FieldRef<"PrivateVehicle", 'Boolean'>
    readonly carbonEmissionEq: FieldRef<"PrivateVehicle", 'Decimal'>
    readonly recordedDate: FieldRef<"PrivateVehicle", 'DateTime'>
    readonly createdAt: FieldRef<"PrivateVehicle", 'DateTime'>
    readonly createdBy: FieldRef<"PrivateVehicle", 'DateTime'>
    readonly updatedAt: FieldRef<"PrivateVehicle", 'DateTime'>
    readonly updatedBy: FieldRef<"PrivateVehicle", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PrivateVehicle findUnique
   */
  export type PrivateVehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * Filter, which PrivateVehicle to fetch.
     */
    where: PrivateVehicleWhereUniqueInput
  }


  /**
   * PrivateVehicle findUniqueOrThrow
   */
  export type PrivateVehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * Filter, which PrivateVehicle to fetch.
     */
    where: PrivateVehicleWhereUniqueInput
  }


  /**
   * PrivateVehicle findFirst
   */
  export type PrivateVehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * Filter, which PrivateVehicle to fetch.
     */
    where?: PrivateVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateVehicles to fetch.
     */
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivateVehicles.
     */
    cursor?: PrivateVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivateVehicles.
     */
    distinct?: PrivateVehicleScalarFieldEnum | PrivateVehicleScalarFieldEnum[]
  }


  /**
   * PrivateVehicle findFirstOrThrow
   */
  export type PrivateVehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * Filter, which PrivateVehicle to fetch.
     */
    where?: PrivateVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateVehicles to fetch.
     */
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivateVehicles.
     */
    cursor?: PrivateVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateVehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivateVehicles.
     */
    distinct?: PrivateVehicleScalarFieldEnum | PrivateVehicleScalarFieldEnum[]
  }


  /**
   * PrivateVehicle findMany
   */
  export type PrivateVehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * Filter, which PrivateVehicles to fetch.
     */
    where?: PrivateVehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivateVehicles to fetch.
     */
    orderBy?: PrivateVehicleOrderByWithRelationInput | PrivateVehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrivateVehicles.
     */
    cursor?: PrivateVehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivateVehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivateVehicles.
     */
    skip?: number
    distinct?: PrivateVehicleScalarFieldEnum | PrivateVehicleScalarFieldEnum[]
  }


  /**
   * PrivateVehicle create
   */
  export type PrivateVehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a PrivateVehicle.
     */
    data: XOR<PrivateVehicleCreateInput, PrivateVehicleUncheckedCreateInput>
  }


  /**
   * PrivateVehicle createMany
   */
  export type PrivateVehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrivateVehicles.
     */
    data: PrivateVehicleCreateManyInput | PrivateVehicleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PrivateVehicle update
   */
  export type PrivateVehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a PrivateVehicle.
     */
    data: XOR<PrivateVehicleUpdateInput, PrivateVehicleUncheckedUpdateInput>
    /**
     * Choose, which PrivateVehicle to update.
     */
    where: PrivateVehicleWhereUniqueInput
  }


  /**
   * PrivateVehicle updateMany
   */
  export type PrivateVehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrivateVehicles.
     */
    data: XOR<PrivateVehicleUpdateManyMutationInput, PrivateVehicleUncheckedUpdateManyInput>
    /**
     * Filter which PrivateVehicles to update
     */
    where?: PrivateVehicleWhereInput
  }


  /**
   * PrivateVehicle upsert
   */
  export type PrivateVehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the PrivateVehicle to update in case it exists.
     */
    where: PrivateVehicleWhereUniqueInput
    /**
     * In case the PrivateVehicle found by the `where` argument doesn't exist, create a new PrivateVehicle with this data.
     */
    create: XOR<PrivateVehicleCreateInput, PrivateVehicleUncheckedCreateInput>
    /**
     * In case the PrivateVehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrivateVehicleUpdateInput, PrivateVehicleUncheckedUpdateInput>
  }


  /**
   * PrivateVehicle delete
   */
  export type PrivateVehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
    /**
     * Filter which PrivateVehicle to delete.
     */
    where: PrivateVehicleWhereUniqueInput
  }


  /**
   * PrivateVehicle deleteMany
   */
  export type PrivateVehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrivateVehicles to delete
     */
    where?: PrivateVehicleWhereInput
  }


  /**
   * PrivateVehicle without action
   */
  export type PrivateVehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivateVehicle
     */
    select?: PrivateVehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivateVehicleInclude<ExtArgs> | null
  }



  /**
   * Model Transportation
   */

  export type AggregateTransportation = {
    _count: TransportationCountAggregateOutputType | null
    _avg: TransportationAvgAggregateOutputType | null
    _sum: TransportationSumAggregateOutputType | null
    _min: TransportationMinAggregateOutputType | null
    _max: TransportationMaxAggregateOutputType | null
  }

  export type TransportationAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type TransportationSumAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type TransportationMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type TransportationMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type TransportationCountAggregateOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type TransportationAvgAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type TransportationSumAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type TransportationMinAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TransportationMaxAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TransportationCountAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type TransportationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transportation to aggregate.
     */
    where?: TransportationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportation to fetch.
     */
    orderBy?: TransportationOrderByWithRelationInput | TransportationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransportationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportation from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportation.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transportation
    **/
    _count?: true | TransportationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransportationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransportationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransportationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransportationMaxAggregateInputType
  }

  export type GetTransportationAggregateType<T extends TransportationAggregateArgs> = {
        [P in keyof T & keyof AggregateTransportation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransportation[P]>
      : GetScalarType<T[P], AggregateTransportation[P]>
  }




  export type TransportationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportationWhereInput
    orderBy?: TransportationOrderByWithAggregationInput | TransportationOrderByWithAggregationInput[]
    by: TransportationScalarFieldEnum[] | TransportationScalarFieldEnum
    having?: TransportationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransportationCountAggregateInputType | true
    _avg?: TransportationAvgAggregateInputType
    _sum?: TransportationSumAggregateInputType
    _min?: TransportationMinAggregateInputType
    _max?: TransportationMaxAggregateInputType
  }

  export type TransportationGroupByOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: TransportationCountAggregateOutputType | null
    _avg: TransportationAvgAggregateOutputType | null
    _sum: TransportationSumAggregateOutputType | null
    _min: TransportationMinAggregateOutputType | null
    _max: TransportationMaxAggregateOutputType | null
  }

  type GetTransportationGroupByPayload<T extends TransportationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransportationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransportationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransportationGroupByOutputType[P]>
            : GetScalarType<T[P], TransportationGroupByOutputType[P]>
        }
      >
    >


  export type TransportationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | Transportation$carbonFootprintArgs<ExtArgs>
  }, ExtArgs["result"]["transportation"]>

  export type TransportationSelectScalar = {
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type TransportationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | Transportation$carbonFootprintArgs<ExtArgs>
  }


  export type $TransportationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transportation"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      carbonFootprint: Prisma.$CarbonFootprintPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      totalCarbonFootprint: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["transportation"]>
    composites: {}
  }


  type TransportationGetPayload<S extends boolean | null | undefined | TransportationDefaultArgs> = $Result.GetResult<Prisma.$TransportationPayload, S>

  type TransportationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransportationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TransportationCountAggregateInputType | true
    }

  export interface TransportationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transportation'], meta: { name: 'Transportation' } }
    /**
     * Find zero or one Transportation that matches the filter.
     * @param {TransportationFindUniqueArgs} args - Arguments to find a Transportation
     * @example
     * // Get one Transportation
     * const transportation = await prisma.transportation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransportationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransportationFindUniqueArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transportation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransportationFindUniqueOrThrowArgs} args - Arguments to find a Transportation
     * @example
     * // Get one Transportation
     * const transportation = await prisma.transportation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransportationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransportationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transportation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationFindFirstArgs} args - Arguments to find a Transportation
     * @example
     * // Get one Transportation
     * const transportation = await prisma.transportation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransportationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransportationFindFirstArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transportation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationFindFirstOrThrowArgs} args - Arguments to find a Transportation
     * @example
     * // Get one Transportation
     * const transportation = await prisma.transportation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransportationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransportationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transportation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transportation
     * const transportation = await prisma.transportation.findMany()
     * 
     * // Get first 10 Transportation
     * const transportation = await prisma.transportation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transportationWithIdOnly = await prisma.transportation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransportationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransportationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transportation.
     * @param {TransportationCreateArgs} args - Arguments to create a Transportation.
     * @example
     * // Create one Transportation
     * const Transportation = await prisma.transportation.create({
     *   data: {
     *     // ... data to create a Transportation
     *   }
     * })
     * 
    **/
    create<T extends TransportationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransportationCreateArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transportation.
     *     @param {TransportationCreateManyArgs} args - Arguments to create many Transportation.
     *     @example
     *     // Create many Transportation
     *     const transportation = await prisma.transportation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransportationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransportationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transportation.
     * @param {TransportationDeleteArgs} args - Arguments to delete one Transportation.
     * @example
     * // Delete one Transportation
     * const Transportation = await prisma.transportation.delete({
     *   where: {
     *     // ... filter to delete one Transportation
     *   }
     * })
     * 
    **/
    delete<T extends TransportationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransportationDeleteArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transportation.
     * @param {TransportationUpdateArgs} args - Arguments to update one Transportation.
     * @example
     * // Update one Transportation
     * const transportation = await prisma.transportation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransportationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransportationUpdateArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transportation.
     * @param {TransportationDeleteManyArgs} args - Arguments to filter Transportation to delete.
     * @example
     * // Delete a few Transportation
     * const { count } = await prisma.transportation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransportationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransportationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transportation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transportation
     * const transportation = await prisma.transportation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransportationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransportationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transportation.
     * @param {TransportationUpsertArgs} args - Arguments to update or create a Transportation.
     * @example
     * // Update or create a Transportation
     * const transportation = await prisma.transportation.upsert({
     *   create: {
     *     // ... data to create a Transportation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transportation we want to update
     *   }
     * })
    **/
    upsert<T extends TransportationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransportationUpsertArgs<ExtArgs>>
    ): Prisma__TransportationClient<$Result.GetResult<Prisma.$TransportationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transportation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationCountArgs} args - Arguments to filter Transportation to count.
     * @example
     * // Count the number of Transportation
     * const count = await prisma.transportation.count({
     *   where: {
     *     // ... the filter for the Transportation we want to count
     *   }
     * })
    **/
    count<T extends TransportationCountArgs>(
      args?: Subset<T, TransportationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransportationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transportation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransportationAggregateArgs>(args: Subset<T, TransportationAggregateArgs>): Prisma.PrismaPromise<GetTransportationAggregateType<T>>

    /**
     * Group by Transportation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransportationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransportationGroupByArgs['orderBy'] }
        : { orderBy?: TransportationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransportationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransportationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transportation model
   */
  readonly fields: TransportationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transportation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransportationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    carbonFootprint<T extends Transportation$carbonFootprintArgs<ExtArgs> = {}>(args?: Subset<T, Transportation$carbonFootprintArgs<ExtArgs>>): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Transportation model
   */ 
  interface TransportationFieldRefs {
    readonly id: FieldRef<"Transportation", 'Int'>
    readonly householdId: FieldRef<"Transportation", 'Int'>
    readonly totalCarbonFootprint: FieldRef<"Transportation", 'Decimal'>
    readonly recordedDate: FieldRef<"Transportation", 'DateTime'>
    readonly createdAt: FieldRef<"Transportation", 'DateTime'>
    readonly createdBy: FieldRef<"Transportation", 'DateTime'>
    readonly updatedAt: FieldRef<"Transportation", 'DateTime'>
    readonly updatedBy: FieldRef<"Transportation", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Transportation findUnique
   */
  export type TransportationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * Filter, which Transportation to fetch.
     */
    where: TransportationWhereUniqueInput
  }


  /**
   * Transportation findUniqueOrThrow
   */
  export type TransportationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * Filter, which Transportation to fetch.
     */
    where: TransportationWhereUniqueInput
  }


  /**
   * Transportation findFirst
   */
  export type TransportationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * Filter, which Transportation to fetch.
     */
    where?: TransportationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportation to fetch.
     */
    orderBy?: TransportationOrderByWithRelationInput | TransportationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transportation.
     */
    cursor?: TransportationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportation from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportation.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transportation.
     */
    distinct?: TransportationScalarFieldEnum | TransportationScalarFieldEnum[]
  }


  /**
   * Transportation findFirstOrThrow
   */
  export type TransportationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * Filter, which Transportation to fetch.
     */
    where?: TransportationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportation to fetch.
     */
    orderBy?: TransportationOrderByWithRelationInput | TransportationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transportation.
     */
    cursor?: TransportationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportation from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportation.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transportation.
     */
    distinct?: TransportationScalarFieldEnum | TransportationScalarFieldEnum[]
  }


  /**
   * Transportation findMany
   */
  export type TransportationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * Filter, which Transportation to fetch.
     */
    where?: TransportationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportation to fetch.
     */
    orderBy?: TransportationOrderByWithRelationInput | TransportationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transportation.
     */
    cursor?: TransportationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportation from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportation.
     */
    skip?: number
    distinct?: TransportationScalarFieldEnum | TransportationScalarFieldEnum[]
  }


  /**
   * Transportation create
   */
  export type TransportationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * The data needed to create a Transportation.
     */
    data: XOR<TransportationCreateInput, TransportationUncheckedCreateInput>
  }


  /**
   * Transportation createMany
   */
  export type TransportationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transportation.
     */
    data: TransportationCreateManyInput | TransportationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Transportation update
   */
  export type TransportationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * The data needed to update a Transportation.
     */
    data: XOR<TransportationUpdateInput, TransportationUncheckedUpdateInput>
    /**
     * Choose, which Transportation to update.
     */
    where: TransportationWhereUniqueInput
  }


  /**
   * Transportation updateMany
   */
  export type TransportationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transportation.
     */
    data: XOR<TransportationUpdateManyMutationInput, TransportationUncheckedUpdateManyInput>
    /**
     * Filter which Transportation to update
     */
    where?: TransportationWhereInput
  }


  /**
   * Transportation upsert
   */
  export type TransportationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * The filter to search for the Transportation to update in case it exists.
     */
    where: TransportationWhereUniqueInput
    /**
     * In case the Transportation found by the `where` argument doesn't exist, create a new Transportation with this data.
     */
    create: XOR<TransportationCreateInput, TransportationUncheckedCreateInput>
    /**
     * In case the Transportation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransportationUpdateInput, TransportationUncheckedUpdateInput>
  }


  /**
   * Transportation delete
   */
  export type TransportationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
    /**
     * Filter which Transportation to delete.
     */
    where: TransportationWhereUniqueInput
  }


  /**
   * Transportation deleteMany
   */
  export type TransportationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transportation to delete
     */
    where?: TransportationWhereInput
  }


  /**
   * Transportation.carbonFootprint
   */
  export type Transportation$carbonFootprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    where?: CarbonFootprintWhereInput
  }


  /**
   * Transportation without action
   */
  export type TransportationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportation
     */
    select?: TransportationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransportationInclude<ExtArgs> | null
  }



  /**
   * Model HouseholdElectricity
   */

  export type AggregateHouseholdElectricity = {
    _count: HouseholdElectricityCountAggregateOutputType | null
    _avg: HouseholdElectricityAvgAggregateOutputType | null
    _sum: HouseholdElectricitySumAggregateOutputType | null
    _min: HouseholdElectricityMinAggregateOutputType | null
    _max: HouseholdElectricityMaxAggregateOutputType | null
  }

  export type HouseholdElectricityAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type HouseholdElectricitySumAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type HouseholdElectricityMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdElectricityMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdElectricityCountAggregateOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type HouseholdElectricityAvgAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type HouseholdElectricitySumAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type HouseholdElectricityMinAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdElectricityMaxAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdElectricityCountAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type HouseholdElectricityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HouseholdElectricity to aggregate.
     */
    where?: HouseholdElectricityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdElectricities to fetch.
     */
    orderBy?: HouseholdElectricityOrderByWithRelationInput | HouseholdElectricityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseholdElectricityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdElectricities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdElectricities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HouseholdElectricities
    **/
    _count?: true | HouseholdElectricityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseholdElectricityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseholdElectricitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseholdElectricityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseholdElectricityMaxAggregateInputType
  }

  export type GetHouseholdElectricityAggregateType<T extends HouseholdElectricityAggregateArgs> = {
        [P in keyof T & keyof AggregateHouseholdElectricity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouseholdElectricity[P]>
      : GetScalarType<T[P], AggregateHouseholdElectricity[P]>
  }




  export type HouseholdElectricityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdElectricityWhereInput
    orderBy?: HouseholdElectricityOrderByWithAggregationInput | HouseholdElectricityOrderByWithAggregationInput[]
    by: HouseholdElectricityScalarFieldEnum[] | HouseholdElectricityScalarFieldEnum
    having?: HouseholdElectricityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseholdElectricityCountAggregateInputType | true
    _avg?: HouseholdElectricityAvgAggregateInputType
    _sum?: HouseholdElectricitySumAggregateInputType
    _min?: HouseholdElectricityMinAggregateInputType
    _max?: HouseholdElectricityMaxAggregateInputType
  }

  export type HouseholdElectricityGroupByOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: HouseholdElectricityCountAggregateOutputType | null
    _avg: HouseholdElectricityAvgAggregateOutputType | null
    _sum: HouseholdElectricitySumAggregateOutputType | null
    _min: HouseholdElectricityMinAggregateOutputType | null
    _max: HouseholdElectricityMaxAggregateOutputType | null
  }

  type GetHouseholdElectricityGroupByPayload<T extends HouseholdElectricityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HouseholdElectricityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseholdElectricityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseholdElectricityGroupByOutputType[P]>
            : GetScalarType<T[P], HouseholdElectricityGroupByOutputType[P]>
        }
      >
    >


  export type HouseholdElectricitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | HouseholdElectricity$carbonFootprintArgs<ExtArgs>
  }, ExtArgs["result"]["householdElectricity"]>

  export type HouseholdElectricitySelectScalar = {
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type HouseholdElectricityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | HouseholdElectricity$carbonFootprintArgs<ExtArgs>
  }


  export type $HouseholdElectricityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HouseholdElectricity"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      carbonFootprint: Prisma.$CarbonFootprintPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      totalCarbonFootprint: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["householdElectricity"]>
    composites: {}
  }


  type HouseholdElectricityGetPayload<S extends boolean | null | undefined | HouseholdElectricityDefaultArgs> = $Result.GetResult<Prisma.$HouseholdElectricityPayload, S>

  type HouseholdElectricityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HouseholdElectricityFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HouseholdElectricityCountAggregateInputType | true
    }

  export interface HouseholdElectricityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HouseholdElectricity'], meta: { name: 'HouseholdElectricity' } }
    /**
     * Find zero or one HouseholdElectricity that matches the filter.
     * @param {HouseholdElectricityFindUniqueArgs} args - Arguments to find a HouseholdElectricity
     * @example
     * // Get one HouseholdElectricity
     * const householdElectricity = await prisma.householdElectricity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseholdElectricityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdElectricityFindUniqueArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HouseholdElectricity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseholdElectricityFindUniqueOrThrowArgs} args - Arguments to find a HouseholdElectricity
     * @example
     * // Get one HouseholdElectricity
     * const householdElectricity = await prisma.householdElectricity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseholdElectricityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdElectricityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HouseholdElectricity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityFindFirstArgs} args - Arguments to find a HouseholdElectricity
     * @example
     * // Get one HouseholdElectricity
     * const householdElectricity = await prisma.householdElectricity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseholdElectricityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdElectricityFindFirstArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HouseholdElectricity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityFindFirstOrThrowArgs} args - Arguments to find a HouseholdElectricity
     * @example
     * // Get one HouseholdElectricity
     * const householdElectricity = await prisma.householdElectricity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseholdElectricityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdElectricityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HouseholdElectricities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HouseholdElectricities
     * const householdElectricities = await prisma.householdElectricity.findMany()
     * 
     * // Get first 10 HouseholdElectricities
     * const householdElectricities = await prisma.householdElectricity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const householdElectricityWithIdOnly = await prisma.householdElectricity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseholdElectricityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdElectricityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HouseholdElectricity.
     * @param {HouseholdElectricityCreateArgs} args - Arguments to create a HouseholdElectricity.
     * @example
     * // Create one HouseholdElectricity
     * const HouseholdElectricity = await prisma.householdElectricity.create({
     *   data: {
     *     // ... data to create a HouseholdElectricity
     *   }
     * })
     * 
    **/
    create<T extends HouseholdElectricityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdElectricityCreateArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HouseholdElectricities.
     *     @param {HouseholdElectricityCreateManyArgs} args - Arguments to create many HouseholdElectricities.
     *     @example
     *     // Create many HouseholdElectricities
     *     const householdElectricity = await prisma.householdElectricity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseholdElectricityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdElectricityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HouseholdElectricity.
     * @param {HouseholdElectricityDeleteArgs} args - Arguments to delete one HouseholdElectricity.
     * @example
     * // Delete one HouseholdElectricity
     * const HouseholdElectricity = await prisma.householdElectricity.delete({
     *   where: {
     *     // ... filter to delete one HouseholdElectricity
     *   }
     * })
     * 
    **/
    delete<T extends HouseholdElectricityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdElectricityDeleteArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HouseholdElectricity.
     * @param {HouseholdElectricityUpdateArgs} args - Arguments to update one HouseholdElectricity.
     * @example
     * // Update one HouseholdElectricity
     * const householdElectricity = await prisma.householdElectricity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseholdElectricityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdElectricityUpdateArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HouseholdElectricities.
     * @param {HouseholdElectricityDeleteManyArgs} args - Arguments to filter HouseholdElectricities to delete.
     * @example
     * // Delete a few HouseholdElectricities
     * const { count } = await prisma.householdElectricity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseholdElectricityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdElectricityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HouseholdElectricities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HouseholdElectricities
     * const householdElectricity = await prisma.householdElectricity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseholdElectricityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdElectricityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HouseholdElectricity.
     * @param {HouseholdElectricityUpsertArgs} args - Arguments to update or create a HouseholdElectricity.
     * @example
     * // Update or create a HouseholdElectricity
     * const householdElectricity = await prisma.householdElectricity.upsert({
     *   create: {
     *     // ... data to create a HouseholdElectricity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HouseholdElectricity we want to update
     *   }
     * })
    **/
    upsert<T extends HouseholdElectricityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdElectricityUpsertArgs<ExtArgs>>
    ): Prisma__HouseholdElectricityClient<$Result.GetResult<Prisma.$HouseholdElectricityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HouseholdElectricities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityCountArgs} args - Arguments to filter HouseholdElectricities to count.
     * @example
     * // Count the number of HouseholdElectricities
     * const count = await prisma.householdElectricity.count({
     *   where: {
     *     // ... the filter for the HouseholdElectricities we want to count
     *   }
     * })
    **/
    count<T extends HouseholdElectricityCountArgs>(
      args?: Subset<T, HouseholdElectricityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseholdElectricityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HouseholdElectricity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseholdElectricityAggregateArgs>(args: Subset<T, HouseholdElectricityAggregateArgs>): Prisma.PrismaPromise<GetHouseholdElectricityAggregateType<T>>

    /**
     * Group by HouseholdElectricity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdElectricityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseholdElectricityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseholdElectricityGroupByArgs['orderBy'] }
        : { orderBy?: HouseholdElectricityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseholdElectricityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseholdElectricityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HouseholdElectricity model
   */
  readonly fields: HouseholdElectricityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HouseholdElectricity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HouseholdElectricityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    carbonFootprint<T extends HouseholdElectricity$carbonFootprintArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdElectricity$carbonFootprintArgs<ExtArgs>>): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HouseholdElectricity model
   */ 
  interface HouseholdElectricityFieldRefs {
    readonly id: FieldRef<"HouseholdElectricity", 'Int'>
    readonly householdId: FieldRef<"HouseholdElectricity", 'Int'>
    readonly totalCarbonFootprint: FieldRef<"HouseholdElectricity", 'Decimal'>
    readonly recordedDate: FieldRef<"HouseholdElectricity", 'DateTime'>
    readonly createdAt: FieldRef<"HouseholdElectricity", 'DateTime'>
    readonly createdBy: FieldRef<"HouseholdElectricity", 'DateTime'>
    readonly updatedAt: FieldRef<"HouseholdElectricity", 'DateTime'>
    readonly updatedBy: FieldRef<"HouseholdElectricity", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * HouseholdElectricity findUnique
   */
  export type HouseholdElectricityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdElectricity to fetch.
     */
    where: HouseholdElectricityWhereUniqueInput
  }


  /**
   * HouseholdElectricity findUniqueOrThrow
   */
  export type HouseholdElectricityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdElectricity to fetch.
     */
    where: HouseholdElectricityWhereUniqueInput
  }


  /**
   * HouseholdElectricity findFirst
   */
  export type HouseholdElectricityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdElectricity to fetch.
     */
    where?: HouseholdElectricityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdElectricities to fetch.
     */
    orderBy?: HouseholdElectricityOrderByWithRelationInput | HouseholdElectricityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseholdElectricities.
     */
    cursor?: HouseholdElectricityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdElectricities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdElectricities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseholdElectricities.
     */
    distinct?: HouseholdElectricityScalarFieldEnum | HouseholdElectricityScalarFieldEnum[]
  }


  /**
   * HouseholdElectricity findFirstOrThrow
   */
  export type HouseholdElectricityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdElectricity to fetch.
     */
    where?: HouseholdElectricityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdElectricities to fetch.
     */
    orderBy?: HouseholdElectricityOrderByWithRelationInput | HouseholdElectricityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseholdElectricities.
     */
    cursor?: HouseholdElectricityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdElectricities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdElectricities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseholdElectricities.
     */
    distinct?: HouseholdElectricityScalarFieldEnum | HouseholdElectricityScalarFieldEnum[]
  }


  /**
   * HouseholdElectricity findMany
   */
  export type HouseholdElectricityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdElectricities to fetch.
     */
    where?: HouseholdElectricityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdElectricities to fetch.
     */
    orderBy?: HouseholdElectricityOrderByWithRelationInput | HouseholdElectricityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HouseholdElectricities.
     */
    cursor?: HouseholdElectricityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdElectricities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdElectricities.
     */
    skip?: number
    distinct?: HouseholdElectricityScalarFieldEnum | HouseholdElectricityScalarFieldEnum[]
  }


  /**
   * HouseholdElectricity create
   */
  export type HouseholdElectricityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * The data needed to create a HouseholdElectricity.
     */
    data: XOR<HouseholdElectricityCreateInput, HouseholdElectricityUncheckedCreateInput>
  }


  /**
   * HouseholdElectricity createMany
   */
  export type HouseholdElectricityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HouseholdElectricities.
     */
    data: HouseholdElectricityCreateManyInput | HouseholdElectricityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HouseholdElectricity update
   */
  export type HouseholdElectricityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * The data needed to update a HouseholdElectricity.
     */
    data: XOR<HouseholdElectricityUpdateInput, HouseholdElectricityUncheckedUpdateInput>
    /**
     * Choose, which HouseholdElectricity to update.
     */
    where: HouseholdElectricityWhereUniqueInput
  }


  /**
   * HouseholdElectricity updateMany
   */
  export type HouseholdElectricityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HouseholdElectricities.
     */
    data: XOR<HouseholdElectricityUpdateManyMutationInput, HouseholdElectricityUncheckedUpdateManyInput>
    /**
     * Filter which HouseholdElectricities to update
     */
    where?: HouseholdElectricityWhereInput
  }


  /**
   * HouseholdElectricity upsert
   */
  export type HouseholdElectricityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * The filter to search for the HouseholdElectricity to update in case it exists.
     */
    where: HouseholdElectricityWhereUniqueInput
    /**
     * In case the HouseholdElectricity found by the `where` argument doesn't exist, create a new HouseholdElectricity with this data.
     */
    create: XOR<HouseholdElectricityCreateInput, HouseholdElectricityUncheckedCreateInput>
    /**
     * In case the HouseholdElectricity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseholdElectricityUpdateInput, HouseholdElectricityUncheckedUpdateInput>
  }


  /**
   * HouseholdElectricity delete
   */
  export type HouseholdElectricityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
    /**
     * Filter which HouseholdElectricity to delete.
     */
    where: HouseholdElectricityWhereUniqueInput
  }


  /**
   * HouseholdElectricity deleteMany
   */
  export type HouseholdElectricityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HouseholdElectricities to delete
     */
    where?: HouseholdElectricityWhereInput
  }


  /**
   * HouseholdElectricity.carbonFootprint
   */
  export type HouseholdElectricity$carbonFootprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    where?: CarbonFootprintWhereInput
  }


  /**
   * HouseholdElectricity without action
   */
  export type HouseholdElectricityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdElectricity
     */
    select?: HouseholdElectricitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdElectricityInclude<ExtArgs> | null
  }



  /**
   * Model ElectricityBill
   */

  export type AggregateElectricityBill = {
    _count: ElectricityBillCountAggregateOutputType | null
    _avg: ElectricityBillAvgAggregateOutputType | null
    _sum: ElectricityBillSumAggregateOutputType | null
    _min: ElectricityBillMinAggregateOutputType | null
    _max: ElectricityBillMaxAggregateOutputType | null
  }

  export type ElectricityBillAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    electricityMeter: Decimal | null
  }

  export type ElectricityBillSumAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    electricityMeter: Decimal | null
  }

  export type ElectricityBillMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    electricityMeter: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type ElectricityBillMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    electricityMeter: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type ElectricityBillCountAggregateOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    amountConsumption: number
    electricityMeter: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ElectricityBillAvgAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    electricityMeter?: true
  }

  export type ElectricityBillSumAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    electricityMeter?: true
  }

  export type ElectricityBillMinAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    electricityMeter?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ElectricityBillMaxAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    electricityMeter?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ElectricityBillCountAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    electricityMeter?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ElectricityBillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElectricityBill to aggregate.
     */
    where?: ElectricityBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityBills to fetch.
     */
    orderBy?: ElectricityBillOrderByWithRelationInput | ElectricityBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ElectricityBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ElectricityBills
    **/
    _count?: true | ElectricityBillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ElectricityBillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ElectricityBillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ElectricityBillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ElectricityBillMaxAggregateInputType
  }

  export type GetElectricityBillAggregateType<T extends ElectricityBillAggregateArgs> = {
        [P in keyof T & keyof AggregateElectricityBill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateElectricityBill[P]>
      : GetScalarType<T[P], AggregateElectricityBill[P]>
  }




  export type ElectricityBillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElectricityBillWhereInput
    orderBy?: ElectricityBillOrderByWithAggregationInput | ElectricityBillOrderByWithAggregationInput[]
    by: ElectricityBillScalarFieldEnum[] | ElectricityBillScalarFieldEnum
    having?: ElectricityBillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ElectricityBillCountAggregateInputType | true
    _avg?: ElectricityBillAvgAggregateInputType
    _sum?: ElectricityBillSumAggregateInputType
    _min?: ElectricityBillMinAggregateInputType
    _max?: ElectricityBillMaxAggregateInputType
  }

  export type ElectricityBillGroupByOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    amountConsumption: Decimal
    electricityMeter: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: ElectricityBillCountAggregateOutputType | null
    _avg: ElectricityBillAvgAggregateOutputType | null
    _sum: ElectricityBillSumAggregateOutputType | null
    _min: ElectricityBillMinAggregateOutputType | null
    _max: ElectricityBillMaxAggregateOutputType | null
  }

  type GetElectricityBillGroupByPayload<T extends ElectricityBillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ElectricityBillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ElectricityBillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ElectricityBillGroupByOutputType[P]>
            : GetScalarType<T[P], ElectricityBillGroupByOutputType[P]>
        }
      >
    >


  export type ElectricityBillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    amountConsumption?: boolean
    electricityMeter?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["electricityBill"]>

  export type ElectricityBillSelectScalar = {
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    amountConsumption?: boolean
    electricityMeter?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ElectricityBillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
  }


  export type $ElectricityBillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ElectricityBill"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      emissionFactor: Prisma.$EmissionFactorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      emissionFactorId: number
      amountConsumption: Prisma.Decimal
      electricityMeter: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["electricityBill"]>
    composites: {}
  }


  type ElectricityBillGetPayload<S extends boolean | null | undefined | ElectricityBillDefaultArgs> = $Result.GetResult<Prisma.$ElectricityBillPayload, S>

  type ElectricityBillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ElectricityBillFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ElectricityBillCountAggregateInputType | true
    }

  export interface ElectricityBillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ElectricityBill'], meta: { name: 'ElectricityBill' } }
    /**
     * Find zero or one ElectricityBill that matches the filter.
     * @param {ElectricityBillFindUniqueArgs} args - Arguments to find a ElectricityBill
     * @example
     * // Get one ElectricityBill
     * const electricityBill = await prisma.electricityBill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ElectricityBillFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ElectricityBillFindUniqueArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ElectricityBill that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ElectricityBillFindUniqueOrThrowArgs} args - Arguments to find a ElectricityBill
     * @example
     * // Get one ElectricityBill
     * const electricityBill = await prisma.electricityBill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ElectricityBillFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ElectricityBillFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ElectricityBill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillFindFirstArgs} args - Arguments to find a ElectricityBill
     * @example
     * // Get one ElectricityBill
     * const electricityBill = await prisma.electricityBill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ElectricityBillFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ElectricityBillFindFirstArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ElectricityBill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillFindFirstOrThrowArgs} args - Arguments to find a ElectricityBill
     * @example
     * // Get one ElectricityBill
     * const electricityBill = await prisma.electricityBill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ElectricityBillFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ElectricityBillFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ElectricityBills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ElectricityBills
     * const electricityBills = await prisma.electricityBill.findMany()
     * 
     * // Get first 10 ElectricityBills
     * const electricityBills = await prisma.electricityBill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const electricityBillWithIdOnly = await prisma.electricityBill.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ElectricityBillFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ElectricityBillFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ElectricityBill.
     * @param {ElectricityBillCreateArgs} args - Arguments to create a ElectricityBill.
     * @example
     * // Create one ElectricityBill
     * const ElectricityBill = await prisma.electricityBill.create({
     *   data: {
     *     // ... data to create a ElectricityBill
     *   }
     * })
     * 
    **/
    create<T extends ElectricityBillCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ElectricityBillCreateArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ElectricityBills.
     *     @param {ElectricityBillCreateManyArgs} args - Arguments to create many ElectricityBills.
     *     @example
     *     // Create many ElectricityBills
     *     const electricityBill = await prisma.electricityBill.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ElectricityBillCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ElectricityBillCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ElectricityBill.
     * @param {ElectricityBillDeleteArgs} args - Arguments to delete one ElectricityBill.
     * @example
     * // Delete one ElectricityBill
     * const ElectricityBill = await prisma.electricityBill.delete({
     *   where: {
     *     // ... filter to delete one ElectricityBill
     *   }
     * })
     * 
    **/
    delete<T extends ElectricityBillDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ElectricityBillDeleteArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ElectricityBill.
     * @param {ElectricityBillUpdateArgs} args - Arguments to update one ElectricityBill.
     * @example
     * // Update one ElectricityBill
     * const electricityBill = await prisma.electricityBill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ElectricityBillUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ElectricityBillUpdateArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ElectricityBills.
     * @param {ElectricityBillDeleteManyArgs} args - Arguments to filter ElectricityBills to delete.
     * @example
     * // Delete a few ElectricityBills
     * const { count } = await prisma.electricityBill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ElectricityBillDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ElectricityBillDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ElectricityBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ElectricityBills
     * const electricityBill = await prisma.electricityBill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ElectricityBillUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ElectricityBillUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ElectricityBill.
     * @param {ElectricityBillUpsertArgs} args - Arguments to update or create a ElectricityBill.
     * @example
     * // Update or create a ElectricityBill
     * const electricityBill = await prisma.electricityBill.upsert({
     *   create: {
     *     // ... data to create a ElectricityBill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ElectricityBill we want to update
     *   }
     * })
    **/
    upsert<T extends ElectricityBillUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ElectricityBillUpsertArgs<ExtArgs>>
    ): Prisma__ElectricityBillClient<$Result.GetResult<Prisma.$ElectricityBillPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ElectricityBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillCountArgs} args - Arguments to filter ElectricityBills to count.
     * @example
     * // Count the number of ElectricityBills
     * const count = await prisma.electricityBill.count({
     *   where: {
     *     // ... the filter for the ElectricityBills we want to count
     *   }
     * })
    **/
    count<T extends ElectricityBillCountArgs>(
      args?: Subset<T, ElectricityBillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ElectricityBillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ElectricityBill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ElectricityBillAggregateArgs>(args: Subset<T, ElectricityBillAggregateArgs>): Prisma.PrismaPromise<GetElectricityBillAggregateType<T>>

    /**
     * Group by ElectricityBill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectricityBillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ElectricityBillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ElectricityBillGroupByArgs['orderBy'] }
        : { orderBy?: ElectricityBillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ElectricityBillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetElectricityBillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ElectricityBill model
   */
  readonly fields: ElectricityBillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ElectricityBill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ElectricityBillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    emissionFactor<T extends EmissionFactorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactorDefaultArgs<ExtArgs>>): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ElectricityBill model
   */ 
  interface ElectricityBillFieldRefs {
    readonly id: FieldRef<"ElectricityBill", 'Int'>
    readonly householdId: FieldRef<"ElectricityBill", 'Int'>
    readonly emissionFactorId: FieldRef<"ElectricityBill", 'Int'>
    readonly amountConsumption: FieldRef<"ElectricityBill", 'Decimal'>
    readonly electricityMeter: FieldRef<"ElectricityBill", 'Decimal'>
    readonly recordedDate: FieldRef<"ElectricityBill", 'DateTime'>
    readonly createdAt: FieldRef<"ElectricityBill", 'DateTime'>
    readonly createdBy: FieldRef<"ElectricityBill", 'DateTime'>
    readonly updatedAt: FieldRef<"ElectricityBill", 'DateTime'>
    readonly updatedBy: FieldRef<"ElectricityBill", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ElectricityBill findUnique
   */
  export type ElectricityBillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * Filter, which ElectricityBill to fetch.
     */
    where: ElectricityBillWhereUniqueInput
  }


  /**
   * ElectricityBill findUniqueOrThrow
   */
  export type ElectricityBillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * Filter, which ElectricityBill to fetch.
     */
    where: ElectricityBillWhereUniqueInput
  }


  /**
   * ElectricityBill findFirst
   */
  export type ElectricityBillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * Filter, which ElectricityBill to fetch.
     */
    where?: ElectricityBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityBills to fetch.
     */
    orderBy?: ElectricityBillOrderByWithRelationInput | ElectricityBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElectricityBills.
     */
    cursor?: ElectricityBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElectricityBills.
     */
    distinct?: ElectricityBillScalarFieldEnum | ElectricityBillScalarFieldEnum[]
  }


  /**
   * ElectricityBill findFirstOrThrow
   */
  export type ElectricityBillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * Filter, which ElectricityBill to fetch.
     */
    where?: ElectricityBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityBills to fetch.
     */
    orderBy?: ElectricityBillOrderByWithRelationInput | ElectricityBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElectricityBills.
     */
    cursor?: ElectricityBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElectricityBills.
     */
    distinct?: ElectricityBillScalarFieldEnum | ElectricityBillScalarFieldEnum[]
  }


  /**
   * ElectricityBill findMany
   */
  export type ElectricityBillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * Filter, which ElectricityBills to fetch.
     */
    where?: ElectricityBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectricityBills to fetch.
     */
    orderBy?: ElectricityBillOrderByWithRelationInput | ElectricityBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ElectricityBills.
     */
    cursor?: ElectricityBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectricityBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectricityBills.
     */
    skip?: number
    distinct?: ElectricityBillScalarFieldEnum | ElectricityBillScalarFieldEnum[]
  }


  /**
   * ElectricityBill create
   */
  export type ElectricityBillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * The data needed to create a ElectricityBill.
     */
    data: XOR<ElectricityBillCreateInput, ElectricityBillUncheckedCreateInput>
  }


  /**
   * ElectricityBill createMany
   */
  export type ElectricityBillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ElectricityBills.
     */
    data: ElectricityBillCreateManyInput | ElectricityBillCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ElectricityBill update
   */
  export type ElectricityBillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * The data needed to update a ElectricityBill.
     */
    data: XOR<ElectricityBillUpdateInput, ElectricityBillUncheckedUpdateInput>
    /**
     * Choose, which ElectricityBill to update.
     */
    where: ElectricityBillWhereUniqueInput
  }


  /**
   * ElectricityBill updateMany
   */
  export type ElectricityBillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ElectricityBills.
     */
    data: XOR<ElectricityBillUpdateManyMutationInput, ElectricityBillUncheckedUpdateManyInput>
    /**
     * Filter which ElectricityBills to update
     */
    where?: ElectricityBillWhereInput
  }


  /**
   * ElectricityBill upsert
   */
  export type ElectricityBillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * The filter to search for the ElectricityBill to update in case it exists.
     */
    where: ElectricityBillWhereUniqueInput
    /**
     * In case the ElectricityBill found by the `where` argument doesn't exist, create a new ElectricityBill with this data.
     */
    create: XOR<ElectricityBillCreateInput, ElectricityBillUncheckedCreateInput>
    /**
     * In case the ElectricityBill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ElectricityBillUpdateInput, ElectricityBillUncheckedUpdateInput>
  }


  /**
   * ElectricityBill delete
   */
  export type ElectricityBillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
    /**
     * Filter which ElectricityBill to delete.
     */
    where: ElectricityBillWhereUniqueInput
  }


  /**
   * ElectricityBill deleteMany
   */
  export type ElectricityBillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElectricityBills to delete
     */
    where?: ElectricityBillWhereInput
  }


  /**
   * ElectricityBill without action
   */
  export type ElectricityBillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectricityBill
     */
    select?: ElectricityBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ElectricityBillInclude<ExtArgs> | null
  }



  /**
   * Model HouseholdWaterSupply
   */

  export type AggregateHouseholdWaterSupply = {
    _count: HouseholdWaterSupplyCountAggregateOutputType | null
    _avg: HouseholdWaterSupplyAvgAggregateOutputType | null
    _sum: HouseholdWaterSupplySumAggregateOutputType | null
    _min: HouseholdWaterSupplyMinAggregateOutputType | null
    _max: HouseholdWaterSupplyMaxAggregateOutputType | null
  }

  export type HouseholdWaterSupplyAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type HouseholdWaterSupplySumAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type HouseholdWaterSupplyMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdWaterSupplyMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdWaterSupplyCountAggregateOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type HouseholdWaterSupplyAvgAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type HouseholdWaterSupplySumAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type HouseholdWaterSupplyMinAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdWaterSupplyMaxAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdWaterSupplyCountAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type HouseholdWaterSupplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HouseholdWaterSupply to aggregate.
     */
    where?: HouseholdWaterSupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdWaterSupplies to fetch.
     */
    orderBy?: HouseholdWaterSupplyOrderByWithRelationInput | HouseholdWaterSupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseholdWaterSupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdWaterSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdWaterSupplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HouseholdWaterSupplies
    **/
    _count?: true | HouseholdWaterSupplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseholdWaterSupplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseholdWaterSupplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseholdWaterSupplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseholdWaterSupplyMaxAggregateInputType
  }

  export type GetHouseholdWaterSupplyAggregateType<T extends HouseholdWaterSupplyAggregateArgs> = {
        [P in keyof T & keyof AggregateHouseholdWaterSupply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouseholdWaterSupply[P]>
      : GetScalarType<T[P], AggregateHouseholdWaterSupply[P]>
  }




  export type HouseholdWaterSupplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdWaterSupplyWhereInput
    orderBy?: HouseholdWaterSupplyOrderByWithAggregationInput | HouseholdWaterSupplyOrderByWithAggregationInput[]
    by: HouseholdWaterSupplyScalarFieldEnum[] | HouseholdWaterSupplyScalarFieldEnum
    having?: HouseholdWaterSupplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseholdWaterSupplyCountAggregateInputType | true
    _avg?: HouseholdWaterSupplyAvgAggregateInputType
    _sum?: HouseholdWaterSupplySumAggregateInputType
    _min?: HouseholdWaterSupplyMinAggregateInputType
    _max?: HouseholdWaterSupplyMaxAggregateInputType
  }

  export type HouseholdWaterSupplyGroupByOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: HouseholdWaterSupplyCountAggregateOutputType | null
    _avg: HouseholdWaterSupplyAvgAggregateOutputType | null
    _sum: HouseholdWaterSupplySumAggregateOutputType | null
    _min: HouseholdWaterSupplyMinAggregateOutputType | null
    _max: HouseholdWaterSupplyMaxAggregateOutputType | null
  }

  type GetHouseholdWaterSupplyGroupByPayload<T extends HouseholdWaterSupplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HouseholdWaterSupplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseholdWaterSupplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseholdWaterSupplyGroupByOutputType[P]>
            : GetScalarType<T[P], HouseholdWaterSupplyGroupByOutputType[P]>
        }
      >
    >


  export type HouseholdWaterSupplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | HouseholdWaterSupply$carbonFootprintArgs<ExtArgs>
  }, ExtArgs["result"]["householdWaterSupply"]>

  export type HouseholdWaterSupplySelectScalar = {
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type HouseholdWaterSupplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | HouseholdWaterSupply$carbonFootprintArgs<ExtArgs>
  }


  export type $HouseholdWaterSupplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HouseholdWaterSupply"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      carbonFootprint: Prisma.$CarbonFootprintPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      totalCarbonFootprint: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["householdWaterSupply"]>
    composites: {}
  }


  type HouseholdWaterSupplyGetPayload<S extends boolean | null | undefined | HouseholdWaterSupplyDefaultArgs> = $Result.GetResult<Prisma.$HouseholdWaterSupplyPayload, S>

  type HouseholdWaterSupplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HouseholdWaterSupplyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HouseholdWaterSupplyCountAggregateInputType | true
    }

  export interface HouseholdWaterSupplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HouseholdWaterSupply'], meta: { name: 'HouseholdWaterSupply' } }
    /**
     * Find zero or one HouseholdWaterSupply that matches the filter.
     * @param {HouseholdWaterSupplyFindUniqueArgs} args - Arguments to find a HouseholdWaterSupply
     * @example
     * // Get one HouseholdWaterSupply
     * const householdWaterSupply = await prisma.householdWaterSupply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseholdWaterSupplyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdWaterSupplyFindUniqueArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HouseholdWaterSupply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseholdWaterSupplyFindUniqueOrThrowArgs} args - Arguments to find a HouseholdWaterSupply
     * @example
     * // Get one HouseholdWaterSupply
     * const householdWaterSupply = await prisma.householdWaterSupply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseholdWaterSupplyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdWaterSupplyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HouseholdWaterSupply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyFindFirstArgs} args - Arguments to find a HouseholdWaterSupply
     * @example
     * // Get one HouseholdWaterSupply
     * const householdWaterSupply = await prisma.householdWaterSupply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseholdWaterSupplyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdWaterSupplyFindFirstArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HouseholdWaterSupply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyFindFirstOrThrowArgs} args - Arguments to find a HouseholdWaterSupply
     * @example
     * // Get one HouseholdWaterSupply
     * const householdWaterSupply = await prisma.householdWaterSupply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseholdWaterSupplyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdWaterSupplyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HouseholdWaterSupplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HouseholdWaterSupplies
     * const householdWaterSupplies = await prisma.householdWaterSupply.findMany()
     * 
     * // Get first 10 HouseholdWaterSupplies
     * const householdWaterSupplies = await prisma.householdWaterSupply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const householdWaterSupplyWithIdOnly = await prisma.householdWaterSupply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseholdWaterSupplyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdWaterSupplyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HouseholdWaterSupply.
     * @param {HouseholdWaterSupplyCreateArgs} args - Arguments to create a HouseholdWaterSupply.
     * @example
     * // Create one HouseholdWaterSupply
     * const HouseholdWaterSupply = await prisma.householdWaterSupply.create({
     *   data: {
     *     // ... data to create a HouseholdWaterSupply
     *   }
     * })
     * 
    **/
    create<T extends HouseholdWaterSupplyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdWaterSupplyCreateArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HouseholdWaterSupplies.
     *     @param {HouseholdWaterSupplyCreateManyArgs} args - Arguments to create many HouseholdWaterSupplies.
     *     @example
     *     // Create many HouseholdWaterSupplies
     *     const householdWaterSupply = await prisma.householdWaterSupply.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseholdWaterSupplyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdWaterSupplyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HouseholdWaterSupply.
     * @param {HouseholdWaterSupplyDeleteArgs} args - Arguments to delete one HouseholdWaterSupply.
     * @example
     * // Delete one HouseholdWaterSupply
     * const HouseholdWaterSupply = await prisma.householdWaterSupply.delete({
     *   where: {
     *     // ... filter to delete one HouseholdWaterSupply
     *   }
     * })
     * 
    **/
    delete<T extends HouseholdWaterSupplyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdWaterSupplyDeleteArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HouseholdWaterSupply.
     * @param {HouseholdWaterSupplyUpdateArgs} args - Arguments to update one HouseholdWaterSupply.
     * @example
     * // Update one HouseholdWaterSupply
     * const householdWaterSupply = await prisma.householdWaterSupply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseholdWaterSupplyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdWaterSupplyUpdateArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HouseholdWaterSupplies.
     * @param {HouseholdWaterSupplyDeleteManyArgs} args - Arguments to filter HouseholdWaterSupplies to delete.
     * @example
     * // Delete a few HouseholdWaterSupplies
     * const { count } = await prisma.householdWaterSupply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseholdWaterSupplyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdWaterSupplyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HouseholdWaterSupplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HouseholdWaterSupplies
     * const householdWaterSupply = await prisma.householdWaterSupply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseholdWaterSupplyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdWaterSupplyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HouseholdWaterSupply.
     * @param {HouseholdWaterSupplyUpsertArgs} args - Arguments to update or create a HouseholdWaterSupply.
     * @example
     * // Update or create a HouseholdWaterSupply
     * const householdWaterSupply = await prisma.householdWaterSupply.upsert({
     *   create: {
     *     // ... data to create a HouseholdWaterSupply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HouseholdWaterSupply we want to update
     *   }
     * })
    **/
    upsert<T extends HouseholdWaterSupplyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdWaterSupplyUpsertArgs<ExtArgs>>
    ): Prisma__HouseholdWaterSupplyClient<$Result.GetResult<Prisma.$HouseholdWaterSupplyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HouseholdWaterSupplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyCountArgs} args - Arguments to filter HouseholdWaterSupplies to count.
     * @example
     * // Count the number of HouseholdWaterSupplies
     * const count = await prisma.householdWaterSupply.count({
     *   where: {
     *     // ... the filter for the HouseholdWaterSupplies we want to count
     *   }
     * })
    **/
    count<T extends HouseholdWaterSupplyCountArgs>(
      args?: Subset<T, HouseholdWaterSupplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseholdWaterSupplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HouseholdWaterSupply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseholdWaterSupplyAggregateArgs>(args: Subset<T, HouseholdWaterSupplyAggregateArgs>): Prisma.PrismaPromise<GetHouseholdWaterSupplyAggregateType<T>>

    /**
     * Group by HouseholdWaterSupply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdWaterSupplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseholdWaterSupplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseholdWaterSupplyGroupByArgs['orderBy'] }
        : { orderBy?: HouseholdWaterSupplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseholdWaterSupplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseholdWaterSupplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HouseholdWaterSupply model
   */
  readonly fields: HouseholdWaterSupplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HouseholdWaterSupply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HouseholdWaterSupplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    carbonFootprint<T extends HouseholdWaterSupply$carbonFootprintArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdWaterSupply$carbonFootprintArgs<ExtArgs>>): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HouseholdWaterSupply model
   */ 
  interface HouseholdWaterSupplyFieldRefs {
    readonly id: FieldRef<"HouseholdWaterSupply", 'Int'>
    readonly householdId: FieldRef<"HouseholdWaterSupply", 'Int'>
    readonly totalCarbonFootprint: FieldRef<"HouseholdWaterSupply", 'Decimal'>
    readonly recordedDate: FieldRef<"HouseholdWaterSupply", 'DateTime'>
    readonly createdAt: FieldRef<"HouseholdWaterSupply", 'DateTime'>
    readonly createdBy: FieldRef<"HouseholdWaterSupply", 'DateTime'>
    readonly updatedAt: FieldRef<"HouseholdWaterSupply", 'DateTime'>
    readonly updatedBy: FieldRef<"HouseholdWaterSupply", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * HouseholdWaterSupply findUnique
   */
  export type HouseholdWaterSupplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdWaterSupply to fetch.
     */
    where: HouseholdWaterSupplyWhereUniqueInput
  }


  /**
   * HouseholdWaterSupply findUniqueOrThrow
   */
  export type HouseholdWaterSupplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdWaterSupply to fetch.
     */
    where: HouseholdWaterSupplyWhereUniqueInput
  }


  /**
   * HouseholdWaterSupply findFirst
   */
  export type HouseholdWaterSupplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdWaterSupply to fetch.
     */
    where?: HouseholdWaterSupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdWaterSupplies to fetch.
     */
    orderBy?: HouseholdWaterSupplyOrderByWithRelationInput | HouseholdWaterSupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseholdWaterSupplies.
     */
    cursor?: HouseholdWaterSupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdWaterSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdWaterSupplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseholdWaterSupplies.
     */
    distinct?: HouseholdWaterSupplyScalarFieldEnum | HouseholdWaterSupplyScalarFieldEnum[]
  }


  /**
   * HouseholdWaterSupply findFirstOrThrow
   */
  export type HouseholdWaterSupplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdWaterSupply to fetch.
     */
    where?: HouseholdWaterSupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdWaterSupplies to fetch.
     */
    orderBy?: HouseholdWaterSupplyOrderByWithRelationInput | HouseholdWaterSupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseholdWaterSupplies.
     */
    cursor?: HouseholdWaterSupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdWaterSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdWaterSupplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseholdWaterSupplies.
     */
    distinct?: HouseholdWaterSupplyScalarFieldEnum | HouseholdWaterSupplyScalarFieldEnum[]
  }


  /**
   * HouseholdWaterSupply findMany
   */
  export type HouseholdWaterSupplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdWaterSupplies to fetch.
     */
    where?: HouseholdWaterSupplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdWaterSupplies to fetch.
     */
    orderBy?: HouseholdWaterSupplyOrderByWithRelationInput | HouseholdWaterSupplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HouseholdWaterSupplies.
     */
    cursor?: HouseholdWaterSupplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdWaterSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdWaterSupplies.
     */
    skip?: number
    distinct?: HouseholdWaterSupplyScalarFieldEnum | HouseholdWaterSupplyScalarFieldEnum[]
  }


  /**
   * HouseholdWaterSupply create
   */
  export type HouseholdWaterSupplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * The data needed to create a HouseholdWaterSupply.
     */
    data: XOR<HouseholdWaterSupplyCreateInput, HouseholdWaterSupplyUncheckedCreateInput>
  }


  /**
   * HouseholdWaterSupply createMany
   */
  export type HouseholdWaterSupplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HouseholdWaterSupplies.
     */
    data: HouseholdWaterSupplyCreateManyInput | HouseholdWaterSupplyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HouseholdWaterSupply update
   */
  export type HouseholdWaterSupplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * The data needed to update a HouseholdWaterSupply.
     */
    data: XOR<HouseholdWaterSupplyUpdateInput, HouseholdWaterSupplyUncheckedUpdateInput>
    /**
     * Choose, which HouseholdWaterSupply to update.
     */
    where: HouseholdWaterSupplyWhereUniqueInput
  }


  /**
   * HouseholdWaterSupply updateMany
   */
  export type HouseholdWaterSupplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HouseholdWaterSupplies.
     */
    data: XOR<HouseholdWaterSupplyUpdateManyMutationInput, HouseholdWaterSupplyUncheckedUpdateManyInput>
    /**
     * Filter which HouseholdWaterSupplies to update
     */
    where?: HouseholdWaterSupplyWhereInput
  }


  /**
   * HouseholdWaterSupply upsert
   */
  export type HouseholdWaterSupplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * The filter to search for the HouseholdWaterSupply to update in case it exists.
     */
    where: HouseholdWaterSupplyWhereUniqueInput
    /**
     * In case the HouseholdWaterSupply found by the `where` argument doesn't exist, create a new HouseholdWaterSupply with this data.
     */
    create: XOR<HouseholdWaterSupplyCreateInput, HouseholdWaterSupplyUncheckedCreateInput>
    /**
     * In case the HouseholdWaterSupply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseholdWaterSupplyUpdateInput, HouseholdWaterSupplyUncheckedUpdateInput>
  }


  /**
   * HouseholdWaterSupply delete
   */
  export type HouseholdWaterSupplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
    /**
     * Filter which HouseholdWaterSupply to delete.
     */
    where: HouseholdWaterSupplyWhereUniqueInput
  }


  /**
   * HouseholdWaterSupply deleteMany
   */
  export type HouseholdWaterSupplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HouseholdWaterSupplies to delete
     */
    where?: HouseholdWaterSupplyWhereInput
  }


  /**
   * HouseholdWaterSupply.carbonFootprint
   */
  export type HouseholdWaterSupply$carbonFootprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    where?: CarbonFootprintWhereInput
  }


  /**
   * HouseholdWaterSupply without action
   */
  export type HouseholdWaterSupplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdWaterSupply
     */
    select?: HouseholdWaterSupplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdWaterSupplyInclude<ExtArgs> | null
  }



  /**
   * Model WaterBill
   */

  export type AggregateWaterBill = {
    _count: WaterBillCountAggregateOutputType | null
    _avg: WaterBillAvgAggregateOutputType | null
    _sum: WaterBillSumAggregateOutputType | null
    _min: WaterBillMinAggregateOutputType | null
    _max: WaterBillMaxAggregateOutputType | null
  }

  export type WaterBillAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    waterMeter: Decimal | null
  }

  export type WaterBillSumAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    waterMeter: Decimal | null
  }

  export type WaterBillMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    waterMeter: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type WaterBillMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
    waterMeter: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type WaterBillCountAggregateOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    amountConsumption: number
    waterMeter: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type WaterBillAvgAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    waterMeter?: true
  }

  export type WaterBillSumAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    waterMeter?: true
  }

  export type WaterBillMinAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    waterMeter?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type WaterBillMaxAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    waterMeter?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type WaterBillCountAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
    waterMeter?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type WaterBillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WaterBill to aggregate.
     */
    where?: WaterBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaterBills to fetch.
     */
    orderBy?: WaterBillOrderByWithRelationInput | WaterBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WaterBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaterBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaterBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WaterBills
    **/
    _count?: true | WaterBillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WaterBillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WaterBillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WaterBillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WaterBillMaxAggregateInputType
  }

  export type GetWaterBillAggregateType<T extends WaterBillAggregateArgs> = {
        [P in keyof T & keyof AggregateWaterBill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWaterBill[P]>
      : GetScalarType<T[P], AggregateWaterBill[P]>
  }




  export type WaterBillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaterBillWhereInput
    orderBy?: WaterBillOrderByWithAggregationInput | WaterBillOrderByWithAggregationInput[]
    by: WaterBillScalarFieldEnum[] | WaterBillScalarFieldEnum
    having?: WaterBillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WaterBillCountAggregateInputType | true
    _avg?: WaterBillAvgAggregateInputType
    _sum?: WaterBillSumAggregateInputType
    _min?: WaterBillMinAggregateInputType
    _max?: WaterBillMaxAggregateInputType
  }

  export type WaterBillGroupByOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    amountConsumption: Decimal
    waterMeter: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: WaterBillCountAggregateOutputType | null
    _avg: WaterBillAvgAggregateOutputType | null
    _sum: WaterBillSumAggregateOutputType | null
    _min: WaterBillMinAggregateOutputType | null
    _max: WaterBillMaxAggregateOutputType | null
  }

  type GetWaterBillGroupByPayload<T extends WaterBillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WaterBillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WaterBillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WaterBillGroupByOutputType[P]>
            : GetScalarType<T[P], WaterBillGroupByOutputType[P]>
        }
      >
    >


  export type WaterBillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    amountConsumption?: boolean
    waterMeter?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waterBill"]>

  export type WaterBillSelectScalar = {
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    amountConsumption?: boolean
    waterMeter?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type WaterBillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
  }


  export type $WaterBillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WaterBill"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      emissionFactor: Prisma.$EmissionFactorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      emissionFactorId: number
      amountConsumption: Prisma.Decimal
      waterMeter: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["waterBill"]>
    composites: {}
  }


  type WaterBillGetPayload<S extends boolean | null | undefined | WaterBillDefaultArgs> = $Result.GetResult<Prisma.$WaterBillPayload, S>

  type WaterBillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WaterBillFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: WaterBillCountAggregateInputType | true
    }

  export interface WaterBillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WaterBill'], meta: { name: 'WaterBill' } }
    /**
     * Find zero or one WaterBill that matches the filter.
     * @param {WaterBillFindUniqueArgs} args - Arguments to find a WaterBill
     * @example
     * // Get one WaterBill
     * const waterBill = await prisma.waterBill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WaterBillFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WaterBillFindUniqueArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WaterBill that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WaterBillFindUniqueOrThrowArgs} args - Arguments to find a WaterBill
     * @example
     * // Get one WaterBill
     * const waterBill = await prisma.waterBill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WaterBillFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WaterBillFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WaterBill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillFindFirstArgs} args - Arguments to find a WaterBill
     * @example
     * // Get one WaterBill
     * const waterBill = await prisma.waterBill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WaterBillFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WaterBillFindFirstArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WaterBill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillFindFirstOrThrowArgs} args - Arguments to find a WaterBill
     * @example
     * // Get one WaterBill
     * const waterBill = await prisma.waterBill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WaterBillFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WaterBillFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WaterBills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WaterBills
     * const waterBills = await prisma.waterBill.findMany()
     * 
     * // Get first 10 WaterBills
     * const waterBills = await prisma.waterBill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const waterBillWithIdOnly = await prisma.waterBill.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WaterBillFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WaterBillFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WaterBill.
     * @param {WaterBillCreateArgs} args - Arguments to create a WaterBill.
     * @example
     * // Create one WaterBill
     * const WaterBill = await prisma.waterBill.create({
     *   data: {
     *     // ... data to create a WaterBill
     *   }
     * })
     * 
    **/
    create<T extends WaterBillCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WaterBillCreateArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WaterBills.
     *     @param {WaterBillCreateManyArgs} args - Arguments to create many WaterBills.
     *     @example
     *     // Create many WaterBills
     *     const waterBill = await prisma.waterBill.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WaterBillCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WaterBillCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WaterBill.
     * @param {WaterBillDeleteArgs} args - Arguments to delete one WaterBill.
     * @example
     * // Delete one WaterBill
     * const WaterBill = await prisma.waterBill.delete({
     *   where: {
     *     // ... filter to delete one WaterBill
     *   }
     * })
     * 
    **/
    delete<T extends WaterBillDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WaterBillDeleteArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WaterBill.
     * @param {WaterBillUpdateArgs} args - Arguments to update one WaterBill.
     * @example
     * // Update one WaterBill
     * const waterBill = await prisma.waterBill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WaterBillUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WaterBillUpdateArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WaterBills.
     * @param {WaterBillDeleteManyArgs} args - Arguments to filter WaterBills to delete.
     * @example
     * // Delete a few WaterBills
     * const { count } = await prisma.waterBill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WaterBillDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WaterBillDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WaterBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WaterBills
     * const waterBill = await prisma.waterBill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WaterBillUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WaterBillUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WaterBill.
     * @param {WaterBillUpsertArgs} args - Arguments to update or create a WaterBill.
     * @example
     * // Update or create a WaterBill
     * const waterBill = await prisma.waterBill.upsert({
     *   create: {
     *     // ... data to create a WaterBill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WaterBill we want to update
     *   }
     * })
    **/
    upsert<T extends WaterBillUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WaterBillUpsertArgs<ExtArgs>>
    ): Prisma__WaterBillClient<$Result.GetResult<Prisma.$WaterBillPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WaterBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillCountArgs} args - Arguments to filter WaterBills to count.
     * @example
     * // Count the number of WaterBills
     * const count = await prisma.waterBill.count({
     *   where: {
     *     // ... the filter for the WaterBills we want to count
     *   }
     * })
    **/
    count<T extends WaterBillCountArgs>(
      args?: Subset<T, WaterBillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WaterBillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WaterBill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WaterBillAggregateArgs>(args: Subset<T, WaterBillAggregateArgs>): Prisma.PrismaPromise<GetWaterBillAggregateType<T>>

    /**
     * Group by WaterBill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaterBillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WaterBillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WaterBillGroupByArgs['orderBy'] }
        : { orderBy?: WaterBillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WaterBillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaterBillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WaterBill model
   */
  readonly fields: WaterBillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WaterBill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WaterBillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    emissionFactor<T extends EmissionFactorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactorDefaultArgs<ExtArgs>>): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WaterBill model
   */ 
  interface WaterBillFieldRefs {
    readonly id: FieldRef<"WaterBill", 'Int'>
    readonly householdId: FieldRef<"WaterBill", 'Int'>
    readonly emissionFactorId: FieldRef<"WaterBill", 'Int'>
    readonly amountConsumption: FieldRef<"WaterBill", 'Decimal'>
    readonly waterMeter: FieldRef<"WaterBill", 'Decimal'>
    readonly recordedDate: FieldRef<"WaterBill", 'DateTime'>
    readonly createdAt: FieldRef<"WaterBill", 'DateTime'>
    readonly createdBy: FieldRef<"WaterBill", 'DateTime'>
    readonly updatedAt: FieldRef<"WaterBill", 'DateTime'>
    readonly updatedBy: FieldRef<"WaterBill", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * WaterBill findUnique
   */
  export type WaterBillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * Filter, which WaterBill to fetch.
     */
    where: WaterBillWhereUniqueInput
  }


  /**
   * WaterBill findUniqueOrThrow
   */
  export type WaterBillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * Filter, which WaterBill to fetch.
     */
    where: WaterBillWhereUniqueInput
  }


  /**
   * WaterBill findFirst
   */
  export type WaterBillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * Filter, which WaterBill to fetch.
     */
    where?: WaterBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaterBills to fetch.
     */
    orderBy?: WaterBillOrderByWithRelationInput | WaterBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WaterBills.
     */
    cursor?: WaterBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaterBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaterBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WaterBills.
     */
    distinct?: WaterBillScalarFieldEnum | WaterBillScalarFieldEnum[]
  }


  /**
   * WaterBill findFirstOrThrow
   */
  export type WaterBillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * Filter, which WaterBill to fetch.
     */
    where?: WaterBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaterBills to fetch.
     */
    orderBy?: WaterBillOrderByWithRelationInput | WaterBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WaterBills.
     */
    cursor?: WaterBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaterBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaterBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WaterBills.
     */
    distinct?: WaterBillScalarFieldEnum | WaterBillScalarFieldEnum[]
  }


  /**
   * WaterBill findMany
   */
  export type WaterBillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * Filter, which WaterBills to fetch.
     */
    where?: WaterBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaterBills to fetch.
     */
    orderBy?: WaterBillOrderByWithRelationInput | WaterBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WaterBills.
     */
    cursor?: WaterBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaterBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaterBills.
     */
    skip?: number
    distinct?: WaterBillScalarFieldEnum | WaterBillScalarFieldEnum[]
  }


  /**
   * WaterBill create
   */
  export type WaterBillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * The data needed to create a WaterBill.
     */
    data: XOR<WaterBillCreateInput, WaterBillUncheckedCreateInput>
  }


  /**
   * WaterBill createMany
   */
  export type WaterBillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WaterBills.
     */
    data: WaterBillCreateManyInput | WaterBillCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * WaterBill update
   */
  export type WaterBillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * The data needed to update a WaterBill.
     */
    data: XOR<WaterBillUpdateInput, WaterBillUncheckedUpdateInput>
    /**
     * Choose, which WaterBill to update.
     */
    where: WaterBillWhereUniqueInput
  }


  /**
   * WaterBill updateMany
   */
  export type WaterBillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WaterBills.
     */
    data: XOR<WaterBillUpdateManyMutationInput, WaterBillUncheckedUpdateManyInput>
    /**
     * Filter which WaterBills to update
     */
    where?: WaterBillWhereInput
  }


  /**
   * WaterBill upsert
   */
  export type WaterBillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * The filter to search for the WaterBill to update in case it exists.
     */
    where: WaterBillWhereUniqueInput
    /**
     * In case the WaterBill found by the `where` argument doesn't exist, create a new WaterBill with this data.
     */
    create: XOR<WaterBillCreateInput, WaterBillUncheckedCreateInput>
    /**
     * In case the WaterBill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WaterBillUpdateInput, WaterBillUncheckedUpdateInput>
  }


  /**
   * WaterBill delete
   */
  export type WaterBillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
    /**
     * Filter which WaterBill to delete.
     */
    where: WaterBillWhereUniqueInput
  }


  /**
   * WaterBill deleteMany
   */
  export type WaterBillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WaterBills to delete
     */
    where?: WaterBillWhereInput
  }


  /**
   * WaterBill without action
   */
  export type WaterBillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaterBill
     */
    select?: WaterBillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WaterBillInclude<ExtArgs> | null
  }



  /**
   * Model HouseholdOtherEnergy
   */

  export type AggregateHouseholdOtherEnergy = {
    _count: HouseholdOtherEnergyCountAggregateOutputType | null
    _avg: HouseholdOtherEnergyAvgAggregateOutputType | null
    _sum: HouseholdOtherEnergySumAggregateOutputType | null
    _min: HouseholdOtherEnergyMinAggregateOutputType | null
    _max: HouseholdOtherEnergyMaxAggregateOutputType | null
  }

  export type HouseholdOtherEnergyAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type HouseholdOtherEnergySumAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
  }

  export type HouseholdOtherEnergyMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdOtherEnergyMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    totalCarbonFootprint: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type HouseholdOtherEnergyCountAggregateOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type HouseholdOtherEnergyAvgAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type HouseholdOtherEnergySumAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
  }

  export type HouseholdOtherEnergyMinAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdOtherEnergyMaxAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type HouseholdOtherEnergyCountAggregateInputType = {
    id?: true
    householdId?: true
    totalCarbonFootprint?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type HouseholdOtherEnergyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HouseholdOtherEnergy to aggregate.
     */
    where?: HouseholdOtherEnergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdOtherEnergies to fetch.
     */
    orderBy?: HouseholdOtherEnergyOrderByWithRelationInput | HouseholdOtherEnergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseholdOtherEnergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdOtherEnergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdOtherEnergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HouseholdOtherEnergies
    **/
    _count?: true | HouseholdOtherEnergyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseholdOtherEnergyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseholdOtherEnergySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseholdOtherEnergyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseholdOtherEnergyMaxAggregateInputType
  }

  export type GetHouseholdOtherEnergyAggregateType<T extends HouseholdOtherEnergyAggregateArgs> = {
        [P in keyof T & keyof AggregateHouseholdOtherEnergy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouseholdOtherEnergy[P]>
      : GetScalarType<T[P], AggregateHouseholdOtherEnergy[P]>
  }




  export type HouseholdOtherEnergyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseholdOtherEnergyWhereInput
    orderBy?: HouseholdOtherEnergyOrderByWithAggregationInput | HouseholdOtherEnergyOrderByWithAggregationInput[]
    by: HouseholdOtherEnergyScalarFieldEnum[] | HouseholdOtherEnergyScalarFieldEnum
    having?: HouseholdOtherEnergyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseholdOtherEnergyCountAggregateInputType | true
    _avg?: HouseholdOtherEnergyAvgAggregateInputType
    _sum?: HouseholdOtherEnergySumAggregateInputType
    _min?: HouseholdOtherEnergyMinAggregateInputType
    _max?: HouseholdOtherEnergyMaxAggregateInputType
  }

  export type HouseholdOtherEnergyGroupByOutputType = {
    id: number
    householdId: number
    totalCarbonFootprint: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: HouseholdOtherEnergyCountAggregateOutputType | null
    _avg: HouseholdOtherEnergyAvgAggregateOutputType | null
    _sum: HouseholdOtherEnergySumAggregateOutputType | null
    _min: HouseholdOtherEnergyMinAggregateOutputType | null
    _max: HouseholdOtherEnergyMaxAggregateOutputType | null
  }

  type GetHouseholdOtherEnergyGroupByPayload<T extends HouseholdOtherEnergyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HouseholdOtherEnergyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseholdOtherEnergyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseholdOtherEnergyGroupByOutputType[P]>
            : GetScalarType<T[P], HouseholdOtherEnergyGroupByOutputType[P]>
        }
      >
    >


  export type HouseholdOtherEnergySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | HouseholdOtherEnergy$carbonFootprintArgs<ExtArgs>
  }, ExtArgs["result"]["householdOtherEnergy"]>

  export type HouseholdOtherEnergySelectScalar = {
    id?: boolean
    householdId?: boolean
    totalCarbonFootprint?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type HouseholdOtherEnergyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    carbonFootprint?: boolean | HouseholdOtherEnergy$carbonFootprintArgs<ExtArgs>
  }


  export type $HouseholdOtherEnergyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HouseholdOtherEnergy"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      carbonFootprint: Prisma.$CarbonFootprintPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      totalCarbonFootprint: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["householdOtherEnergy"]>
    composites: {}
  }


  type HouseholdOtherEnergyGetPayload<S extends boolean | null | undefined | HouseholdOtherEnergyDefaultArgs> = $Result.GetResult<Prisma.$HouseholdOtherEnergyPayload, S>

  type HouseholdOtherEnergyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HouseholdOtherEnergyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HouseholdOtherEnergyCountAggregateInputType | true
    }

  export interface HouseholdOtherEnergyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HouseholdOtherEnergy'], meta: { name: 'HouseholdOtherEnergy' } }
    /**
     * Find zero or one HouseholdOtherEnergy that matches the filter.
     * @param {HouseholdOtherEnergyFindUniqueArgs} args - Arguments to find a HouseholdOtherEnergy
     * @example
     * // Get one HouseholdOtherEnergy
     * const householdOtherEnergy = await prisma.householdOtherEnergy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseholdOtherEnergyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdOtherEnergyFindUniqueArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HouseholdOtherEnergy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HouseholdOtherEnergyFindUniqueOrThrowArgs} args - Arguments to find a HouseholdOtherEnergy
     * @example
     * // Get one HouseholdOtherEnergy
     * const householdOtherEnergy = await prisma.householdOtherEnergy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseholdOtherEnergyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdOtherEnergyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HouseholdOtherEnergy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyFindFirstArgs} args - Arguments to find a HouseholdOtherEnergy
     * @example
     * // Get one HouseholdOtherEnergy
     * const householdOtherEnergy = await prisma.householdOtherEnergy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseholdOtherEnergyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdOtherEnergyFindFirstArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HouseholdOtherEnergy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyFindFirstOrThrowArgs} args - Arguments to find a HouseholdOtherEnergy
     * @example
     * // Get one HouseholdOtherEnergy
     * const householdOtherEnergy = await prisma.householdOtherEnergy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseholdOtherEnergyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdOtherEnergyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HouseholdOtherEnergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HouseholdOtherEnergies
     * const householdOtherEnergies = await prisma.householdOtherEnergy.findMany()
     * 
     * // Get first 10 HouseholdOtherEnergies
     * const householdOtherEnergies = await prisma.householdOtherEnergy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const householdOtherEnergyWithIdOnly = await prisma.householdOtherEnergy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HouseholdOtherEnergyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdOtherEnergyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HouseholdOtherEnergy.
     * @param {HouseholdOtherEnergyCreateArgs} args - Arguments to create a HouseholdOtherEnergy.
     * @example
     * // Create one HouseholdOtherEnergy
     * const HouseholdOtherEnergy = await prisma.householdOtherEnergy.create({
     *   data: {
     *     // ... data to create a HouseholdOtherEnergy
     *   }
     * })
     * 
    **/
    create<T extends HouseholdOtherEnergyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdOtherEnergyCreateArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HouseholdOtherEnergies.
     *     @param {HouseholdOtherEnergyCreateManyArgs} args - Arguments to create many HouseholdOtherEnergies.
     *     @example
     *     // Create many HouseholdOtherEnergies
     *     const householdOtherEnergy = await prisma.householdOtherEnergy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HouseholdOtherEnergyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdOtherEnergyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HouseholdOtherEnergy.
     * @param {HouseholdOtherEnergyDeleteArgs} args - Arguments to delete one HouseholdOtherEnergy.
     * @example
     * // Delete one HouseholdOtherEnergy
     * const HouseholdOtherEnergy = await prisma.householdOtherEnergy.delete({
     *   where: {
     *     // ... filter to delete one HouseholdOtherEnergy
     *   }
     * })
     * 
    **/
    delete<T extends HouseholdOtherEnergyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdOtherEnergyDeleteArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HouseholdOtherEnergy.
     * @param {HouseholdOtherEnergyUpdateArgs} args - Arguments to update one HouseholdOtherEnergy.
     * @example
     * // Update one HouseholdOtherEnergy
     * const householdOtherEnergy = await prisma.householdOtherEnergy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseholdOtherEnergyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdOtherEnergyUpdateArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HouseholdOtherEnergies.
     * @param {HouseholdOtherEnergyDeleteManyArgs} args - Arguments to filter HouseholdOtherEnergies to delete.
     * @example
     * // Delete a few HouseholdOtherEnergies
     * const { count } = await prisma.householdOtherEnergy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseholdOtherEnergyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseholdOtherEnergyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HouseholdOtherEnergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HouseholdOtherEnergies
     * const householdOtherEnergy = await prisma.householdOtherEnergy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseholdOtherEnergyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdOtherEnergyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HouseholdOtherEnergy.
     * @param {HouseholdOtherEnergyUpsertArgs} args - Arguments to update or create a HouseholdOtherEnergy.
     * @example
     * // Update or create a HouseholdOtherEnergy
     * const householdOtherEnergy = await prisma.householdOtherEnergy.upsert({
     *   create: {
     *     // ... data to create a HouseholdOtherEnergy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HouseholdOtherEnergy we want to update
     *   }
     * })
    **/
    upsert<T extends HouseholdOtherEnergyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HouseholdOtherEnergyUpsertArgs<ExtArgs>>
    ): Prisma__HouseholdOtherEnergyClient<$Result.GetResult<Prisma.$HouseholdOtherEnergyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HouseholdOtherEnergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyCountArgs} args - Arguments to filter HouseholdOtherEnergies to count.
     * @example
     * // Count the number of HouseholdOtherEnergies
     * const count = await prisma.householdOtherEnergy.count({
     *   where: {
     *     // ... the filter for the HouseholdOtherEnergies we want to count
     *   }
     * })
    **/
    count<T extends HouseholdOtherEnergyCountArgs>(
      args?: Subset<T, HouseholdOtherEnergyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseholdOtherEnergyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HouseholdOtherEnergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseholdOtherEnergyAggregateArgs>(args: Subset<T, HouseholdOtherEnergyAggregateArgs>): Prisma.PrismaPromise<GetHouseholdOtherEnergyAggregateType<T>>

    /**
     * Group by HouseholdOtherEnergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseholdOtherEnergyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseholdOtherEnergyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseholdOtherEnergyGroupByArgs['orderBy'] }
        : { orderBy?: HouseholdOtherEnergyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseholdOtherEnergyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseholdOtherEnergyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HouseholdOtherEnergy model
   */
  readonly fields: HouseholdOtherEnergyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HouseholdOtherEnergy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HouseholdOtherEnergyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    carbonFootprint<T extends HouseholdOtherEnergy$carbonFootprintArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdOtherEnergy$carbonFootprintArgs<ExtArgs>>): Prisma__CarbonFootprintClient<$Result.GetResult<Prisma.$CarbonFootprintPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HouseholdOtherEnergy model
   */ 
  interface HouseholdOtherEnergyFieldRefs {
    readonly id: FieldRef<"HouseholdOtherEnergy", 'Int'>
    readonly householdId: FieldRef<"HouseholdOtherEnergy", 'Int'>
    readonly totalCarbonFootprint: FieldRef<"HouseholdOtherEnergy", 'Decimal'>
    readonly recordedDate: FieldRef<"HouseholdOtherEnergy", 'DateTime'>
    readonly createdAt: FieldRef<"HouseholdOtherEnergy", 'DateTime'>
    readonly createdBy: FieldRef<"HouseholdOtherEnergy", 'DateTime'>
    readonly updatedAt: FieldRef<"HouseholdOtherEnergy", 'DateTime'>
    readonly updatedBy: FieldRef<"HouseholdOtherEnergy", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * HouseholdOtherEnergy findUnique
   */
  export type HouseholdOtherEnergyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdOtherEnergy to fetch.
     */
    where: HouseholdOtherEnergyWhereUniqueInput
  }


  /**
   * HouseholdOtherEnergy findUniqueOrThrow
   */
  export type HouseholdOtherEnergyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdOtherEnergy to fetch.
     */
    where: HouseholdOtherEnergyWhereUniqueInput
  }


  /**
   * HouseholdOtherEnergy findFirst
   */
  export type HouseholdOtherEnergyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdOtherEnergy to fetch.
     */
    where?: HouseholdOtherEnergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdOtherEnergies to fetch.
     */
    orderBy?: HouseholdOtherEnergyOrderByWithRelationInput | HouseholdOtherEnergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseholdOtherEnergies.
     */
    cursor?: HouseholdOtherEnergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdOtherEnergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdOtherEnergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseholdOtherEnergies.
     */
    distinct?: HouseholdOtherEnergyScalarFieldEnum | HouseholdOtherEnergyScalarFieldEnum[]
  }


  /**
   * HouseholdOtherEnergy findFirstOrThrow
   */
  export type HouseholdOtherEnergyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdOtherEnergy to fetch.
     */
    where?: HouseholdOtherEnergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdOtherEnergies to fetch.
     */
    orderBy?: HouseholdOtherEnergyOrderByWithRelationInput | HouseholdOtherEnergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HouseholdOtherEnergies.
     */
    cursor?: HouseholdOtherEnergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdOtherEnergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdOtherEnergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HouseholdOtherEnergies.
     */
    distinct?: HouseholdOtherEnergyScalarFieldEnum | HouseholdOtherEnergyScalarFieldEnum[]
  }


  /**
   * HouseholdOtherEnergy findMany
   */
  export type HouseholdOtherEnergyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * Filter, which HouseholdOtherEnergies to fetch.
     */
    where?: HouseholdOtherEnergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HouseholdOtherEnergies to fetch.
     */
    orderBy?: HouseholdOtherEnergyOrderByWithRelationInput | HouseholdOtherEnergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HouseholdOtherEnergies.
     */
    cursor?: HouseholdOtherEnergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HouseholdOtherEnergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HouseholdOtherEnergies.
     */
    skip?: number
    distinct?: HouseholdOtherEnergyScalarFieldEnum | HouseholdOtherEnergyScalarFieldEnum[]
  }


  /**
   * HouseholdOtherEnergy create
   */
  export type HouseholdOtherEnergyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * The data needed to create a HouseholdOtherEnergy.
     */
    data: XOR<HouseholdOtherEnergyCreateInput, HouseholdOtherEnergyUncheckedCreateInput>
  }


  /**
   * HouseholdOtherEnergy createMany
   */
  export type HouseholdOtherEnergyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HouseholdOtherEnergies.
     */
    data: HouseholdOtherEnergyCreateManyInput | HouseholdOtherEnergyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HouseholdOtherEnergy update
   */
  export type HouseholdOtherEnergyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * The data needed to update a HouseholdOtherEnergy.
     */
    data: XOR<HouseholdOtherEnergyUpdateInput, HouseholdOtherEnergyUncheckedUpdateInput>
    /**
     * Choose, which HouseholdOtherEnergy to update.
     */
    where: HouseholdOtherEnergyWhereUniqueInput
  }


  /**
   * HouseholdOtherEnergy updateMany
   */
  export type HouseholdOtherEnergyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HouseholdOtherEnergies.
     */
    data: XOR<HouseholdOtherEnergyUpdateManyMutationInput, HouseholdOtherEnergyUncheckedUpdateManyInput>
    /**
     * Filter which HouseholdOtherEnergies to update
     */
    where?: HouseholdOtherEnergyWhereInput
  }


  /**
   * HouseholdOtherEnergy upsert
   */
  export type HouseholdOtherEnergyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * The filter to search for the HouseholdOtherEnergy to update in case it exists.
     */
    where: HouseholdOtherEnergyWhereUniqueInput
    /**
     * In case the HouseholdOtherEnergy found by the `where` argument doesn't exist, create a new HouseholdOtherEnergy with this data.
     */
    create: XOR<HouseholdOtherEnergyCreateInput, HouseholdOtherEnergyUncheckedCreateInput>
    /**
     * In case the HouseholdOtherEnergy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseholdOtherEnergyUpdateInput, HouseholdOtherEnergyUncheckedUpdateInput>
  }


  /**
   * HouseholdOtherEnergy delete
   */
  export type HouseholdOtherEnergyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
    /**
     * Filter which HouseholdOtherEnergy to delete.
     */
    where: HouseholdOtherEnergyWhereUniqueInput
  }


  /**
   * HouseholdOtherEnergy deleteMany
   */
  export type HouseholdOtherEnergyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HouseholdOtherEnergies to delete
     */
    where?: HouseholdOtherEnergyWhereInput
  }


  /**
   * HouseholdOtherEnergy.carbonFootprint
   */
  export type HouseholdOtherEnergy$carbonFootprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarbonFootprint
     */
    select?: CarbonFootprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarbonFootprintInclude<ExtArgs> | null
    where?: CarbonFootprintWhereInput
  }


  /**
   * HouseholdOtherEnergy without action
   */
  export type HouseholdOtherEnergyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseholdOtherEnergy
     */
    select?: HouseholdOtherEnergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HouseholdOtherEnergyInclude<ExtArgs> | null
  }



  /**
   * Model OtherEnergyConsumption
   */

  export type AggregateOtherEnergyConsumption = {
    _count: OtherEnergyConsumptionCountAggregateOutputType | null
    _avg: OtherEnergyConsumptionAvgAggregateOutputType | null
    _sum: OtherEnergyConsumptionSumAggregateOutputType | null
    _min: OtherEnergyConsumptionMinAggregateOutputType | null
    _max: OtherEnergyConsumptionMaxAggregateOutputType | null
  }

  export type OtherEnergyConsumptionAvgAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
  }

  export type OtherEnergyConsumptionSumAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    amountConsumption: Decimal | null
  }

  export type OtherEnergyConsumptionMinAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    energyUsageType: $Enums.EnergyUsageType | null
    amountConsumption: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type OtherEnergyConsumptionMaxAggregateOutputType = {
    id: number | null
    householdId: number | null
    emissionFactorId: number | null
    energyUsageType: $Enums.EnergyUsageType | null
    amountConsumption: Decimal | null
    recordedDate: Date | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type OtherEnergyConsumptionCountAggregateOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    energyUsageType: number
    amountConsumption: number
    recordedDate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type OtherEnergyConsumptionAvgAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
  }

  export type OtherEnergyConsumptionSumAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    amountConsumption?: true
  }

  export type OtherEnergyConsumptionMinAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    energyUsageType?: true
    amountConsumption?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type OtherEnergyConsumptionMaxAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    energyUsageType?: true
    amountConsumption?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type OtherEnergyConsumptionCountAggregateInputType = {
    id?: true
    householdId?: true
    emissionFactorId?: true
    energyUsageType?: true
    amountConsumption?: true
    recordedDate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type OtherEnergyConsumptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtherEnergyConsumption to aggregate.
     */
    where?: OtherEnergyConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherEnergyConsumptions to fetch.
     */
    orderBy?: OtherEnergyConsumptionOrderByWithRelationInput | OtherEnergyConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtherEnergyConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherEnergyConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherEnergyConsumptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OtherEnergyConsumptions
    **/
    _count?: true | OtherEnergyConsumptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OtherEnergyConsumptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OtherEnergyConsumptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtherEnergyConsumptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtherEnergyConsumptionMaxAggregateInputType
  }

  export type GetOtherEnergyConsumptionAggregateType<T extends OtherEnergyConsumptionAggregateArgs> = {
        [P in keyof T & keyof AggregateOtherEnergyConsumption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtherEnergyConsumption[P]>
      : GetScalarType<T[P], AggregateOtherEnergyConsumption[P]>
  }




  export type OtherEnergyConsumptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtherEnergyConsumptionWhereInput
    orderBy?: OtherEnergyConsumptionOrderByWithAggregationInput | OtherEnergyConsumptionOrderByWithAggregationInput[]
    by: OtherEnergyConsumptionScalarFieldEnum[] | OtherEnergyConsumptionScalarFieldEnum
    having?: OtherEnergyConsumptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtherEnergyConsumptionCountAggregateInputType | true
    _avg?: OtherEnergyConsumptionAvgAggregateInputType
    _sum?: OtherEnergyConsumptionSumAggregateInputType
    _min?: OtherEnergyConsumptionMinAggregateInputType
    _max?: OtherEnergyConsumptionMaxAggregateInputType
  }

  export type OtherEnergyConsumptionGroupByOutputType = {
    id: number
    householdId: number
    emissionFactorId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal
    recordedDate: Date
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: OtherEnergyConsumptionCountAggregateOutputType | null
    _avg: OtherEnergyConsumptionAvgAggregateOutputType | null
    _sum: OtherEnergyConsumptionSumAggregateOutputType | null
    _min: OtherEnergyConsumptionMinAggregateOutputType | null
    _max: OtherEnergyConsumptionMaxAggregateOutputType | null
  }

  type GetOtherEnergyConsumptionGroupByPayload<T extends OtherEnergyConsumptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtherEnergyConsumptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtherEnergyConsumptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtherEnergyConsumptionGroupByOutputType[P]>
            : GetScalarType<T[P], OtherEnergyConsumptionGroupByOutputType[P]>
        }
      >
    >


  export type OtherEnergyConsumptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    energyUsageType?: boolean
    amountConsumption?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otherEnergyConsumption"]>

  export type OtherEnergyConsumptionSelectScalar = {
    id?: boolean
    householdId?: boolean
    emissionFactorId?: boolean
    energyUsageType?: boolean
    amountConsumption?: boolean
    recordedDate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type OtherEnergyConsumptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    household?: boolean | HouseholdDefaultArgs<ExtArgs>
    emissionFactor?: boolean | EmissionFactorDefaultArgs<ExtArgs>
  }


  export type $OtherEnergyConsumptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OtherEnergyConsumption"
    objects: {
      household: Prisma.$HouseholdPayload<ExtArgs>
      emissionFactor: Prisma.$EmissionFactorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      householdId: number
      emissionFactorId: number
      energyUsageType: $Enums.EnergyUsageType
      amountConsumption: Prisma.Decimal
      recordedDate: Date
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["otherEnergyConsumption"]>
    composites: {}
  }


  type OtherEnergyConsumptionGetPayload<S extends boolean | null | undefined | OtherEnergyConsumptionDefaultArgs> = $Result.GetResult<Prisma.$OtherEnergyConsumptionPayload, S>

  type OtherEnergyConsumptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OtherEnergyConsumptionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OtherEnergyConsumptionCountAggregateInputType | true
    }

  export interface OtherEnergyConsumptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OtherEnergyConsumption'], meta: { name: 'OtherEnergyConsumption' } }
    /**
     * Find zero or one OtherEnergyConsumption that matches the filter.
     * @param {OtherEnergyConsumptionFindUniqueArgs} args - Arguments to find a OtherEnergyConsumption
     * @example
     * // Get one OtherEnergyConsumption
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OtherEnergyConsumptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OtherEnergyConsumptionFindUniqueArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OtherEnergyConsumption that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OtherEnergyConsumptionFindUniqueOrThrowArgs} args - Arguments to find a OtherEnergyConsumption
     * @example
     * // Get one OtherEnergyConsumption
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OtherEnergyConsumptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OtherEnergyConsumptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OtherEnergyConsumption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionFindFirstArgs} args - Arguments to find a OtherEnergyConsumption
     * @example
     * // Get one OtherEnergyConsumption
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OtherEnergyConsumptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OtherEnergyConsumptionFindFirstArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OtherEnergyConsumption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionFindFirstOrThrowArgs} args - Arguments to find a OtherEnergyConsumption
     * @example
     * // Get one OtherEnergyConsumption
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OtherEnergyConsumptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OtherEnergyConsumptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OtherEnergyConsumptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OtherEnergyConsumptions
     * const otherEnergyConsumptions = await prisma.otherEnergyConsumption.findMany()
     * 
     * // Get first 10 OtherEnergyConsumptions
     * const otherEnergyConsumptions = await prisma.otherEnergyConsumption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otherEnergyConsumptionWithIdOnly = await prisma.otherEnergyConsumption.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OtherEnergyConsumptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OtherEnergyConsumptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OtherEnergyConsumption.
     * @param {OtherEnergyConsumptionCreateArgs} args - Arguments to create a OtherEnergyConsumption.
     * @example
     * // Create one OtherEnergyConsumption
     * const OtherEnergyConsumption = await prisma.otherEnergyConsumption.create({
     *   data: {
     *     // ... data to create a OtherEnergyConsumption
     *   }
     * })
     * 
    **/
    create<T extends OtherEnergyConsumptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OtherEnergyConsumptionCreateArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OtherEnergyConsumptions.
     *     @param {OtherEnergyConsumptionCreateManyArgs} args - Arguments to create many OtherEnergyConsumptions.
     *     @example
     *     // Create many OtherEnergyConsumptions
     *     const otherEnergyConsumption = await prisma.otherEnergyConsumption.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OtherEnergyConsumptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OtherEnergyConsumptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OtherEnergyConsumption.
     * @param {OtherEnergyConsumptionDeleteArgs} args - Arguments to delete one OtherEnergyConsumption.
     * @example
     * // Delete one OtherEnergyConsumption
     * const OtherEnergyConsumption = await prisma.otherEnergyConsumption.delete({
     *   where: {
     *     // ... filter to delete one OtherEnergyConsumption
     *   }
     * })
     * 
    **/
    delete<T extends OtherEnergyConsumptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OtherEnergyConsumptionDeleteArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OtherEnergyConsumption.
     * @param {OtherEnergyConsumptionUpdateArgs} args - Arguments to update one OtherEnergyConsumption.
     * @example
     * // Update one OtherEnergyConsumption
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OtherEnergyConsumptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OtherEnergyConsumptionUpdateArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OtherEnergyConsumptions.
     * @param {OtherEnergyConsumptionDeleteManyArgs} args - Arguments to filter OtherEnergyConsumptions to delete.
     * @example
     * // Delete a few OtherEnergyConsumptions
     * const { count } = await prisma.otherEnergyConsumption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OtherEnergyConsumptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OtherEnergyConsumptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtherEnergyConsumptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OtherEnergyConsumptions
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OtherEnergyConsumptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OtherEnergyConsumptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OtherEnergyConsumption.
     * @param {OtherEnergyConsumptionUpsertArgs} args - Arguments to update or create a OtherEnergyConsumption.
     * @example
     * // Update or create a OtherEnergyConsumption
     * const otherEnergyConsumption = await prisma.otherEnergyConsumption.upsert({
     *   create: {
     *     // ... data to create a OtherEnergyConsumption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OtherEnergyConsumption we want to update
     *   }
     * })
    **/
    upsert<T extends OtherEnergyConsumptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OtherEnergyConsumptionUpsertArgs<ExtArgs>>
    ): Prisma__OtherEnergyConsumptionClient<$Result.GetResult<Prisma.$OtherEnergyConsumptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OtherEnergyConsumptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionCountArgs} args - Arguments to filter OtherEnergyConsumptions to count.
     * @example
     * // Count the number of OtherEnergyConsumptions
     * const count = await prisma.otherEnergyConsumption.count({
     *   where: {
     *     // ... the filter for the OtherEnergyConsumptions we want to count
     *   }
     * })
    **/
    count<T extends OtherEnergyConsumptionCountArgs>(
      args?: Subset<T, OtherEnergyConsumptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtherEnergyConsumptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OtherEnergyConsumption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtherEnergyConsumptionAggregateArgs>(args: Subset<T, OtherEnergyConsumptionAggregateArgs>): Prisma.PrismaPromise<GetOtherEnergyConsumptionAggregateType<T>>

    /**
     * Group by OtherEnergyConsumption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherEnergyConsumptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtherEnergyConsumptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtherEnergyConsumptionGroupByArgs['orderBy'] }
        : { orderBy?: OtherEnergyConsumptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtherEnergyConsumptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtherEnergyConsumptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OtherEnergyConsumption model
   */
  readonly fields: OtherEnergyConsumptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OtherEnergyConsumption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtherEnergyConsumptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    household<T extends HouseholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseholdDefaultArgs<ExtArgs>>): Prisma__HouseholdClient<$Result.GetResult<Prisma.$HouseholdPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    emissionFactor<T extends EmissionFactorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmissionFactorDefaultArgs<ExtArgs>>): Prisma__EmissionFactorClient<$Result.GetResult<Prisma.$EmissionFactorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OtherEnergyConsumption model
   */ 
  interface OtherEnergyConsumptionFieldRefs {
    readonly id: FieldRef<"OtherEnergyConsumption", 'Int'>
    readonly householdId: FieldRef<"OtherEnergyConsumption", 'Int'>
    readonly emissionFactorId: FieldRef<"OtherEnergyConsumption", 'Int'>
    readonly energyUsageType: FieldRef<"OtherEnergyConsumption", 'EnergyUsageType'>
    readonly amountConsumption: FieldRef<"OtherEnergyConsumption", 'Decimal'>
    readonly recordedDate: FieldRef<"OtherEnergyConsumption", 'DateTime'>
    readonly createdAt: FieldRef<"OtherEnergyConsumption", 'DateTime'>
    readonly createdBy: FieldRef<"OtherEnergyConsumption", 'DateTime'>
    readonly updatedAt: FieldRef<"OtherEnergyConsumption", 'DateTime'>
    readonly updatedBy: FieldRef<"OtherEnergyConsumption", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * OtherEnergyConsumption findUnique
   */
  export type OtherEnergyConsumptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which OtherEnergyConsumption to fetch.
     */
    where: OtherEnergyConsumptionWhereUniqueInput
  }


  /**
   * OtherEnergyConsumption findUniqueOrThrow
   */
  export type OtherEnergyConsumptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which OtherEnergyConsumption to fetch.
     */
    where: OtherEnergyConsumptionWhereUniqueInput
  }


  /**
   * OtherEnergyConsumption findFirst
   */
  export type OtherEnergyConsumptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which OtherEnergyConsumption to fetch.
     */
    where?: OtherEnergyConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherEnergyConsumptions to fetch.
     */
    orderBy?: OtherEnergyConsumptionOrderByWithRelationInput | OtherEnergyConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtherEnergyConsumptions.
     */
    cursor?: OtherEnergyConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherEnergyConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherEnergyConsumptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtherEnergyConsumptions.
     */
    distinct?: OtherEnergyConsumptionScalarFieldEnum | OtherEnergyConsumptionScalarFieldEnum[]
  }


  /**
   * OtherEnergyConsumption findFirstOrThrow
   */
  export type OtherEnergyConsumptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which OtherEnergyConsumption to fetch.
     */
    where?: OtherEnergyConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherEnergyConsumptions to fetch.
     */
    orderBy?: OtherEnergyConsumptionOrderByWithRelationInput | OtherEnergyConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtherEnergyConsumptions.
     */
    cursor?: OtherEnergyConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherEnergyConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherEnergyConsumptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtherEnergyConsumptions.
     */
    distinct?: OtherEnergyConsumptionScalarFieldEnum | OtherEnergyConsumptionScalarFieldEnum[]
  }


  /**
   * OtherEnergyConsumption findMany
   */
  export type OtherEnergyConsumptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which OtherEnergyConsumptions to fetch.
     */
    where?: OtherEnergyConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherEnergyConsumptions to fetch.
     */
    orderBy?: OtherEnergyConsumptionOrderByWithRelationInput | OtherEnergyConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OtherEnergyConsumptions.
     */
    cursor?: OtherEnergyConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherEnergyConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherEnergyConsumptions.
     */
    skip?: number
    distinct?: OtherEnergyConsumptionScalarFieldEnum | OtherEnergyConsumptionScalarFieldEnum[]
  }


  /**
   * OtherEnergyConsumption create
   */
  export type OtherEnergyConsumptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * The data needed to create a OtherEnergyConsumption.
     */
    data: XOR<OtherEnergyConsumptionCreateInput, OtherEnergyConsumptionUncheckedCreateInput>
  }


  /**
   * OtherEnergyConsumption createMany
   */
  export type OtherEnergyConsumptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OtherEnergyConsumptions.
     */
    data: OtherEnergyConsumptionCreateManyInput | OtherEnergyConsumptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OtherEnergyConsumption update
   */
  export type OtherEnergyConsumptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * The data needed to update a OtherEnergyConsumption.
     */
    data: XOR<OtherEnergyConsumptionUpdateInput, OtherEnergyConsumptionUncheckedUpdateInput>
    /**
     * Choose, which OtherEnergyConsumption to update.
     */
    where: OtherEnergyConsumptionWhereUniqueInput
  }


  /**
   * OtherEnergyConsumption updateMany
   */
  export type OtherEnergyConsumptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OtherEnergyConsumptions.
     */
    data: XOR<OtherEnergyConsumptionUpdateManyMutationInput, OtherEnergyConsumptionUncheckedUpdateManyInput>
    /**
     * Filter which OtherEnergyConsumptions to update
     */
    where?: OtherEnergyConsumptionWhereInput
  }


  /**
   * OtherEnergyConsumption upsert
   */
  export type OtherEnergyConsumptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * The filter to search for the OtherEnergyConsumption to update in case it exists.
     */
    where: OtherEnergyConsumptionWhereUniqueInput
    /**
     * In case the OtherEnergyConsumption found by the `where` argument doesn't exist, create a new OtherEnergyConsumption with this data.
     */
    create: XOR<OtherEnergyConsumptionCreateInput, OtherEnergyConsumptionUncheckedCreateInput>
    /**
     * In case the OtherEnergyConsumption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtherEnergyConsumptionUpdateInput, OtherEnergyConsumptionUncheckedUpdateInput>
  }


  /**
   * OtherEnergyConsumption delete
   */
  export type OtherEnergyConsumptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
    /**
     * Filter which OtherEnergyConsumption to delete.
     */
    where: OtherEnergyConsumptionWhereUniqueInput
  }


  /**
   * OtherEnergyConsumption deleteMany
   */
  export type OtherEnergyConsumptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtherEnergyConsumptions to delete
     */
    where?: OtherEnergyConsumptionWhereInput
  }


  /**
   * OtherEnergyConsumption without action
   */
  export type OtherEnergyConsumptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherEnergyConsumption
     */
    select?: OtherEnergyConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtherEnergyConsumptionInclude<ExtArgs> | null
  }



  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    profileImg: string | null
    isStaff: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    profileImg: string | null
    isStaff: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    email: number
    password: number
    phoneNumber: number
    profileImg: number
    isStaff: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    phoneNumber?: true
    profileImg?: true
    isStaff?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    phoneNumber?: true
    profileImg?: true
    isStaff?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    phoneNumber?: true
    profileImg?: true
    isStaff?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    firstname: string
    lastname: string
    email: string
    password: string
    phoneNumber: string
    profileImg: string
    isStaff: boolean
    isActive: boolean
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    profileImg?: boolean
    isStaff?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    profilePermissions?: boolean | Profile$profilePermissionsArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    profileImg?: boolean
    isStaff?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profilePermissions?: boolean | Profile$profilePermissionsArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      profilePermissions: Prisma.$ProfilePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstname: string
      lastname: string
      email: string
      password: string
      phoneNumber: string
      profileImg: string
      isStaff: boolean
      isActive: boolean
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }


  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    profilePermissions<T extends Profile$profilePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Profile$profilePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly firstname: FieldRef<"Profile", 'String'>
    readonly lastname: FieldRef<"Profile", 'String'>
    readonly email: FieldRef<"Profile", 'String'>
    readonly password: FieldRef<"Profile", 'String'>
    readonly phoneNumber: FieldRef<"Profile", 'String'>
    readonly profileImg: FieldRef<"Profile", 'String'>
    readonly isStaff: FieldRef<"Profile", 'Boolean'>
    readonly isActive: FieldRef<"Profile", 'Boolean'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly createdBy: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedBy: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile.profilePermissions
   */
  export type Profile$profilePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    where?: ProfilePermissionWhereInput
    orderBy?: ProfilePermissionOrderByWithRelationInput | ProfilePermissionOrderByWithRelationInput[]
    cursor?: ProfilePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfilePermissionScalarFieldEnum | ProfilePermissionScalarFieldEnum[]
  }


  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
  }



  /**
   * Model ProfilePermission
   */

  export type AggregateProfilePermission = {
    _count: ProfilePermissionCountAggregateOutputType | null
    _avg: ProfilePermissionAvgAggregateOutputType | null
    _sum: ProfilePermissionSumAggregateOutputType | null
    _min: ProfilePermissionMinAggregateOutputType | null
    _max: ProfilePermissionMaxAggregateOutputType | null
  }

  export type ProfilePermissionAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
    teamId: number | null
  }

  export type ProfilePermissionSumAggregateOutputType = {
    id: number | null
    profileId: number | null
    teamId: number | null
  }

  export type ProfilePermissionMinAggregateOutputType = {
    id: number | null
    profileId: number | null
    teamId: number | null
    canEditSubdistrict: boolean | null
    canGrant: boolean | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type ProfilePermissionMaxAggregateOutputType = {
    id: number | null
    profileId: number | null
    teamId: number | null
    canEditSubdistrict: boolean | null
    canGrant: boolean | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type ProfilePermissionCountAggregateOutputType = {
    id: number
    profileId: number
    teamId: number
    canEditSubdistrict: number
    canGrant: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ProfilePermissionAvgAggregateInputType = {
    id?: true
    profileId?: true
    teamId?: true
  }

  export type ProfilePermissionSumAggregateInputType = {
    id?: true
    profileId?: true
    teamId?: true
  }

  export type ProfilePermissionMinAggregateInputType = {
    id?: true
    profileId?: true
    teamId?: true
    canEditSubdistrict?: true
    canGrant?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProfilePermissionMaxAggregateInputType = {
    id?: true
    profileId?: true
    teamId?: true
    canEditSubdistrict?: true
    canGrant?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProfilePermissionCountAggregateInputType = {
    id?: true
    profileId?: true
    teamId?: true
    canEditSubdistrict?: true
    canGrant?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ProfilePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePermission to aggregate.
     */
    where?: ProfilePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePermissions to fetch.
     */
    orderBy?: ProfilePermissionOrderByWithRelationInput | ProfilePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilePermissions
    **/
    _count?: true | ProfilePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilePermissionMaxAggregateInputType
  }

  export type GetProfilePermissionAggregateType<T extends ProfilePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilePermission[P]>
      : GetScalarType<T[P], AggregateProfilePermission[P]>
  }




  export type ProfilePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePermissionWhereInput
    orderBy?: ProfilePermissionOrderByWithAggregationInput | ProfilePermissionOrderByWithAggregationInput[]
    by: ProfilePermissionScalarFieldEnum[] | ProfilePermissionScalarFieldEnum
    having?: ProfilePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilePermissionCountAggregateInputType | true
    _avg?: ProfilePermissionAvgAggregateInputType
    _sum?: ProfilePermissionSumAggregateInputType
    _min?: ProfilePermissionMinAggregateInputType
    _max?: ProfilePermissionMaxAggregateInputType
  }

  export type ProfilePermissionGroupByOutputType = {
    id: number
    profileId: number
    teamId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: ProfilePermissionCountAggregateOutputType | null
    _avg: ProfilePermissionAvgAggregateOutputType | null
    _sum: ProfilePermissionSumAggregateOutputType | null
    _min: ProfilePermissionMinAggregateOutputType | null
    _max: ProfilePermissionMaxAggregateOutputType | null
  }

  type GetProfilePermissionGroupByPayload<T extends ProfilePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilePermissionGroupByOutputType[P]>
        }
      >
    >


  export type ProfilePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    teamId?: boolean
    canEditSubdistrict?: boolean
    canGrant?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilePermission"]>

  export type ProfilePermissionSelectScalar = {
    id?: boolean
    profileId?: boolean
    teamId?: boolean
    canEditSubdistrict?: boolean
    canGrant?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ProfilePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }


  export type $ProfilePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilePermission"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      profileId: number
      teamId: number
      canEditSubdistrict: boolean
      canGrant: boolean
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["profilePermission"]>
    composites: {}
  }


  type ProfilePermissionGetPayload<S extends boolean | null | undefined | ProfilePermissionDefaultArgs> = $Result.GetResult<Prisma.$ProfilePermissionPayload, S>

  type ProfilePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfilePermissionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfilePermissionCountAggregateInputType | true
    }

  export interface ProfilePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilePermission'], meta: { name: 'ProfilePermission' } }
    /**
     * Find zero or one ProfilePermission that matches the filter.
     * @param {ProfilePermissionFindUniqueArgs} args - Arguments to find a ProfilePermission
     * @example
     * // Get one ProfilePermission
     * const profilePermission = await prisma.profilePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfilePermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilePermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProfilePermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfilePermissionFindUniqueOrThrowArgs} args - Arguments to find a ProfilePermission
     * @example
     * // Get one ProfilePermission
     * const profilePermission = await prisma.profilePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfilePermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilePermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProfilePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionFindFirstArgs} args - Arguments to find a ProfilePermission
     * @example
     * // Get one ProfilePermission
     * const profilePermission = await prisma.profilePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfilePermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilePermissionFindFirstArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProfilePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionFindFirstOrThrowArgs} args - Arguments to find a ProfilePermission
     * @example
     * // Get one ProfilePermission
     * const profilePermission = await prisma.profilePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfilePermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilePermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProfilePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilePermissions
     * const profilePermissions = await prisma.profilePermission.findMany()
     * 
     * // Get first 10 ProfilePermissions
     * const profilePermissions = await prisma.profilePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilePermissionWithIdOnly = await prisma.profilePermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfilePermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilePermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProfilePermission.
     * @param {ProfilePermissionCreateArgs} args - Arguments to create a ProfilePermission.
     * @example
     * // Create one ProfilePermission
     * const ProfilePermission = await prisma.profilePermission.create({
     *   data: {
     *     // ... data to create a ProfilePermission
     *   }
     * })
     * 
    **/
    create<T extends ProfilePermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilePermissionCreateArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProfilePermissions.
     *     @param {ProfilePermissionCreateManyArgs} args - Arguments to create many ProfilePermissions.
     *     @example
     *     // Create many ProfilePermissions
     *     const profilePermission = await prisma.profilePermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfilePermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilePermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfilePermission.
     * @param {ProfilePermissionDeleteArgs} args - Arguments to delete one ProfilePermission.
     * @example
     * // Delete one ProfilePermission
     * const ProfilePermission = await prisma.profilePermission.delete({
     *   where: {
     *     // ... filter to delete one ProfilePermission
     *   }
     * })
     * 
    **/
    delete<T extends ProfilePermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilePermissionDeleteArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProfilePermission.
     * @param {ProfilePermissionUpdateArgs} args - Arguments to update one ProfilePermission.
     * @example
     * // Update one ProfilePermission
     * const profilePermission = await prisma.profilePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfilePermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilePermissionUpdateArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProfilePermissions.
     * @param {ProfilePermissionDeleteManyArgs} args - Arguments to filter ProfilePermissions to delete.
     * @example
     * // Delete a few ProfilePermissions
     * const { count } = await prisma.profilePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfilePermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilePermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilePermissions
     * const profilePermission = await prisma.profilePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfilePermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilePermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfilePermission.
     * @param {ProfilePermissionUpsertArgs} args - Arguments to update or create a ProfilePermission.
     * @example
     * // Update or create a ProfilePermission
     * const profilePermission = await prisma.profilePermission.upsert({
     *   create: {
     *     // ... data to create a ProfilePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilePermission we want to update
     *   }
     * })
    **/
    upsert<T extends ProfilePermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilePermissionUpsertArgs<ExtArgs>>
    ): Prisma__ProfilePermissionClient<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProfilePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionCountArgs} args - Arguments to filter ProfilePermissions to count.
     * @example
     * // Count the number of ProfilePermissions
     * const count = await prisma.profilePermission.count({
     *   where: {
     *     // ... the filter for the ProfilePermissions we want to count
     *   }
     * })
    **/
    count<T extends ProfilePermissionCountArgs>(
      args?: Subset<T, ProfilePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilePermissionAggregateArgs>(args: Subset<T, ProfilePermissionAggregateArgs>): Prisma.PrismaPromise<GetProfilePermissionAggregateType<T>>

    /**
     * Group by ProfilePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilePermissionGroupByArgs['orderBy'] }
        : { orderBy?: ProfilePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilePermission model
   */
  readonly fields: ProfilePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProfilePermission model
   */ 
  interface ProfilePermissionFieldRefs {
    readonly id: FieldRef<"ProfilePermission", 'Int'>
    readonly profileId: FieldRef<"ProfilePermission", 'Int'>
    readonly teamId: FieldRef<"ProfilePermission", 'Int'>
    readonly canEditSubdistrict: FieldRef<"ProfilePermission", 'Boolean'>
    readonly canGrant: FieldRef<"ProfilePermission", 'Boolean'>
    readonly createdAt: FieldRef<"ProfilePermission", 'DateTime'>
    readonly createdBy: FieldRef<"ProfilePermission", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfilePermission", 'DateTime'>
    readonly updatedBy: FieldRef<"ProfilePermission", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ProfilePermission findUnique
   */
  export type ProfilePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePermission to fetch.
     */
    where: ProfilePermissionWhereUniqueInput
  }


  /**
   * ProfilePermission findUniqueOrThrow
   */
  export type ProfilePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePermission to fetch.
     */
    where: ProfilePermissionWhereUniqueInput
  }


  /**
   * ProfilePermission findFirst
   */
  export type ProfilePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePermission to fetch.
     */
    where?: ProfilePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePermissions to fetch.
     */
    orderBy?: ProfilePermissionOrderByWithRelationInput | ProfilePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePermissions.
     */
    cursor?: ProfilePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePermissions.
     */
    distinct?: ProfilePermissionScalarFieldEnum | ProfilePermissionScalarFieldEnum[]
  }


  /**
   * ProfilePermission findFirstOrThrow
   */
  export type ProfilePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePermission to fetch.
     */
    where?: ProfilePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePermissions to fetch.
     */
    orderBy?: ProfilePermissionOrderByWithRelationInput | ProfilePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePermissions.
     */
    cursor?: ProfilePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePermissions.
     */
    distinct?: ProfilePermissionScalarFieldEnum | ProfilePermissionScalarFieldEnum[]
  }


  /**
   * ProfilePermission findMany
   */
  export type ProfilePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePermissions to fetch.
     */
    where?: ProfilePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePermissions to fetch.
     */
    orderBy?: ProfilePermissionOrderByWithRelationInput | ProfilePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilePermissions.
     */
    cursor?: ProfilePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePermissions.
     */
    skip?: number
    distinct?: ProfilePermissionScalarFieldEnum | ProfilePermissionScalarFieldEnum[]
  }


  /**
   * ProfilePermission create
   */
  export type ProfilePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilePermission.
     */
    data: XOR<ProfilePermissionCreateInput, ProfilePermissionUncheckedCreateInput>
  }


  /**
   * ProfilePermission createMany
   */
  export type ProfilePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilePermissions.
     */
    data: ProfilePermissionCreateManyInput | ProfilePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProfilePermission update
   */
  export type ProfilePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilePermission.
     */
    data: XOR<ProfilePermissionUpdateInput, ProfilePermissionUncheckedUpdateInput>
    /**
     * Choose, which ProfilePermission to update.
     */
    where: ProfilePermissionWhereUniqueInput
  }


  /**
   * ProfilePermission updateMany
   */
  export type ProfilePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilePermissions.
     */
    data: XOR<ProfilePermissionUpdateManyMutationInput, ProfilePermissionUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePermissions to update
     */
    where?: ProfilePermissionWhereInput
  }


  /**
   * ProfilePermission upsert
   */
  export type ProfilePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilePermission to update in case it exists.
     */
    where: ProfilePermissionWhereUniqueInput
    /**
     * In case the ProfilePermission found by the `where` argument doesn't exist, create a new ProfilePermission with this data.
     */
    create: XOR<ProfilePermissionCreateInput, ProfilePermissionUncheckedCreateInput>
    /**
     * In case the ProfilePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilePermissionUpdateInput, ProfilePermissionUncheckedUpdateInput>
  }


  /**
   * ProfilePermission delete
   */
  export type ProfilePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    /**
     * Filter which ProfilePermission to delete.
     */
    where: ProfilePermissionWhereUniqueInput
  }


  /**
   * ProfilePermission deleteMany
   */
  export type ProfilePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePermissions to delete
     */
    where?: ProfilePermissionWhereInput
  }


  /**
   * ProfilePermission without action
   */
  export type ProfilePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
  }



  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    addressId: number | null
    title: string | null
    maximumLevel: $Enums.MaximumLevel | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    addressId: number | null
    title: string | null
    maximumLevel: $Enums.MaximumLevel | null
    createdAt: Date | null
    createdBy: Date | null
    updatedAt: Date | null
    updatedBy: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    addressId: number
    title: number
    maximumLevel: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    addressId?: true
    title?: true
    maximumLevel?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    addressId?: true
    title?: true
    maximumLevel?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    addressId?: true
    title?: true
    maximumLevel?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    addressId: number
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt: Date
    createdBy: Date
    updatedAt: Date
    updatedBy: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressId?: boolean
    title?: boolean
    maximumLevel?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profilePermissions?: boolean | Team$profilePermissionsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    addressId?: boolean
    title?: boolean
    maximumLevel?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profilePermissions?: boolean | Team$profilePermissionsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>
      profilePermissions: Prisma.$ProfilePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      addressId: number
      title: string
      maximumLevel: $Enums.MaximumLevel
      createdAt: Date
      createdBy: Date
      updatedAt: Date
      updatedBy: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }


  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamCreateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    profilePermissions<T extends Team$profilePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Team$profilePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly addressId: FieldRef<"Team", 'Int'>
    readonly title: FieldRef<"Team", 'String'>
    readonly maximumLevel: FieldRef<"Team", 'MaximumLevel'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly createdBy: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
    readonly updatedBy: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }


  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }


  /**
   * Team.profilePermissions
   */
  export type Team$profilePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePermission
     */
    select?: ProfilePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilePermissionInclude<ExtArgs> | null
    where?: ProfilePermissionWhereInput
    orderBy?: ProfilePermissionOrderByWithRelationInput | ProfilePermissionOrderByWithRelationInput[]
    cursor?: ProfilePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfilePermissionScalarFieldEnum | ProfilePermissionScalarFieldEnum[]
  }


  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AddressScalarFieldEnum: {
    id: 'id',
    regionName: 'regionName',
    provinceName: 'provinceName',
    districtName: 'districtName',
    subdistrictName: 'subdistrictName',
    zipcode: 'zipcode'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const HouseholdScalarFieldEnum: {
    id: 'id',
    addressId: 'addressId',
    addressDetail: 'addressDetail',
    houseType: 'houseType',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type HouseholdScalarFieldEnum = (typeof HouseholdScalarFieldEnum)[keyof typeof HouseholdScalarFieldEnum]


  export const CarbonFootprintScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    householdElectricityId: 'householdElectricityId',
    householdWaterSupplyId: 'householdWaterSupplyId',
    householdOtherEnergyId: 'householdOtherEnergyId',
    transportaionId: 'transportaionId',
    totalCarbonFootprint: 'totalCarbonFootprint',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type CarbonFootprintScalarFieldEnum = (typeof CarbonFootprintScalarFieldEnum)[keyof typeof CarbonFootprintScalarFieldEnum]


  export const EmissionFactorScalarFieldEnum: {
    id: 'id',
    sourceType: 'sourceType',
    name: 'name',
    carbonCoefficient: 'carbonCoefficient',
    unit: 'unit',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type EmissionFactorScalarFieldEnum = (typeof EmissionFactorScalarFieldEnum)[keyof typeof EmissionFactorScalarFieldEnum]


  export const VehiclePropertyScalarFieldEnum: {
    id: 'id',
    modelType: 'modelType',
    consumptionRate: 'consumptionRate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type VehiclePropertyScalarFieldEnum = (typeof VehiclePropertyScalarFieldEnum)[keyof typeof VehiclePropertyScalarFieldEnum]


  export const PrivateVehicleScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    emissionFactorId: 'emissionFactorId',
    vehiclePropertyId: 'vehiclePropertyId',
    startMonthDistance: 'startMonthDistance',
    endMonthDistance: 'endMonthDistance',
    fuelComsumptionPerMonth: 'fuelComsumptionPerMonth',
    isRegularMaintain: 'isRegularMaintain',
    carbonEmissionEq: 'carbonEmissionEq',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type PrivateVehicleScalarFieldEnum = (typeof PrivateVehicleScalarFieldEnum)[keyof typeof PrivateVehicleScalarFieldEnum]


  export const TransportationScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    totalCarbonFootprint: 'totalCarbonFootprint',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type TransportationScalarFieldEnum = (typeof TransportationScalarFieldEnum)[keyof typeof TransportationScalarFieldEnum]


  export const HouseholdElectricityScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    totalCarbonFootprint: 'totalCarbonFootprint',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type HouseholdElectricityScalarFieldEnum = (typeof HouseholdElectricityScalarFieldEnum)[keyof typeof HouseholdElectricityScalarFieldEnum]


  export const ElectricityBillScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    emissionFactorId: 'emissionFactorId',
    amountConsumption: 'amountConsumption',
    electricityMeter: 'electricityMeter',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ElectricityBillScalarFieldEnum = (typeof ElectricityBillScalarFieldEnum)[keyof typeof ElectricityBillScalarFieldEnum]


  export const HouseholdWaterSupplyScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    totalCarbonFootprint: 'totalCarbonFootprint',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type HouseholdWaterSupplyScalarFieldEnum = (typeof HouseholdWaterSupplyScalarFieldEnum)[keyof typeof HouseholdWaterSupplyScalarFieldEnum]


  export const WaterBillScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    emissionFactorId: 'emissionFactorId',
    amountConsumption: 'amountConsumption',
    waterMeter: 'waterMeter',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type WaterBillScalarFieldEnum = (typeof WaterBillScalarFieldEnum)[keyof typeof WaterBillScalarFieldEnum]


  export const HouseholdOtherEnergyScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    totalCarbonFootprint: 'totalCarbonFootprint',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type HouseholdOtherEnergyScalarFieldEnum = (typeof HouseholdOtherEnergyScalarFieldEnum)[keyof typeof HouseholdOtherEnergyScalarFieldEnum]


  export const OtherEnergyConsumptionScalarFieldEnum: {
    id: 'id',
    householdId: 'householdId',
    emissionFactorId: 'emissionFactorId',
    energyUsageType: 'energyUsageType',
    amountConsumption: 'amountConsumption',
    recordedDate: 'recordedDate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type OtherEnergyConsumptionScalarFieldEnum = (typeof OtherEnergyConsumptionScalarFieldEnum)[keyof typeof OtherEnergyConsumptionScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    profileImg: 'profileImg',
    isStaff: 'isStaff',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ProfilePermissionScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    teamId: 'teamId',
    canEditSubdistrict: 'canEditSubdistrict',
    canGrant: 'canGrant',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ProfilePermissionScalarFieldEnum = (typeof ProfilePermissionScalarFieldEnum)[keyof typeof ProfilePermissionScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    addressId: 'addressId',
    title: 'title',
    maximumLevel: 'maximumLevel',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'HouseType'
   */
  export type EnumHouseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HouseType'>
    


  /**
   * Reference to a field of type 'HouseType[]'
   */
  export type ListEnumHouseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HouseType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'SourceType'
   */
  export type EnumSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SourceType'>
    


  /**
   * Reference to a field of type 'SourceType[]'
   */
  export type ListEnumSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SourceType[]'>
    


  /**
   * Reference to a field of type 'ModelType'
   */
  export type EnumModelTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ModelType'>
    


  /**
   * Reference to a field of type 'ModelType[]'
   */
  export type ListEnumModelTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ModelType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'EnergyUsageType'
   */
  export type EnumEnergyUsageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnergyUsageType'>
    


  /**
   * Reference to a field of type 'EnergyUsageType[]'
   */
  export type ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnergyUsageType[]'>
    


  /**
   * Reference to a field of type 'MaximumLevel'
   */
  export type EnumMaximumLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaximumLevel'>
    


  /**
   * Reference to a field of type 'MaximumLevel[]'
   */
  export type ListEnumMaximumLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaximumLevel[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: IntFilter<"Address"> | number
    regionName?: StringFilter<"Address"> | string
    provinceName?: StringFilter<"Address"> | string
    districtName?: StringFilter<"Address"> | string
    subdistrictName?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    households?: HouseholdListRelationFilter
    teams?: TeamListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    regionName?: SortOrder
    provinceName?: SortOrder
    districtName?: SortOrder
    subdistrictName?: SortOrder
    zipcode?: SortOrder
    households?: HouseholdOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    regionName?: StringFilter<"Address"> | string
    provinceName?: StringFilter<"Address"> | string
    districtName?: StringFilter<"Address"> | string
    subdistrictName?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    households?: HouseholdListRelationFilter
    teams?: TeamListRelationFilter
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    regionName?: SortOrder
    provinceName?: SortOrder
    districtName?: SortOrder
    subdistrictName?: SortOrder
    zipcode?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Address"> | number
    regionName?: StringWithAggregatesFilter<"Address"> | string
    provinceName?: StringWithAggregatesFilter<"Address"> | string
    districtName?: StringWithAggregatesFilter<"Address"> | string
    subdistrictName?: StringWithAggregatesFilter<"Address"> | string
    zipcode?: StringWithAggregatesFilter<"Address"> | string
  }

  export type HouseholdWhereInput = {
    AND?: HouseholdWhereInput | HouseholdWhereInput[]
    OR?: HouseholdWhereInput[]
    NOT?: HouseholdWhereInput | HouseholdWhereInput[]
    id?: IntFilter<"Household"> | number
    addressId?: IntFilter<"Household"> | number
    addressDetail?: StringFilter<"Household"> | string
    houseType?: EnumHouseTypeFilter<"Household"> | $Enums.HouseType
    recordedDate?: DateTimeFilter<"Household"> | Date | string
    createdAt?: DateTimeFilter<"Household"> | Date | string
    createdBy?: DateTimeFilter<"Household"> | Date | string
    updatedAt?: DateTimeFilter<"Household"> | Date | string
    updatedBy?: DateTimeFilter<"Household"> | Date | string
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    carbonFootprints?: CarbonFootprintListRelationFilter
    privateVehicles?: PrivateVehicleListRelationFilter
    transportations?: TransportationListRelationFilter
    householdElectricities?: HouseholdElectricityListRelationFilter
    waterBills?: WaterBillListRelationFilter
    householdOtherEnergies?: HouseholdOtherEnergyListRelationFilter
    electricityBills?: ElectricityBillListRelationFilter
    householdWaterSupplies?: HouseholdWaterSupplyListRelationFilter
    otherEnergyConsumptions?: OtherEnergyConsumptionListRelationFilter
  }

  export type HouseholdOrderByWithRelationInput = {
    id?: SortOrder
    addressId?: SortOrder
    addressDetail?: SortOrder
    houseType?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    address?: AddressOrderByWithRelationInput
    carbonFootprints?: CarbonFootprintOrderByRelationAggregateInput
    privateVehicles?: PrivateVehicleOrderByRelationAggregateInput
    transportations?: TransportationOrderByRelationAggregateInput
    householdElectricities?: HouseholdElectricityOrderByRelationAggregateInput
    waterBills?: WaterBillOrderByRelationAggregateInput
    householdOtherEnergies?: HouseholdOtherEnergyOrderByRelationAggregateInput
    electricityBills?: ElectricityBillOrderByRelationAggregateInput
    householdWaterSupplies?: HouseholdWaterSupplyOrderByRelationAggregateInput
    otherEnergyConsumptions?: OtherEnergyConsumptionOrderByRelationAggregateInput
  }

  export type HouseholdWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HouseholdWhereInput | HouseholdWhereInput[]
    OR?: HouseholdWhereInput[]
    NOT?: HouseholdWhereInput | HouseholdWhereInput[]
    addressId?: IntFilter<"Household"> | number
    addressDetail?: StringFilter<"Household"> | string
    houseType?: EnumHouseTypeFilter<"Household"> | $Enums.HouseType
    recordedDate?: DateTimeFilter<"Household"> | Date | string
    createdAt?: DateTimeFilter<"Household"> | Date | string
    createdBy?: DateTimeFilter<"Household"> | Date | string
    updatedAt?: DateTimeFilter<"Household"> | Date | string
    updatedBy?: DateTimeFilter<"Household"> | Date | string
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    carbonFootprints?: CarbonFootprintListRelationFilter
    privateVehicles?: PrivateVehicleListRelationFilter
    transportations?: TransportationListRelationFilter
    householdElectricities?: HouseholdElectricityListRelationFilter
    waterBills?: WaterBillListRelationFilter
    householdOtherEnergies?: HouseholdOtherEnergyListRelationFilter
    electricityBills?: ElectricityBillListRelationFilter
    householdWaterSupplies?: HouseholdWaterSupplyListRelationFilter
    otherEnergyConsumptions?: OtherEnergyConsumptionListRelationFilter
  }, "id">

  export type HouseholdOrderByWithAggregationInput = {
    id?: SortOrder
    addressId?: SortOrder
    addressDetail?: SortOrder
    houseType?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: HouseholdCountOrderByAggregateInput
    _avg?: HouseholdAvgOrderByAggregateInput
    _max?: HouseholdMaxOrderByAggregateInput
    _min?: HouseholdMinOrderByAggregateInput
    _sum?: HouseholdSumOrderByAggregateInput
  }

  export type HouseholdScalarWhereWithAggregatesInput = {
    AND?: HouseholdScalarWhereWithAggregatesInput | HouseholdScalarWhereWithAggregatesInput[]
    OR?: HouseholdScalarWhereWithAggregatesInput[]
    NOT?: HouseholdScalarWhereWithAggregatesInput | HouseholdScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Household"> | number
    addressId?: IntWithAggregatesFilter<"Household"> | number
    addressDetail?: StringWithAggregatesFilter<"Household"> | string
    houseType?: EnumHouseTypeWithAggregatesFilter<"Household"> | $Enums.HouseType
    recordedDate?: DateTimeWithAggregatesFilter<"Household"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Household"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"Household"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Household"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"Household"> | Date | string
  }

  export type CarbonFootprintWhereInput = {
    AND?: CarbonFootprintWhereInput | CarbonFootprintWhereInput[]
    OR?: CarbonFootprintWhereInput[]
    NOT?: CarbonFootprintWhereInput | CarbonFootprintWhereInput[]
    id?: IntFilter<"CarbonFootprint"> | number
    householdId?: IntFilter<"CarbonFootprint"> | number
    householdElectricityId?: IntFilter<"CarbonFootprint"> | number
    householdWaterSupplyId?: IntFilter<"CarbonFootprint"> | number
    householdOtherEnergyId?: IntFilter<"CarbonFootprint"> | number
    transportaionId?: IntFilter<"CarbonFootprint"> | number
    totalCarbonFootprint?: DecimalFilter<"CarbonFootprint"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"CarbonFootprint"> | Date | string
    createdAt?: DateTimeFilter<"CarbonFootprint"> | Date | string
    createdBy?: DateTimeFilter<"CarbonFootprint"> | Date | string
    updatedAt?: DateTimeFilter<"CarbonFootprint"> | Date | string
    updatedBy?: DateTimeFilter<"CarbonFootprint"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    householdElectricity?: XOR<HouseholdElectricityRelationFilter, HouseholdElectricityWhereInput>
    householdWaterSupply?: XOR<HouseholdWaterSupplyRelationFilter, HouseholdWaterSupplyWhereInput>
    householdOtherEnergy?: XOR<HouseholdOtherEnergyRelationFilter, HouseholdOtherEnergyWhereInput>
    transportation?: XOR<TransportationRelationFilter, TransportationWhereInput>
  }

  export type CarbonFootprintOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    householdElectricity?: HouseholdElectricityOrderByWithRelationInput
    householdWaterSupply?: HouseholdWaterSupplyOrderByWithRelationInput
    householdOtherEnergy?: HouseholdOtherEnergyOrderByWithRelationInput
    transportation?: TransportationOrderByWithRelationInput
  }

  export type CarbonFootprintWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    householdId?: number
    householdElectricityId?: number
    householdWaterSupplyId?: number
    householdOtherEnergyId?: number
    transportaionId?: number
    householdId_recordedDate?: CarbonFootprintHouseholdIdRecordedDateCompoundUniqueInput
    AND?: CarbonFootprintWhereInput | CarbonFootprintWhereInput[]
    OR?: CarbonFootprintWhereInput[]
    NOT?: CarbonFootprintWhereInput | CarbonFootprintWhereInput[]
    totalCarbonFootprint?: DecimalFilter<"CarbonFootprint"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"CarbonFootprint"> | Date | string
    createdAt?: DateTimeFilter<"CarbonFootprint"> | Date | string
    createdBy?: DateTimeFilter<"CarbonFootprint"> | Date | string
    updatedAt?: DateTimeFilter<"CarbonFootprint"> | Date | string
    updatedBy?: DateTimeFilter<"CarbonFootprint"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    householdElectricity?: XOR<HouseholdElectricityRelationFilter, HouseholdElectricityWhereInput>
    householdWaterSupply?: XOR<HouseholdWaterSupplyRelationFilter, HouseholdWaterSupplyWhereInput>
    householdOtherEnergy?: XOR<HouseholdOtherEnergyRelationFilter, HouseholdOtherEnergyWhereInput>
    transportation?: XOR<TransportationRelationFilter, TransportationWhereInput>
  }, "id" | "householdId" | "householdElectricityId" | "householdWaterSupplyId" | "householdOtherEnergyId" | "transportaionId" | "householdId_recordedDate">

  export type CarbonFootprintOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: CarbonFootprintCountOrderByAggregateInput
    _avg?: CarbonFootprintAvgOrderByAggregateInput
    _max?: CarbonFootprintMaxOrderByAggregateInput
    _min?: CarbonFootprintMinOrderByAggregateInput
    _sum?: CarbonFootprintSumOrderByAggregateInput
  }

  export type CarbonFootprintScalarWhereWithAggregatesInput = {
    AND?: CarbonFootprintScalarWhereWithAggregatesInput | CarbonFootprintScalarWhereWithAggregatesInput[]
    OR?: CarbonFootprintScalarWhereWithAggregatesInput[]
    NOT?: CarbonFootprintScalarWhereWithAggregatesInput | CarbonFootprintScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CarbonFootprint"> | number
    householdId?: IntWithAggregatesFilter<"CarbonFootprint"> | number
    householdElectricityId?: IntWithAggregatesFilter<"CarbonFootprint"> | number
    householdWaterSupplyId?: IntWithAggregatesFilter<"CarbonFootprint"> | number
    householdOtherEnergyId?: IntWithAggregatesFilter<"CarbonFootprint"> | number
    transportaionId?: IntWithAggregatesFilter<"CarbonFootprint"> | number
    totalCarbonFootprint?: DecimalWithAggregatesFilter<"CarbonFootprint"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"CarbonFootprint"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CarbonFootprint"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"CarbonFootprint"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CarbonFootprint"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"CarbonFootprint"> | Date | string
  }

  export type EmissionFactorWhereInput = {
    AND?: EmissionFactorWhereInput | EmissionFactorWhereInput[]
    OR?: EmissionFactorWhereInput[]
    NOT?: EmissionFactorWhereInput | EmissionFactorWhereInput[]
    id?: IntFilter<"EmissionFactor"> | number
    sourceType?: EnumSourceTypeFilter<"EmissionFactor"> | $Enums.SourceType
    name?: StringFilter<"EmissionFactor"> | string
    carbonCoefficient?: DecimalFilter<"EmissionFactor"> | Decimal | DecimalJsLike | number | string
    unit?: StringFilter<"EmissionFactor"> | string
    createdAt?: DateTimeFilter<"EmissionFactor"> | Date | string
    createdBy?: DateTimeFilter<"EmissionFactor"> | Date | string
    updatedAt?: DateTimeFilter<"EmissionFactor"> | Date | string
    updatedBy?: DateTimeFilter<"EmissionFactor"> | Date | string
    privateVehicles?: PrivateVehicleListRelationFilter
    electricityBills?: ElectricityBillListRelationFilter
    waterBills?: WaterBillListRelationFilter
    otherEnergyConsumptions?: OtherEnergyConsumptionListRelationFilter
  }

  export type EmissionFactorOrderByWithRelationInput = {
    id?: SortOrder
    sourceType?: SortOrder
    name?: SortOrder
    carbonCoefficient?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    privateVehicles?: PrivateVehicleOrderByRelationAggregateInput
    electricityBills?: ElectricityBillOrderByRelationAggregateInput
    waterBills?: WaterBillOrderByRelationAggregateInput
    otherEnergyConsumptions?: OtherEnergyConsumptionOrderByRelationAggregateInput
  }

  export type EmissionFactorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmissionFactorWhereInput | EmissionFactorWhereInput[]
    OR?: EmissionFactorWhereInput[]
    NOT?: EmissionFactorWhereInput | EmissionFactorWhereInput[]
    sourceType?: EnumSourceTypeFilter<"EmissionFactor"> | $Enums.SourceType
    name?: StringFilter<"EmissionFactor"> | string
    carbonCoefficient?: DecimalFilter<"EmissionFactor"> | Decimal | DecimalJsLike | number | string
    unit?: StringFilter<"EmissionFactor"> | string
    createdAt?: DateTimeFilter<"EmissionFactor"> | Date | string
    createdBy?: DateTimeFilter<"EmissionFactor"> | Date | string
    updatedAt?: DateTimeFilter<"EmissionFactor"> | Date | string
    updatedBy?: DateTimeFilter<"EmissionFactor"> | Date | string
    privateVehicles?: PrivateVehicleListRelationFilter
    electricityBills?: ElectricityBillListRelationFilter
    waterBills?: WaterBillListRelationFilter
    otherEnergyConsumptions?: OtherEnergyConsumptionListRelationFilter
  }, "id">

  export type EmissionFactorOrderByWithAggregationInput = {
    id?: SortOrder
    sourceType?: SortOrder
    name?: SortOrder
    carbonCoefficient?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: EmissionFactorCountOrderByAggregateInput
    _avg?: EmissionFactorAvgOrderByAggregateInput
    _max?: EmissionFactorMaxOrderByAggregateInput
    _min?: EmissionFactorMinOrderByAggregateInput
    _sum?: EmissionFactorSumOrderByAggregateInput
  }

  export type EmissionFactorScalarWhereWithAggregatesInput = {
    AND?: EmissionFactorScalarWhereWithAggregatesInput | EmissionFactorScalarWhereWithAggregatesInput[]
    OR?: EmissionFactorScalarWhereWithAggregatesInput[]
    NOT?: EmissionFactorScalarWhereWithAggregatesInput | EmissionFactorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmissionFactor"> | number
    sourceType?: EnumSourceTypeWithAggregatesFilter<"EmissionFactor"> | $Enums.SourceType
    name?: StringWithAggregatesFilter<"EmissionFactor"> | string
    carbonCoefficient?: DecimalWithAggregatesFilter<"EmissionFactor"> | Decimal | DecimalJsLike | number | string
    unit?: StringWithAggregatesFilter<"EmissionFactor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EmissionFactor"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"EmissionFactor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmissionFactor"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"EmissionFactor"> | Date | string
  }

  export type VehiclePropertyWhereInput = {
    AND?: VehiclePropertyWhereInput | VehiclePropertyWhereInput[]
    OR?: VehiclePropertyWhereInput[]
    NOT?: VehiclePropertyWhereInput | VehiclePropertyWhereInput[]
    id?: IntFilter<"VehicleProperty"> | number
    modelType?: EnumModelTypeFilter<"VehicleProperty"> | $Enums.ModelType
    consumptionRate?: DecimalFilter<"VehicleProperty"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"VehicleProperty"> | Date | string
    createdBy?: DateTimeFilter<"VehicleProperty"> | Date | string
    updatedAt?: DateTimeFilter<"VehicleProperty"> | Date | string
    updatedBy?: DateTimeFilter<"VehicleProperty"> | Date | string
    privateVehicles?: PrivateVehicleListRelationFilter
  }

  export type VehiclePropertyOrderByWithRelationInput = {
    id?: SortOrder
    modelType?: SortOrder
    consumptionRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    privateVehicles?: PrivateVehicleOrderByRelationAggregateInput
  }

  export type VehiclePropertyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VehiclePropertyWhereInput | VehiclePropertyWhereInput[]
    OR?: VehiclePropertyWhereInput[]
    NOT?: VehiclePropertyWhereInput | VehiclePropertyWhereInput[]
    modelType?: EnumModelTypeFilter<"VehicleProperty"> | $Enums.ModelType
    consumptionRate?: DecimalFilter<"VehicleProperty"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"VehicleProperty"> | Date | string
    createdBy?: DateTimeFilter<"VehicleProperty"> | Date | string
    updatedAt?: DateTimeFilter<"VehicleProperty"> | Date | string
    updatedBy?: DateTimeFilter<"VehicleProperty"> | Date | string
    privateVehicles?: PrivateVehicleListRelationFilter
  }, "id">

  export type VehiclePropertyOrderByWithAggregationInput = {
    id?: SortOrder
    modelType?: SortOrder
    consumptionRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: VehiclePropertyCountOrderByAggregateInput
    _avg?: VehiclePropertyAvgOrderByAggregateInput
    _max?: VehiclePropertyMaxOrderByAggregateInput
    _min?: VehiclePropertyMinOrderByAggregateInput
    _sum?: VehiclePropertySumOrderByAggregateInput
  }

  export type VehiclePropertyScalarWhereWithAggregatesInput = {
    AND?: VehiclePropertyScalarWhereWithAggregatesInput | VehiclePropertyScalarWhereWithAggregatesInput[]
    OR?: VehiclePropertyScalarWhereWithAggregatesInput[]
    NOT?: VehiclePropertyScalarWhereWithAggregatesInput | VehiclePropertyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VehicleProperty"> | number
    modelType?: EnumModelTypeWithAggregatesFilter<"VehicleProperty"> | $Enums.ModelType
    consumptionRate?: DecimalWithAggregatesFilter<"VehicleProperty"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"VehicleProperty"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"VehicleProperty"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VehicleProperty"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"VehicleProperty"> | Date | string
  }

  export type PrivateVehicleWhereInput = {
    AND?: PrivateVehicleWhereInput | PrivateVehicleWhereInput[]
    OR?: PrivateVehicleWhereInput[]
    NOT?: PrivateVehicleWhereInput | PrivateVehicleWhereInput[]
    id?: IntFilter<"PrivateVehicle"> | number
    householdId?: IntFilter<"PrivateVehicle"> | number
    emissionFactorId?: IntFilter<"PrivateVehicle"> | number
    vehiclePropertyId?: IntFilter<"PrivateVehicle"> | number
    startMonthDistance?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFilter<"PrivateVehicle"> | boolean
    carbonEmissionEq?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"PrivateVehicle"> | Date | string
    createdAt?: DateTimeFilter<"PrivateVehicle"> | Date | string
    createdBy?: DateTimeFilter<"PrivateVehicle"> | Date | string
    updatedAt?: DateTimeFilter<"PrivateVehicle"> | Date | string
    updatedBy?: DateTimeFilter<"PrivateVehicle"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
    vehicleProperty?: XOR<VehiclePropertyRelationFilter, VehiclePropertyWhereInput>
  }

  export type PrivateVehicleOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    isRegularMaintain?: SortOrder
    carbonEmissionEq?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    emissionFactor?: EmissionFactorOrderByWithRelationInput
    vehicleProperty?: VehiclePropertyOrderByWithRelationInput
  }

  export type PrivateVehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PrivateVehicleWhereInput | PrivateVehicleWhereInput[]
    OR?: PrivateVehicleWhereInput[]
    NOT?: PrivateVehicleWhereInput | PrivateVehicleWhereInput[]
    householdId?: IntFilter<"PrivateVehicle"> | number
    emissionFactorId?: IntFilter<"PrivateVehicle"> | number
    vehiclePropertyId?: IntFilter<"PrivateVehicle"> | number
    startMonthDistance?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFilter<"PrivateVehicle"> | boolean
    carbonEmissionEq?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"PrivateVehicle"> | Date | string
    createdAt?: DateTimeFilter<"PrivateVehicle"> | Date | string
    createdBy?: DateTimeFilter<"PrivateVehicle"> | Date | string
    updatedAt?: DateTimeFilter<"PrivateVehicle"> | Date | string
    updatedBy?: DateTimeFilter<"PrivateVehicle"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
    vehicleProperty?: XOR<VehiclePropertyRelationFilter, VehiclePropertyWhereInput>
  }, "id">

  export type PrivateVehicleOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    isRegularMaintain?: SortOrder
    carbonEmissionEq?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: PrivateVehicleCountOrderByAggregateInput
    _avg?: PrivateVehicleAvgOrderByAggregateInput
    _max?: PrivateVehicleMaxOrderByAggregateInput
    _min?: PrivateVehicleMinOrderByAggregateInput
    _sum?: PrivateVehicleSumOrderByAggregateInput
  }

  export type PrivateVehicleScalarWhereWithAggregatesInput = {
    AND?: PrivateVehicleScalarWhereWithAggregatesInput | PrivateVehicleScalarWhereWithAggregatesInput[]
    OR?: PrivateVehicleScalarWhereWithAggregatesInput[]
    NOT?: PrivateVehicleScalarWhereWithAggregatesInput | PrivateVehicleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PrivateVehicle"> | number
    householdId?: IntWithAggregatesFilter<"PrivateVehicle"> | number
    emissionFactorId?: IntWithAggregatesFilter<"PrivateVehicle"> | number
    vehiclePropertyId?: IntWithAggregatesFilter<"PrivateVehicle"> | number
    startMonthDistance?: DecimalWithAggregatesFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalWithAggregatesFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalWithAggregatesFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolWithAggregatesFilter<"PrivateVehicle"> | boolean
    carbonEmissionEq?: DecimalWithAggregatesFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"PrivateVehicle"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PrivateVehicle"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"PrivateVehicle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PrivateVehicle"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"PrivateVehicle"> | Date | string
  }

  export type TransportationWhereInput = {
    AND?: TransportationWhereInput | TransportationWhereInput[]
    OR?: TransportationWhereInput[]
    NOT?: TransportationWhereInput | TransportationWhereInput[]
    id?: IntFilter<"Transportation"> | number
    householdId?: IntFilter<"Transportation"> | number
    totalCarbonFootprint?: DecimalFilter<"Transportation"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"Transportation"> | Date | string
    createdAt?: DateTimeFilter<"Transportation"> | Date | string
    createdBy?: DateTimeFilter<"Transportation"> | Date | string
    updatedAt?: DateTimeFilter<"Transportation"> | Date | string
    updatedBy?: DateTimeFilter<"Transportation"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }

  export type TransportationOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    carbonFootprint?: CarbonFootprintOrderByWithRelationInput
  }

  export type TransportationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    householdId_recordedDate?: TransportationHouseholdIdRecordedDateCompoundUniqueInput
    AND?: TransportationWhereInput | TransportationWhereInput[]
    OR?: TransportationWhereInput[]
    NOT?: TransportationWhereInput | TransportationWhereInput[]
    householdId?: IntFilter<"Transportation"> | number
    totalCarbonFootprint?: DecimalFilter<"Transportation"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"Transportation"> | Date | string
    createdAt?: DateTimeFilter<"Transportation"> | Date | string
    createdBy?: DateTimeFilter<"Transportation"> | Date | string
    updatedAt?: DateTimeFilter<"Transportation"> | Date | string
    updatedBy?: DateTimeFilter<"Transportation"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }, "id" | "householdId_recordedDate">

  export type TransportationOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: TransportationCountOrderByAggregateInput
    _avg?: TransportationAvgOrderByAggregateInput
    _max?: TransportationMaxOrderByAggregateInput
    _min?: TransportationMinOrderByAggregateInput
    _sum?: TransportationSumOrderByAggregateInput
  }

  export type TransportationScalarWhereWithAggregatesInput = {
    AND?: TransportationScalarWhereWithAggregatesInput | TransportationScalarWhereWithAggregatesInput[]
    OR?: TransportationScalarWhereWithAggregatesInput[]
    NOT?: TransportationScalarWhereWithAggregatesInput | TransportationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transportation"> | number
    householdId?: IntWithAggregatesFilter<"Transportation"> | number
    totalCarbonFootprint?: DecimalWithAggregatesFilter<"Transportation"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"Transportation"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Transportation"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"Transportation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transportation"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"Transportation"> | Date | string
  }

  export type HouseholdElectricityWhereInput = {
    AND?: HouseholdElectricityWhereInput | HouseholdElectricityWhereInput[]
    OR?: HouseholdElectricityWhereInput[]
    NOT?: HouseholdElectricityWhereInput | HouseholdElectricityWhereInput[]
    id?: IntFilter<"HouseholdElectricity"> | number
    householdId?: IntFilter<"HouseholdElectricity"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdElectricity"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }

  export type HouseholdElectricityOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    carbonFootprint?: CarbonFootprintOrderByWithRelationInput
  }

  export type HouseholdElectricityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    householdId_recordedDate?: HouseholdElectricityHouseholdIdRecordedDateCompoundUniqueInput
    AND?: HouseholdElectricityWhereInput | HouseholdElectricityWhereInput[]
    OR?: HouseholdElectricityWhereInput[]
    NOT?: HouseholdElectricityWhereInput | HouseholdElectricityWhereInput[]
    householdId?: IntFilter<"HouseholdElectricity"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdElectricity"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }, "id" | "householdId_recordedDate">

  export type HouseholdElectricityOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: HouseholdElectricityCountOrderByAggregateInput
    _avg?: HouseholdElectricityAvgOrderByAggregateInput
    _max?: HouseholdElectricityMaxOrderByAggregateInput
    _min?: HouseholdElectricityMinOrderByAggregateInput
    _sum?: HouseholdElectricitySumOrderByAggregateInput
  }

  export type HouseholdElectricityScalarWhereWithAggregatesInput = {
    AND?: HouseholdElectricityScalarWhereWithAggregatesInput | HouseholdElectricityScalarWhereWithAggregatesInput[]
    OR?: HouseholdElectricityScalarWhereWithAggregatesInput[]
    NOT?: HouseholdElectricityScalarWhereWithAggregatesInput | HouseholdElectricityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HouseholdElectricity"> | number
    householdId?: IntWithAggregatesFilter<"HouseholdElectricity"> | number
    totalCarbonFootprint?: DecimalWithAggregatesFilter<"HouseholdElectricity"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"HouseholdElectricity"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"HouseholdElectricity"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"HouseholdElectricity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HouseholdElectricity"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"HouseholdElectricity"> | Date | string
  }

  export type ElectricityBillWhereInput = {
    AND?: ElectricityBillWhereInput | ElectricityBillWhereInput[]
    OR?: ElectricityBillWhereInput[]
    NOT?: ElectricityBillWhereInput | ElectricityBillWhereInput[]
    id?: IntFilter<"ElectricityBill"> | number
    householdId?: IntFilter<"ElectricityBill"> | number
    emissionFactorId?: IntFilter<"ElectricityBill"> | number
    amountConsumption?: DecimalFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"ElectricityBill"> | Date | string
    createdAt?: DateTimeFilter<"ElectricityBill"> | Date | string
    createdBy?: DateTimeFilter<"ElectricityBill"> | Date | string
    updatedAt?: DateTimeFilter<"ElectricityBill"> | Date | string
    updatedBy?: DateTimeFilter<"ElectricityBill"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
  }

  export type ElectricityBillOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    emissionFactor?: EmissionFactorOrderByWithRelationInput
  }

  export type ElectricityBillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ElectricityBillWhereInput | ElectricityBillWhereInput[]
    OR?: ElectricityBillWhereInput[]
    NOT?: ElectricityBillWhereInput | ElectricityBillWhereInput[]
    householdId?: IntFilter<"ElectricityBill"> | number
    emissionFactorId?: IntFilter<"ElectricityBill"> | number
    amountConsumption?: DecimalFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"ElectricityBill"> | Date | string
    createdAt?: DateTimeFilter<"ElectricityBill"> | Date | string
    createdBy?: DateTimeFilter<"ElectricityBill"> | Date | string
    updatedAt?: DateTimeFilter<"ElectricityBill"> | Date | string
    updatedBy?: DateTimeFilter<"ElectricityBill"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
  }, "id">

  export type ElectricityBillOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: ElectricityBillCountOrderByAggregateInput
    _avg?: ElectricityBillAvgOrderByAggregateInput
    _max?: ElectricityBillMaxOrderByAggregateInput
    _min?: ElectricityBillMinOrderByAggregateInput
    _sum?: ElectricityBillSumOrderByAggregateInput
  }

  export type ElectricityBillScalarWhereWithAggregatesInput = {
    AND?: ElectricityBillScalarWhereWithAggregatesInput | ElectricityBillScalarWhereWithAggregatesInput[]
    OR?: ElectricityBillScalarWhereWithAggregatesInput[]
    NOT?: ElectricityBillScalarWhereWithAggregatesInput | ElectricityBillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ElectricityBill"> | number
    householdId?: IntWithAggregatesFilter<"ElectricityBill"> | number
    emissionFactorId?: IntWithAggregatesFilter<"ElectricityBill"> | number
    amountConsumption?: DecimalWithAggregatesFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalWithAggregatesFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"ElectricityBill"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ElectricityBill"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"ElectricityBill"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ElectricityBill"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"ElectricityBill"> | Date | string
  }

  export type HouseholdWaterSupplyWhereInput = {
    AND?: HouseholdWaterSupplyWhereInput | HouseholdWaterSupplyWhereInput[]
    OR?: HouseholdWaterSupplyWhereInput[]
    NOT?: HouseholdWaterSupplyWhereInput | HouseholdWaterSupplyWhereInput[]
    id?: IntFilter<"HouseholdWaterSupply"> | number
    householdId?: IntFilter<"HouseholdWaterSupply"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdWaterSupply"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }

  export type HouseholdWaterSupplyOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    carbonFootprint?: CarbonFootprintOrderByWithRelationInput
  }

  export type HouseholdWaterSupplyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    householdId_recordedDate?: HouseholdWaterSupplyHouseholdIdRecordedDateCompoundUniqueInput
    AND?: HouseholdWaterSupplyWhereInput | HouseholdWaterSupplyWhereInput[]
    OR?: HouseholdWaterSupplyWhereInput[]
    NOT?: HouseholdWaterSupplyWhereInput | HouseholdWaterSupplyWhereInput[]
    householdId?: IntFilter<"HouseholdWaterSupply"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdWaterSupply"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }, "id" | "householdId_recordedDate">

  export type HouseholdWaterSupplyOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: HouseholdWaterSupplyCountOrderByAggregateInput
    _avg?: HouseholdWaterSupplyAvgOrderByAggregateInput
    _max?: HouseholdWaterSupplyMaxOrderByAggregateInput
    _min?: HouseholdWaterSupplyMinOrderByAggregateInput
    _sum?: HouseholdWaterSupplySumOrderByAggregateInput
  }

  export type HouseholdWaterSupplyScalarWhereWithAggregatesInput = {
    AND?: HouseholdWaterSupplyScalarWhereWithAggregatesInput | HouseholdWaterSupplyScalarWhereWithAggregatesInput[]
    OR?: HouseholdWaterSupplyScalarWhereWithAggregatesInput[]
    NOT?: HouseholdWaterSupplyScalarWhereWithAggregatesInput | HouseholdWaterSupplyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HouseholdWaterSupply"> | number
    householdId?: IntWithAggregatesFilter<"HouseholdWaterSupply"> | number
    totalCarbonFootprint?: DecimalWithAggregatesFilter<"HouseholdWaterSupply"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"HouseholdWaterSupply"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"HouseholdWaterSupply"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"HouseholdWaterSupply"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HouseholdWaterSupply"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"HouseholdWaterSupply"> | Date | string
  }

  export type WaterBillWhereInput = {
    AND?: WaterBillWhereInput | WaterBillWhereInput[]
    OR?: WaterBillWhereInput[]
    NOT?: WaterBillWhereInput | WaterBillWhereInput[]
    id?: IntFilter<"WaterBill"> | number
    householdId?: IntFilter<"WaterBill"> | number
    emissionFactorId?: IntFilter<"WaterBill"> | number
    amountConsumption?: DecimalFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"WaterBill"> | Date | string
    createdAt?: DateTimeFilter<"WaterBill"> | Date | string
    createdBy?: DateTimeFilter<"WaterBill"> | Date | string
    updatedAt?: DateTimeFilter<"WaterBill"> | Date | string
    updatedBy?: DateTimeFilter<"WaterBill"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
  }

  export type WaterBillOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    emissionFactor?: EmissionFactorOrderByWithRelationInput
  }

  export type WaterBillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WaterBillWhereInput | WaterBillWhereInput[]
    OR?: WaterBillWhereInput[]
    NOT?: WaterBillWhereInput | WaterBillWhereInput[]
    householdId?: IntFilter<"WaterBill"> | number
    emissionFactorId?: IntFilter<"WaterBill"> | number
    amountConsumption?: DecimalFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"WaterBill"> | Date | string
    createdAt?: DateTimeFilter<"WaterBill"> | Date | string
    createdBy?: DateTimeFilter<"WaterBill"> | Date | string
    updatedAt?: DateTimeFilter<"WaterBill"> | Date | string
    updatedBy?: DateTimeFilter<"WaterBill"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
  }, "id">

  export type WaterBillOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: WaterBillCountOrderByAggregateInput
    _avg?: WaterBillAvgOrderByAggregateInput
    _max?: WaterBillMaxOrderByAggregateInput
    _min?: WaterBillMinOrderByAggregateInput
    _sum?: WaterBillSumOrderByAggregateInput
  }

  export type WaterBillScalarWhereWithAggregatesInput = {
    AND?: WaterBillScalarWhereWithAggregatesInput | WaterBillScalarWhereWithAggregatesInput[]
    OR?: WaterBillScalarWhereWithAggregatesInput[]
    NOT?: WaterBillScalarWhereWithAggregatesInput | WaterBillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WaterBill"> | number
    householdId?: IntWithAggregatesFilter<"WaterBill"> | number
    emissionFactorId?: IntWithAggregatesFilter<"WaterBill"> | number
    amountConsumption?: DecimalWithAggregatesFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalWithAggregatesFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"WaterBill"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"WaterBill"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"WaterBill"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WaterBill"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"WaterBill"> | Date | string
  }

  export type HouseholdOtherEnergyWhereInput = {
    AND?: HouseholdOtherEnergyWhereInput | HouseholdOtherEnergyWhereInput[]
    OR?: HouseholdOtherEnergyWhereInput[]
    NOT?: HouseholdOtherEnergyWhereInput | HouseholdOtherEnergyWhereInput[]
    id?: IntFilter<"HouseholdOtherEnergy"> | number
    householdId?: IntFilter<"HouseholdOtherEnergy"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdOtherEnergy"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }

  export type HouseholdOtherEnergyOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    carbonFootprint?: CarbonFootprintOrderByWithRelationInput
  }

  export type HouseholdOtherEnergyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    householdId_recordedDate?: HouseholdOtherEnergyHouseholdIdRecordedDateCompoundUniqueInput
    AND?: HouseholdOtherEnergyWhereInput | HouseholdOtherEnergyWhereInput[]
    OR?: HouseholdOtherEnergyWhereInput[]
    NOT?: HouseholdOtherEnergyWhereInput | HouseholdOtherEnergyWhereInput[]
    householdId?: IntFilter<"HouseholdOtherEnergy"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdOtherEnergy"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    carbonFootprint?: XOR<CarbonFootprintNullableRelationFilter, CarbonFootprintWhereInput> | null
  }, "id" | "householdId_recordedDate">

  export type HouseholdOtherEnergyOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: HouseholdOtherEnergyCountOrderByAggregateInput
    _avg?: HouseholdOtherEnergyAvgOrderByAggregateInput
    _max?: HouseholdOtherEnergyMaxOrderByAggregateInput
    _min?: HouseholdOtherEnergyMinOrderByAggregateInput
    _sum?: HouseholdOtherEnergySumOrderByAggregateInput
  }

  export type HouseholdOtherEnergyScalarWhereWithAggregatesInput = {
    AND?: HouseholdOtherEnergyScalarWhereWithAggregatesInput | HouseholdOtherEnergyScalarWhereWithAggregatesInput[]
    OR?: HouseholdOtherEnergyScalarWhereWithAggregatesInput[]
    NOT?: HouseholdOtherEnergyScalarWhereWithAggregatesInput | HouseholdOtherEnergyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HouseholdOtherEnergy"> | number
    householdId?: IntWithAggregatesFilter<"HouseholdOtherEnergy"> | number
    totalCarbonFootprint?: DecimalWithAggregatesFilter<"HouseholdOtherEnergy"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"HouseholdOtherEnergy"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"HouseholdOtherEnergy"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"HouseholdOtherEnergy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HouseholdOtherEnergy"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"HouseholdOtherEnergy"> | Date | string
  }

  export type OtherEnergyConsumptionWhereInput = {
    AND?: OtherEnergyConsumptionWhereInput | OtherEnergyConsumptionWhereInput[]
    OR?: OtherEnergyConsumptionWhereInput[]
    NOT?: OtherEnergyConsumptionWhereInput | OtherEnergyConsumptionWhereInput[]
    id?: IntFilter<"OtherEnergyConsumption"> | number
    householdId?: IntFilter<"OtherEnergyConsumption"> | number
    emissionFactorId?: IntFilter<"OtherEnergyConsumption"> | number
    energyUsageType?: EnumEnergyUsageTypeFilter<"OtherEnergyConsumption"> | $Enums.EnergyUsageType
    amountConsumption?: DecimalFilter<"OtherEnergyConsumption"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    createdAt?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    createdBy?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    updatedAt?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    updatedBy?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
  }

  export type OtherEnergyConsumptionOrderByWithRelationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    energyUsageType?: SortOrder
    amountConsumption?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    household?: HouseholdOrderByWithRelationInput
    emissionFactor?: EmissionFactorOrderByWithRelationInput
  }

  export type OtherEnergyConsumptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OtherEnergyConsumptionWhereInput | OtherEnergyConsumptionWhereInput[]
    OR?: OtherEnergyConsumptionWhereInput[]
    NOT?: OtherEnergyConsumptionWhereInput | OtherEnergyConsumptionWhereInput[]
    householdId?: IntFilter<"OtherEnergyConsumption"> | number
    emissionFactorId?: IntFilter<"OtherEnergyConsumption"> | number
    energyUsageType?: EnumEnergyUsageTypeFilter<"OtherEnergyConsumption"> | $Enums.EnergyUsageType
    amountConsumption?: DecimalFilter<"OtherEnergyConsumption"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    createdAt?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    createdBy?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    updatedAt?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    updatedBy?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    household?: XOR<HouseholdRelationFilter, HouseholdWhereInput>
    emissionFactor?: XOR<EmissionFactorRelationFilter, EmissionFactorWhereInput>
  }, "id">

  export type OtherEnergyConsumptionOrderByWithAggregationInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    energyUsageType?: SortOrder
    amountConsumption?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: OtherEnergyConsumptionCountOrderByAggregateInput
    _avg?: OtherEnergyConsumptionAvgOrderByAggregateInput
    _max?: OtherEnergyConsumptionMaxOrderByAggregateInput
    _min?: OtherEnergyConsumptionMinOrderByAggregateInput
    _sum?: OtherEnergyConsumptionSumOrderByAggregateInput
  }

  export type OtherEnergyConsumptionScalarWhereWithAggregatesInput = {
    AND?: OtherEnergyConsumptionScalarWhereWithAggregatesInput | OtherEnergyConsumptionScalarWhereWithAggregatesInput[]
    OR?: OtherEnergyConsumptionScalarWhereWithAggregatesInput[]
    NOT?: OtherEnergyConsumptionScalarWhereWithAggregatesInput | OtherEnergyConsumptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OtherEnergyConsumption"> | number
    householdId?: IntWithAggregatesFilter<"OtherEnergyConsumption"> | number
    emissionFactorId?: IntWithAggregatesFilter<"OtherEnergyConsumption"> | number
    energyUsageType?: EnumEnergyUsageTypeWithAggregatesFilter<"OtherEnergyConsumption"> | $Enums.EnergyUsageType
    amountConsumption?: DecimalWithAggregatesFilter<"OtherEnergyConsumption"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeWithAggregatesFilter<"OtherEnergyConsumption"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"OtherEnergyConsumption"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"OtherEnergyConsumption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OtherEnergyConsumption"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"OtherEnergyConsumption"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    firstname?: StringFilter<"Profile"> | string
    lastname?: StringFilter<"Profile"> | string
    email?: StringFilter<"Profile"> | string
    password?: StringFilter<"Profile"> | string
    phoneNumber?: StringFilter<"Profile"> | string
    profileImg?: StringFilter<"Profile"> | string
    isStaff?: BoolFilter<"Profile"> | boolean
    isActive?: BoolFilter<"Profile"> | boolean
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    createdBy?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    updatedBy?: DateTimeFilter<"Profile"> | Date | string
    profilePermissions?: ProfilePermissionListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    profileImg?: SortOrder
    isStaff?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    profilePermissions?: ProfilePermissionOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    firstname?: StringFilter<"Profile"> | string
    lastname?: StringFilter<"Profile"> | string
    email?: StringFilter<"Profile"> | string
    password?: StringFilter<"Profile"> | string
    phoneNumber?: StringFilter<"Profile"> | string
    profileImg?: StringFilter<"Profile"> | string
    isStaff?: BoolFilter<"Profile"> | boolean
    isActive?: BoolFilter<"Profile"> | boolean
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    createdBy?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    updatedBy?: DateTimeFilter<"Profile"> | Date | string
    profilePermissions?: ProfilePermissionListRelationFilter
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    profileImg?: SortOrder
    isStaff?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    firstname?: StringWithAggregatesFilter<"Profile"> | string
    lastname?: StringWithAggregatesFilter<"Profile"> | string
    email?: StringWithAggregatesFilter<"Profile"> | string
    password?: StringWithAggregatesFilter<"Profile"> | string
    phoneNumber?: StringWithAggregatesFilter<"Profile"> | string
    profileImg?: StringWithAggregatesFilter<"Profile"> | string
    isStaff?: BoolWithAggregatesFilter<"Profile"> | boolean
    isActive?: BoolWithAggregatesFilter<"Profile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type ProfilePermissionWhereInput = {
    AND?: ProfilePermissionWhereInput | ProfilePermissionWhereInput[]
    OR?: ProfilePermissionWhereInput[]
    NOT?: ProfilePermissionWhereInput | ProfilePermissionWhereInput[]
    id?: IntFilter<"ProfilePermission"> | number
    profileId?: IntFilter<"ProfilePermission"> | number
    teamId?: IntFilter<"ProfilePermission"> | number
    canEditSubdistrict?: BoolFilter<"ProfilePermission"> | boolean
    canGrant?: BoolFilter<"ProfilePermission"> | boolean
    createdAt?: DateTimeFilter<"ProfilePermission"> | Date | string
    createdBy?: DateTimeFilter<"ProfilePermission"> | Date | string
    updatedAt?: DateTimeFilter<"ProfilePermission"> | Date | string
    updatedBy?: DateTimeFilter<"ProfilePermission"> | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    team?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type ProfilePermissionOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
    canEditSubdistrict?: SortOrder
    canGrant?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type ProfilePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfilePermissionWhereInput | ProfilePermissionWhereInput[]
    OR?: ProfilePermissionWhereInput[]
    NOT?: ProfilePermissionWhereInput | ProfilePermissionWhereInput[]
    profileId?: IntFilter<"ProfilePermission"> | number
    teamId?: IntFilter<"ProfilePermission"> | number
    canEditSubdistrict?: BoolFilter<"ProfilePermission"> | boolean
    canGrant?: BoolFilter<"ProfilePermission"> | boolean
    createdAt?: DateTimeFilter<"ProfilePermission"> | Date | string
    createdBy?: DateTimeFilter<"ProfilePermission"> | Date | string
    updatedAt?: DateTimeFilter<"ProfilePermission"> | Date | string
    updatedBy?: DateTimeFilter<"ProfilePermission"> | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    team?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type ProfilePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
    canEditSubdistrict?: SortOrder
    canGrant?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: ProfilePermissionCountOrderByAggregateInput
    _avg?: ProfilePermissionAvgOrderByAggregateInput
    _max?: ProfilePermissionMaxOrderByAggregateInput
    _min?: ProfilePermissionMinOrderByAggregateInput
    _sum?: ProfilePermissionSumOrderByAggregateInput
  }

  export type ProfilePermissionScalarWhereWithAggregatesInput = {
    AND?: ProfilePermissionScalarWhereWithAggregatesInput | ProfilePermissionScalarWhereWithAggregatesInput[]
    OR?: ProfilePermissionScalarWhereWithAggregatesInput[]
    NOT?: ProfilePermissionScalarWhereWithAggregatesInput | ProfilePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfilePermission"> | number
    profileId?: IntWithAggregatesFilter<"ProfilePermission"> | number
    teamId?: IntWithAggregatesFilter<"ProfilePermission"> | number
    canEditSubdistrict?: BoolWithAggregatesFilter<"ProfilePermission"> | boolean
    canGrant?: BoolWithAggregatesFilter<"ProfilePermission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ProfilePermission"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"ProfilePermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfilePermission"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"ProfilePermission"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    addressId?: IntFilter<"Team"> | number
    title?: StringFilter<"Team"> | string
    maximumLevel?: EnumMaximumLevelFilter<"Team"> | $Enums.MaximumLevel
    createdAt?: DateTimeFilter<"Team"> | Date | string
    createdBy?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    updatedBy?: DateTimeFilter<"Team"> | Date | string
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    profilePermissions?: ProfilePermissionListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    addressId?: SortOrder
    title?: SortOrder
    maximumLevel?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    address?: AddressOrderByWithRelationInput
    profilePermissions?: ProfilePermissionOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    addressId?: IntFilter<"Team"> | number
    title?: StringFilter<"Team"> | string
    maximumLevel?: EnumMaximumLevelFilter<"Team"> | $Enums.MaximumLevel
    createdAt?: DateTimeFilter<"Team"> | Date | string
    createdBy?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    updatedBy?: DateTimeFilter<"Team"> | Date | string
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    profilePermissions?: ProfilePermissionListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    addressId?: SortOrder
    title?: SortOrder
    maximumLevel?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    addressId?: IntWithAggregatesFilter<"Team"> | number
    title?: StringWithAggregatesFilter<"Team"> | string
    maximumLevel?: EnumMaximumLevelWithAggregatesFilter<"Team"> | $Enums.MaximumLevel
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    createdBy?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedBy?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type AddressCreateInput = {
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    households?: HouseholdCreateNestedManyWithoutAddressInput
    teams?: TeamCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    households?: HouseholdUncheckedCreateNestedManyWithoutAddressInput
    teams?: TeamUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    households?: HouseholdUpdateManyWithoutAddressNestedInput
    teams?: TeamUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    households?: HouseholdUncheckedUpdateManyWithoutAddressNestedInput
    teams?: TeamUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: number
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
  }

  export type AddressUpdateManyMutationInput = {
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
  }

  export type HouseholdCreateInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUpdateInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdCreateManyInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdUpdateManyMutationInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarbonFootprintCreateInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutCarbonFootprintsInput
    householdElectricity: HouseholdElectricityCreateNestedOneWithoutCarbonFootprintInput
    householdWaterSupply: HouseholdWaterSupplyCreateNestedOneWithoutCarbonFootprintInput
    householdOtherEnergy: HouseholdOtherEnergyCreateNestedOneWithoutCarbonFootprintInput
    transportation: TransportationCreateNestedOneWithoutCarbonFootprintInput
  }

  export type CarbonFootprintUncheckedCreateInput = {
    id?: number
    householdId: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintUpdateInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutCarbonFootprintsNestedInput
    householdElectricity?: HouseholdElectricityUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdWaterSupply?: HouseholdWaterSupplyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdOtherEnergy?: HouseholdOtherEnergyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    transportation?: TransportationUpdateOneRequiredWithoutCarbonFootprintNestedInput
  }

  export type CarbonFootprintUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarbonFootprintCreateManyInput = {
    id?: number
    householdId: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintUpdateManyMutationInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarbonFootprintUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmissionFactorCreateInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutEmissionFactorInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorUncheckedCreateInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutEmissionFactorInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUpdateManyWithoutEmissionFactorNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutEmissionFactorNestedInput
  }

  export type EmissionFactorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorNestedInput
  }

  export type EmissionFactorCreateManyInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type EmissionFactorUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmissionFactorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehiclePropertyCreateInput = {
    modelType: $Enums.ModelType
    consumptionRate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutVehiclePropertyInput
  }

  export type VehiclePropertyUncheckedCreateInput = {
    id?: number
    modelType: $Enums.ModelType
    consumptionRate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutVehiclePropertyInput
  }

  export type VehiclePropertyUpdateInput = {
    modelType?: EnumModelTypeFieldUpdateOperationsInput | $Enums.ModelType
    consumptionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUpdateManyWithoutVehiclePropertyNestedInput
  }

  export type VehiclePropertyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelType?: EnumModelTypeFieldUpdateOperationsInput | $Enums.ModelType
    consumptionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutVehiclePropertyNestedInput
  }

  export type VehiclePropertyCreateManyInput = {
    id?: number
    modelType: $Enums.ModelType
    consumptionRate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type VehiclePropertyUpdateManyMutationInput = {
    modelType?: EnumModelTypeFieldUpdateOperationsInput | $Enums.ModelType
    consumptionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehiclePropertyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelType?: EnumModelTypeFieldUpdateOperationsInput | $Enums.ModelType
    consumptionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleCreateInput = {
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutPrivateVehiclesInput
    emissionFactor: EmissionFactorCreateNestedOneWithoutPrivateVehiclesInput
    vehicleProperty: VehiclePropertyCreateNestedOneWithoutPrivateVehiclesInput
  }

  export type PrivateVehicleUncheckedCreateInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleUpdateInput = {
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutPrivateVehiclesNestedInput
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutPrivateVehiclesNestedInput
    vehicleProperty?: VehiclePropertyUpdateOneRequiredWithoutPrivateVehiclesNestedInput
  }

  export type PrivateVehicleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    vehiclePropertyId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleCreateManyInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleUpdateManyMutationInput = {
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    vehiclePropertyId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportationCreateInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutTransportationsInput
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutTransportationInput
  }

  export type TransportationUncheckedCreateInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutTransportationInput
  }

  export type TransportationUpdateInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutTransportationsNestedInput
    carbonFootprint?: CarbonFootprintUpdateOneWithoutTransportationNestedInput
  }

  export type TransportationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutTransportationNestedInput
  }

  export type TransportationCreateManyInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type TransportationUpdateManyMutationInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdElectricityCreateInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutHouseholdElectricitiesInput
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutHouseholdElectricityInput
  }

  export type HouseholdElectricityUncheckedCreateInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdElectricityInput
  }

  export type HouseholdElectricityUpdateInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutHouseholdElectricitiesNestedInput
    carbonFootprint?: CarbonFootprintUpdateOneWithoutHouseholdElectricityNestedInput
  }

  export type HouseholdElectricityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutHouseholdElectricityNestedInput
  }

  export type HouseholdElectricityCreateManyInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdElectricityUpdateManyMutationInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdElectricityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillCreateInput = {
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutElectricityBillsInput
    emissionFactor: EmissionFactorCreateNestedOneWithoutElectricityBillsInput
  }

  export type ElectricityBillUncheckedCreateInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ElectricityBillUpdateInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutElectricityBillsNestedInput
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutElectricityBillsNestedInput
  }

  export type ElectricityBillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillCreateManyInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ElectricityBillUpdateManyMutationInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdWaterSupplyCreateInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutHouseholdWaterSuppliesInput
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutHouseholdWaterSupplyInput
  }

  export type HouseholdWaterSupplyUncheckedCreateInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdWaterSupplyInput
  }

  export type HouseholdWaterSupplyUpdateInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutHouseholdWaterSuppliesNestedInput
    carbonFootprint?: CarbonFootprintUpdateOneWithoutHouseholdWaterSupplyNestedInput
  }

  export type HouseholdWaterSupplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutHouseholdWaterSupplyNestedInput
  }

  export type HouseholdWaterSupplyCreateManyInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdWaterSupplyUpdateManyMutationInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdWaterSupplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillCreateInput = {
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutWaterBillsInput
    emissionFactor: EmissionFactorCreateNestedOneWithoutWaterBillsInput
  }

  export type WaterBillUncheckedCreateInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type WaterBillUpdateInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutWaterBillsNestedInput
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutWaterBillsNestedInput
  }

  export type WaterBillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillCreateManyInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type WaterBillUpdateManyMutationInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdOtherEnergyCreateInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutHouseholdOtherEnergiesInput
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutHouseholdOtherEnergyInput
  }

  export type HouseholdOtherEnergyUncheckedCreateInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdOtherEnergyInput
  }

  export type HouseholdOtherEnergyUpdateInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutHouseholdOtherEnergiesNestedInput
    carbonFootprint?: CarbonFootprintUpdateOneWithoutHouseholdOtherEnergyNestedInput
  }

  export type HouseholdOtherEnergyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutHouseholdOtherEnergyNestedInput
  }

  export type HouseholdOtherEnergyCreateManyInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdOtherEnergyUpdateManyMutationInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdOtherEnergyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionCreateInput = {
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutOtherEnergyConsumptionsInput
    emissionFactor: EmissionFactorCreateNestedOneWithoutOtherEnergyConsumptionsInput
  }

  export type OtherEnergyConsumptionUncheckedCreateInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type OtherEnergyConsumptionUpdateInput = {
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutOtherEnergyConsumptionsNestedInput
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutOtherEnergyConsumptionsNestedInput
  }

  export type OtherEnergyConsumptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionCreateManyInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type OtherEnergyConsumptionUpdateManyMutationInput = {
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    firstname: string
    lastname: string
    email: string
    password: string
    phoneNumber: string
    profileImg: string
    isStaff: boolean
    isActive: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profilePermissions?: ProfilePermissionCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    password: string
    phoneNumber: string
    profileImg: string
    isStaff: boolean
    isActive: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profilePermissions?: ProfilePermissionUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profileImg?: StringFieldUpdateOperationsInput | string
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profilePermissions?: ProfilePermissionUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profileImg?: StringFieldUpdateOperationsInput | string
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profilePermissions?: ProfilePermissionUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    password: string
    phoneNumber: string
    profileImg: string
    isStaff: boolean
    isActive: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profileImg?: StringFieldUpdateOperationsInput | string
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profileImg?: StringFieldUpdateOperationsInput | string
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionCreateInput = {
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profile: ProfileCreateNestedOneWithoutProfilePermissionsInput
    team: TeamCreateNestedOneWithoutProfilePermissionsInput
  }

  export type ProfilePermissionUncheckedCreateInput = {
    id?: number
    profileId: number
    teamId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfilePermissionUpdateInput = {
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutProfilePermissionsNestedInput
    team?: TeamUpdateOneRequiredWithoutProfilePermissionsNestedInput
  }

  export type ProfilePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionCreateManyInput = {
    id?: number
    profileId: number
    teamId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfilePermissionUpdateManyMutationInput = {
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutTeamsInput
    profilePermissions?: ProfilePermissionCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    addressId: number
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profilePermissions?: ProfilePermissionUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutTeamsNestedInput
    profilePermissions?: ProfilePermissionUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profilePermissions?: ProfilePermissionUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    addressId: number
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type HouseholdListRelationFilter = {
    every?: HouseholdWhereInput
    some?: HouseholdWhereInput
    none?: HouseholdWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type HouseholdOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    regionName?: SortOrder
    provinceName?: SortOrder
    districtName?: SortOrder
    subdistrictName?: SortOrder
    zipcode?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    regionName?: SortOrder
    provinceName?: SortOrder
    districtName?: SortOrder
    subdistrictName?: SortOrder
    zipcode?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    regionName?: SortOrder
    provinceName?: SortOrder
    districtName?: SortOrder
    subdistrictName?: SortOrder
    zipcode?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumHouseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseType | EnumHouseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseTypeFilter<$PrismaModel> | $Enums.HouseType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type CarbonFootprintListRelationFilter = {
    every?: CarbonFootprintWhereInput
    some?: CarbonFootprintWhereInput
    none?: CarbonFootprintWhereInput
  }

  export type PrivateVehicleListRelationFilter = {
    every?: PrivateVehicleWhereInput
    some?: PrivateVehicleWhereInput
    none?: PrivateVehicleWhereInput
  }

  export type TransportationListRelationFilter = {
    every?: TransportationWhereInput
    some?: TransportationWhereInput
    none?: TransportationWhereInput
  }

  export type HouseholdElectricityListRelationFilter = {
    every?: HouseholdElectricityWhereInput
    some?: HouseholdElectricityWhereInput
    none?: HouseholdElectricityWhereInput
  }

  export type WaterBillListRelationFilter = {
    every?: WaterBillWhereInput
    some?: WaterBillWhereInput
    none?: WaterBillWhereInput
  }

  export type HouseholdOtherEnergyListRelationFilter = {
    every?: HouseholdOtherEnergyWhereInput
    some?: HouseholdOtherEnergyWhereInput
    none?: HouseholdOtherEnergyWhereInput
  }

  export type ElectricityBillListRelationFilter = {
    every?: ElectricityBillWhereInput
    some?: ElectricityBillWhereInput
    none?: ElectricityBillWhereInput
  }

  export type HouseholdWaterSupplyListRelationFilter = {
    every?: HouseholdWaterSupplyWhereInput
    some?: HouseholdWaterSupplyWhereInput
    none?: HouseholdWaterSupplyWhereInput
  }

  export type OtherEnergyConsumptionListRelationFilter = {
    every?: OtherEnergyConsumptionWhereInput
    some?: OtherEnergyConsumptionWhereInput
    none?: OtherEnergyConsumptionWhereInput
  }

  export type CarbonFootprintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrivateVehicleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransportationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseholdElectricityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WaterBillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseholdOtherEnergyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ElectricityBillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseholdWaterSupplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OtherEnergyConsumptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseholdCountOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    addressDetail?: SortOrder
    houseType?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type HouseholdMaxOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    addressDetail?: SortOrder
    houseType?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdMinOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    addressDetail?: SortOrder
    houseType?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type EnumHouseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseType | EnumHouseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseTypeWithAggregatesFilter<$PrismaModel> | $Enums.HouseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHouseTypeFilter<$PrismaModel>
    _max?: NestedEnumHouseTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type HouseholdRelationFilter = {
    is?: HouseholdWhereInput
    isNot?: HouseholdWhereInput
  }

  export type HouseholdElectricityRelationFilter = {
    is?: HouseholdElectricityWhereInput
    isNot?: HouseholdElectricityWhereInput
  }

  export type HouseholdWaterSupplyRelationFilter = {
    is?: HouseholdWaterSupplyWhereInput
    isNot?: HouseholdWaterSupplyWhereInput
  }

  export type HouseholdOtherEnergyRelationFilter = {
    is?: HouseholdOtherEnergyWhereInput
    isNot?: HouseholdOtherEnergyWhereInput
  }

  export type TransportationRelationFilter = {
    is?: TransportationWhereInput
    isNot?: TransportationWhereInput
  }

  export type CarbonFootprintHouseholdIdRecordedDateCompoundUniqueInput = {
    householdId: number
    recordedDate: Date | string
  }

  export type CarbonFootprintCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CarbonFootprintAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type CarbonFootprintMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CarbonFootprintMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CarbonFootprintSumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    householdElectricityId?: SortOrder
    householdWaterSupplyId?: SortOrder
    householdOtherEnergyId?: SortOrder
    transportaionId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SourceType | EnumSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSourceTypeFilter<$PrismaModel> | $Enums.SourceType
  }

  export type EmissionFactorCountOrderByAggregateInput = {
    id?: SortOrder
    sourceType?: SortOrder
    name?: SortOrder
    carbonCoefficient?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EmissionFactorAvgOrderByAggregateInput = {
    id?: SortOrder
    carbonCoefficient?: SortOrder
  }

  export type EmissionFactorMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceType?: SortOrder
    name?: SortOrder
    carbonCoefficient?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EmissionFactorMinOrderByAggregateInput = {
    id?: SortOrder
    sourceType?: SortOrder
    name?: SortOrder
    carbonCoefficient?: SortOrder
    unit?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EmissionFactorSumOrderByAggregateInput = {
    id?: SortOrder
    carbonCoefficient?: SortOrder
  }

  export type EnumSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SourceType | EnumSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.SourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumSourceTypeFilter<$PrismaModel>
  }

  export type EnumModelTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelType | EnumModelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumModelTypeFilter<$PrismaModel> | $Enums.ModelType
  }

  export type VehiclePropertyCountOrderByAggregateInput = {
    id?: SortOrder
    modelType?: SortOrder
    consumptionRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type VehiclePropertyAvgOrderByAggregateInput = {
    id?: SortOrder
    consumptionRate?: SortOrder
  }

  export type VehiclePropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    modelType?: SortOrder
    consumptionRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type VehiclePropertyMinOrderByAggregateInput = {
    id?: SortOrder
    modelType?: SortOrder
    consumptionRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type VehiclePropertySumOrderByAggregateInput = {
    id?: SortOrder
    consumptionRate?: SortOrder
  }

  export type EnumModelTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelType | EnumModelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumModelTypeWithAggregatesFilter<$PrismaModel> | $Enums.ModelType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumModelTypeFilter<$PrismaModel>
    _max?: NestedEnumModelTypeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EmissionFactorRelationFilter = {
    is?: EmissionFactorWhereInput
    isNot?: EmissionFactorWhereInput
  }

  export type VehiclePropertyRelationFilter = {
    is?: VehiclePropertyWhereInput
    isNot?: VehiclePropertyWhereInput
  }

  export type PrivateVehicleCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    isRegularMaintain?: SortOrder
    carbonEmissionEq?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PrivateVehicleAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    carbonEmissionEq?: SortOrder
  }

  export type PrivateVehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    isRegularMaintain?: SortOrder
    carbonEmissionEq?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PrivateVehicleMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    isRegularMaintain?: SortOrder
    carbonEmissionEq?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PrivateVehicleSumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    vehiclePropertyId?: SortOrder
    startMonthDistance?: SortOrder
    endMonthDistance?: SortOrder
    fuelComsumptionPerMonth?: SortOrder
    carbonEmissionEq?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CarbonFootprintNullableRelationFilter = {
    is?: CarbonFootprintWhereInput | null
    isNot?: CarbonFootprintWhereInput | null
  }

  export type TransportationHouseholdIdRecordedDateCompoundUniqueInput = {
    householdId: number
    recordedDate: Date | string
  }

  export type TransportationCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TransportationAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type TransportationMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TransportationMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TransportationSumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type HouseholdElectricityHouseholdIdRecordedDateCompoundUniqueInput = {
    householdId: number
    recordedDate: Date | string
  }

  export type HouseholdElectricityCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdElectricityAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type HouseholdElectricityMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdElectricityMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdElectricitySumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type ElectricityBillCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ElectricityBillAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
  }

  export type ElectricityBillMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ElectricityBillMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ElectricityBillSumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    electricityMeter?: SortOrder
  }

  export type HouseholdWaterSupplyHouseholdIdRecordedDateCompoundUniqueInput = {
    householdId: number
    recordedDate: Date | string
  }

  export type HouseholdWaterSupplyCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdWaterSupplyAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type HouseholdWaterSupplyMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdWaterSupplyMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdWaterSupplySumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type WaterBillCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type WaterBillAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
  }

  export type WaterBillMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type WaterBillMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type WaterBillSumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
    waterMeter?: SortOrder
  }

  export type HouseholdOtherEnergyHouseholdIdRecordedDateCompoundUniqueInput = {
    householdId: number
    recordedDate: Date | string
  }

  export type HouseholdOtherEnergyCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdOtherEnergyAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type HouseholdOtherEnergyMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdOtherEnergyMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type HouseholdOtherEnergySumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    totalCarbonFootprint?: SortOrder
  }

  export type EnumEnergyUsageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EnergyUsageType | EnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEnergyUsageTypeFilter<$PrismaModel> | $Enums.EnergyUsageType
  }

  export type OtherEnergyConsumptionCountOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    energyUsageType?: SortOrder
    amountConsumption?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OtherEnergyConsumptionAvgOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
  }

  export type OtherEnergyConsumptionMaxOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    energyUsageType?: SortOrder
    amountConsumption?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OtherEnergyConsumptionMinOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    energyUsageType?: SortOrder
    amountConsumption?: SortOrder
    recordedDate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OtherEnergyConsumptionSumOrderByAggregateInput = {
    id?: SortOrder
    householdId?: SortOrder
    emissionFactorId?: SortOrder
    amountConsumption?: SortOrder
  }

  export type EnumEnergyUsageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnergyUsageType | EnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEnergyUsageTypeWithAggregatesFilter<$PrismaModel> | $Enums.EnergyUsageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnergyUsageTypeFilter<$PrismaModel>
    _max?: NestedEnumEnergyUsageTypeFilter<$PrismaModel>
  }

  export type ProfilePermissionListRelationFilter = {
    every?: ProfilePermissionWhereInput
    some?: ProfilePermissionWhereInput
    none?: ProfilePermissionWhereInput
  }

  export type ProfilePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    profileImg?: SortOrder
    isStaff?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    profileImg?: SortOrder
    isStaff?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    profileImg?: SortOrder
    isStaff?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type ProfilePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
    canEditSubdistrict?: SortOrder
    canGrant?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProfilePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
  }

  export type ProfilePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
    canEditSubdistrict?: SortOrder
    canGrant?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProfilePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
    canEditSubdistrict?: SortOrder
    canGrant?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProfilePermissionSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    teamId?: SortOrder
  }

  export type EnumMaximumLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.MaximumLevel | EnumMaximumLevelFieldRefInput<$PrismaModel>
    in?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumMaximumLevelFilter<$PrismaModel> | $Enums.MaximumLevel
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    title?: SortOrder
    maximumLevel?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    title?: SortOrder
    maximumLevel?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    title?: SortOrder
    maximumLevel?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type EnumMaximumLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaximumLevel | EnumMaximumLevelFieldRefInput<$PrismaModel>
    in?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumMaximumLevelWithAggregatesFilter<$PrismaModel> | $Enums.MaximumLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaximumLevelFilter<$PrismaModel>
    _max?: NestedEnumMaximumLevelFilter<$PrismaModel>
  }

  export type HouseholdCreateNestedManyWithoutAddressInput = {
    create?: XOR<HouseholdCreateWithoutAddressInput, HouseholdUncheckedCreateWithoutAddressInput> | HouseholdCreateWithoutAddressInput[] | HouseholdUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HouseholdCreateOrConnectWithoutAddressInput | HouseholdCreateOrConnectWithoutAddressInput[]
    createMany?: HouseholdCreateManyAddressInputEnvelope
    connect?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutAddressInput = {
    create?: XOR<TeamCreateWithoutAddressInput, TeamUncheckedCreateWithoutAddressInput> | TeamCreateWithoutAddressInput[] | TeamUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAddressInput | TeamCreateOrConnectWithoutAddressInput[]
    createMany?: TeamCreateManyAddressInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type HouseholdUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<HouseholdCreateWithoutAddressInput, HouseholdUncheckedCreateWithoutAddressInput> | HouseholdCreateWithoutAddressInput[] | HouseholdUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HouseholdCreateOrConnectWithoutAddressInput | HouseholdCreateOrConnectWithoutAddressInput[]
    createMany?: HouseholdCreateManyAddressInputEnvelope
    connect?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<TeamCreateWithoutAddressInput, TeamUncheckedCreateWithoutAddressInput> | TeamCreateWithoutAddressInput[] | TeamUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAddressInput | TeamCreateOrConnectWithoutAddressInput[]
    createMany?: TeamCreateManyAddressInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type HouseholdUpdateManyWithoutAddressNestedInput = {
    create?: XOR<HouseholdCreateWithoutAddressInput, HouseholdUncheckedCreateWithoutAddressInput> | HouseholdCreateWithoutAddressInput[] | HouseholdUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HouseholdCreateOrConnectWithoutAddressInput | HouseholdCreateOrConnectWithoutAddressInput[]
    upsert?: HouseholdUpsertWithWhereUniqueWithoutAddressInput | HouseholdUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: HouseholdCreateManyAddressInputEnvelope
    set?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    disconnect?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    delete?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    connect?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    update?: HouseholdUpdateWithWhereUniqueWithoutAddressInput | HouseholdUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: HouseholdUpdateManyWithWhereWithoutAddressInput | HouseholdUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: HouseholdScalarWhereInput | HouseholdScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutAddressNestedInput = {
    create?: XOR<TeamCreateWithoutAddressInput, TeamUncheckedCreateWithoutAddressInput> | TeamCreateWithoutAddressInput[] | TeamUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAddressInput | TeamCreateOrConnectWithoutAddressInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutAddressInput | TeamUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: TeamCreateManyAddressInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutAddressInput | TeamUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutAddressInput | TeamUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HouseholdUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<HouseholdCreateWithoutAddressInput, HouseholdUncheckedCreateWithoutAddressInput> | HouseholdCreateWithoutAddressInput[] | HouseholdUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: HouseholdCreateOrConnectWithoutAddressInput | HouseholdCreateOrConnectWithoutAddressInput[]
    upsert?: HouseholdUpsertWithWhereUniqueWithoutAddressInput | HouseholdUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: HouseholdCreateManyAddressInputEnvelope
    set?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    disconnect?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    delete?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    connect?: HouseholdWhereUniqueInput | HouseholdWhereUniqueInput[]
    update?: HouseholdUpdateWithWhereUniqueWithoutAddressInput | HouseholdUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: HouseholdUpdateManyWithWhereWithoutAddressInput | HouseholdUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: HouseholdScalarWhereInput | HouseholdScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<TeamCreateWithoutAddressInput, TeamUncheckedCreateWithoutAddressInput> | TeamCreateWithoutAddressInput[] | TeamUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAddressInput | TeamCreateOrConnectWithoutAddressInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutAddressInput | TeamUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: TeamCreateManyAddressInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutAddressInput | TeamUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutAddressInput | TeamUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type AddressCreateNestedOneWithoutHouseholdsInput = {
    create?: XOR<AddressCreateWithoutHouseholdsInput, AddressUncheckedCreateWithoutHouseholdsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutHouseholdsInput
    connect?: AddressWhereUniqueInput
  }

  export type CarbonFootprintCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdInput, CarbonFootprintUncheckedCreateWithoutHouseholdInput> | CarbonFootprintCreateWithoutHouseholdInput[] | CarbonFootprintUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdInput | CarbonFootprintCreateOrConnectWithoutHouseholdInput[]
    createMany?: CarbonFootprintCreateManyHouseholdInputEnvelope
    connect?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
  }

  export type PrivateVehicleCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<PrivateVehicleCreateWithoutHouseholdInput, PrivateVehicleUncheckedCreateWithoutHouseholdInput> | PrivateVehicleCreateWithoutHouseholdInput[] | PrivateVehicleUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutHouseholdInput | PrivateVehicleCreateOrConnectWithoutHouseholdInput[]
    createMany?: PrivateVehicleCreateManyHouseholdInputEnvelope
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
  }

  export type TransportationCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<TransportationCreateWithoutHouseholdInput, TransportationUncheckedCreateWithoutHouseholdInput> | TransportationCreateWithoutHouseholdInput[] | TransportationUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: TransportationCreateOrConnectWithoutHouseholdInput | TransportationCreateOrConnectWithoutHouseholdInput[]
    createMany?: TransportationCreateManyHouseholdInputEnvelope
    connect?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
  }

  export type HouseholdElectricityCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<HouseholdElectricityCreateWithoutHouseholdInput, HouseholdElectricityUncheckedCreateWithoutHouseholdInput> | HouseholdElectricityCreateWithoutHouseholdInput[] | HouseholdElectricityUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdElectricityCreateOrConnectWithoutHouseholdInput | HouseholdElectricityCreateOrConnectWithoutHouseholdInput[]
    createMany?: HouseholdElectricityCreateManyHouseholdInputEnvelope
    connect?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
  }

  export type WaterBillCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<WaterBillCreateWithoutHouseholdInput, WaterBillUncheckedCreateWithoutHouseholdInput> | WaterBillCreateWithoutHouseholdInput[] | WaterBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutHouseholdInput | WaterBillCreateOrConnectWithoutHouseholdInput[]
    createMany?: WaterBillCreateManyHouseholdInputEnvelope
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
  }

  export type HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<HouseholdOtherEnergyCreateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput> | HouseholdOtherEnergyCreateWithoutHouseholdInput[] | HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput | HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput[]
    createMany?: HouseholdOtherEnergyCreateManyHouseholdInputEnvelope
    connect?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
  }

  export type ElectricityBillCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<ElectricityBillCreateWithoutHouseholdInput, ElectricityBillUncheckedCreateWithoutHouseholdInput> | ElectricityBillCreateWithoutHouseholdInput[] | ElectricityBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutHouseholdInput | ElectricityBillCreateOrConnectWithoutHouseholdInput[]
    createMany?: ElectricityBillCreateManyHouseholdInputEnvelope
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
  }

  export type HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<HouseholdWaterSupplyCreateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput> | HouseholdWaterSupplyCreateWithoutHouseholdInput[] | HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput | HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput[]
    createMany?: HouseholdWaterSupplyCreateManyHouseholdInputEnvelope
    connect?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
  }

  export type OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput> | OtherEnergyConsumptionCreateWithoutHouseholdInput[] | OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput | OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput[]
    createMany?: OtherEnergyConsumptionCreateManyHouseholdInputEnvelope
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
  }

  export type CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdInput, CarbonFootprintUncheckedCreateWithoutHouseholdInput> | CarbonFootprintCreateWithoutHouseholdInput[] | CarbonFootprintUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdInput | CarbonFootprintCreateOrConnectWithoutHouseholdInput[]
    createMany?: CarbonFootprintCreateManyHouseholdInputEnvelope
    connect?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
  }

  export type PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<PrivateVehicleCreateWithoutHouseholdInput, PrivateVehicleUncheckedCreateWithoutHouseholdInput> | PrivateVehicleCreateWithoutHouseholdInput[] | PrivateVehicleUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutHouseholdInput | PrivateVehicleCreateOrConnectWithoutHouseholdInput[]
    createMany?: PrivateVehicleCreateManyHouseholdInputEnvelope
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
  }

  export type TransportationUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<TransportationCreateWithoutHouseholdInput, TransportationUncheckedCreateWithoutHouseholdInput> | TransportationCreateWithoutHouseholdInput[] | TransportationUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: TransportationCreateOrConnectWithoutHouseholdInput | TransportationCreateOrConnectWithoutHouseholdInput[]
    createMany?: TransportationCreateManyHouseholdInputEnvelope
    connect?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
  }

  export type HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<HouseholdElectricityCreateWithoutHouseholdInput, HouseholdElectricityUncheckedCreateWithoutHouseholdInput> | HouseholdElectricityCreateWithoutHouseholdInput[] | HouseholdElectricityUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdElectricityCreateOrConnectWithoutHouseholdInput | HouseholdElectricityCreateOrConnectWithoutHouseholdInput[]
    createMany?: HouseholdElectricityCreateManyHouseholdInputEnvelope
    connect?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
  }

  export type WaterBillUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<WaterBillCreateWithoutHouseholdInput, WaterBillUncheckedCreateWithoutHouseholdInput> | WaterBillCreateWithoutHouseholdInput[] | WaterBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutHouseholdInput | WaterBillCreateOrConnectWithoutHouseholdInput[]
    createMany?: WaterBillCreateManyHouseholdInputEnvelope
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
  }

  export type HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<HouseholdOtherEnergyCreateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput> | HouseholdOtherEnergyCreateWithoutHouseholdInput[] | HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput | HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput[]
    createMany?: HouseholdOtherEnergyCreateManyHouseholdInputEnvelope
    connect?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
  }

  export type ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<ElectricityBillCreateWithoutHouseholdInput, ElectricityBillUncheckedCreateWithoutHouseholdInput> | ElectricityBillCreateWithoutHouseholdInput[] | ElectricityBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutHouseholdInput | ElectricityBillCreateOrConnectWithoutHouseholdInput[]
    createMany?: ElectricityBillCreateManyHouseholdInputEnvelope
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
  }

  export type HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<HouseholdWaterSupplyCreateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput> | HouseholdWaterSupplyCreateWithoutHouseholdInput[] | HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput | HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput[]
    createMany?: HouseholdWaterSupplyCreateManyHouseholdInputEnvelope
    connect?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
  }

  export type OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput> | OtherEnergyConsumptionCreateWithoutHouseholdInput[] | OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput | OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput[]
    createMany?: OtherEnergyConsumptionCreateManyHouseholdInputEnvelope
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
  }

  export type EnumHouseTypeFieldUpdateOperationsInput = {
    set?: $Enums.HouseType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AddressUpdateOneRequiredWithoutHouseholdsNestedInput = {
    create?: XOR<AddressCreateWithoutHouseholdsInput, AddressUncheckedCreateWithoutHouseholdsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutHouseholdsInput
    upsert?: AddressUpsertWithoutHouseholdsInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutHouseholdsInput, AddressUpdateWithoutHouseholdsInput>, AddressUncheckedUpdateWithoutHouseholdsInput>
  }

  export type CarbonFootprintUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdInput, CarbonFootprintUncheckedCreateWithoutHouseholdInput> | CarbonFootprintCreateWithoutHouseholdInput[] | CarbonFootprintUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdInput | CarbonFootprintCreateOrConnectWithoutHouseholdInput[]
    upsert?: CarbonFootprintUpsertWithWhereUniqueWithoutHouseholdInput | CarbonFootprintUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: CarbonFootprintCreateManyHouseholdInputEnvelope
    set?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    disconnect?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    delete?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    connect?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    update?: CarbonFootprintUpdateWithWhereUniqueWithoutHouseholdInput | CarbonFootprintUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: CarbonFootprintUpdateManyWithWhereWithoutHouseholdInput | CarbonFootprintUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: CarbonFootprintScalarWhereInput | CarbonFootprintScalarWhereInput[]
  }

  export type PrivateVehicleUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<PrivateVehicleCreateWithoutHouseholdInput, PrivateVehicleUncheckedCreateWithoutHouseholdInput> | PrivateVehicleCreateWithoutHouseholdInput[] | PrivateVehicleUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutHouseholdInput | PrivateVehicleCreateOrConnectWithoutHouseholdInput[]
    upsert?: PrivateVehicleUpsertWithWhereUniqueWithoutHouseholdInput | PrivateVehicleUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: PrivateVehicleCreateManyHouseholdInputEnvelope
    set?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    disconnect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    delete?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    update?: PrivateVehicleUpdateWithWhereUniqueWithoutHouseholdInput | PrivateVehicleUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: PrivateVehicleUpdateManyWithWhereWithoutHouseholdInput | PrivateVehicleUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
  }

  export type TransportationUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<TransportationCreateWithoutHouseholdInput, TransportationUncheckedCreateWithoutHouseholdInput> | TransportationCreateWithoutHouseholdInput[] | TransportationUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: TransportationCreateOrConnectWithoutHouseholdInput | TransportationCreateOrConnectWithoutHouseholdInput[]
    upsert?: TransportationUpsertWithWhereUniqueWithoutHouseholdInput | TransportationUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: TransportationCreateManyHouseholdInputEnvelope
    set?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    disconnect?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    delete?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    connect?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    update?: TransportationUpdateWithWhereUniqueWithoutHouseholdInput | TransportationUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: TransportationUpdateManyWithWhereWithoutHouseholdInput | TransportationUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: TransportationScalarWhereInput | TransportationScalarWhereInput[]
  }

  export type HouseholdElectricityUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<HouseholdElectricityCreateWithoutHouseholdInput, HouseholdElectricityUncheckedCreateWithoutHouseholdInput> | HouseholdElectricityCreateWithoutHouseholdInput[] | HouseholdElectricityUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdElectricityCreateOrConnectWithoutHouseholdInput | HouseholdElectricityCreateOrConnectWithoutHouseholdInput[]
    upsert?: HouseholdElectricityUpsertWithWhereUniqueWithoutHouseholdInput | HouseholdElectricityUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: HouseholdElectricityCreateManyHouseholdInputEnvelope
    set?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    disconnect?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    delete?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    connect?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    update?: HouseholdElectricityUpdateWithWhereUniqueWithoutHouseholdInput | HouseholdElectricityUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: HouseholdElectricityUpdateManyWithWhereWithoutHouseholdInput | HouseholdElectricityUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: HouseholdElectricityScalarWhereInput | HouseholdElectricityScalarWhereInput[]
  }

  export type WaterBillUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<WaterBillCreateWithoutHouseholdInput, WaterBillUncheckedCreateWithoutHouseholdInput> | WaterBillCreateWithoutHouseholdInput[] | WaterBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutHouseholdInput | WaterBillCreateOrConnectWithoutHouseholdInput[]
    upsert?: WaterBillUpsertWithWhereUniqueWithoutHouseholdInput | WaterBillUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: WaterBillCreateManyHouseholdInputEnvelope
    set?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    disconnect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    delete?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    update?: WaterBillUpdateWithWhereUniqueWithoutHouseholdInput | WaterBillUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: WaterBillUpdateManyWithWhereWithoutHouseholdInput | WaterBillUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: WaterBillScalarWhereInput | WaterBillScalarWhereInput[]
  }

  export type HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<HouseholdOtherEnergyCreateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput> | HouseholdOtherEnergyCreateWithoutHouseholdInput[] | HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput | HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput[]
    upsert?: HouseholdOtherEnergyUpsertWithWhereUniqueWithoutHouseholdInput | HouseholdOtherEnergyUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: HouseholdOtherEnergyCreateManyHouseholdInputEnvelope
    set?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    disconnect?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    delete?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    connect?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    update?: HouseholdOtherEnergyUpdateWithWhereUniqueWithoutHouseholdInput | HouseholdOtherEnergyUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: HouseholdOtherEnergyUpdateManyWithWhereWithoutHouseholdInput | HouseholdOtherEnergyUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: HouseholdOtherEnergyScalarWhereInput | HouseholdOtherEnergyScalarWhereInput[]
  }

  export type ElectricityBillUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<ElectricityBillCreateWithoutHouseholdInput, ElectricityBillUncheckedCreateWithoutHouseholdInput> | ElectricityBillCreateWithoutHouseholdInput[] | ElectricityBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutHouseholdInput | ElectricityBillCreateOrConnectWithoutHouseholdInput[]
    upsert?: ElectricityBillUpsertWithWhereUniqueWithoutHouseholdInput | ElectricityBillUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: ElectricityBillCreateManyHouseholdInputEnvelope
    set?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    disconnect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    delete?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    update?: ElectricityBillUpdateWithWhereUniqueWithoutHouseholdInput | ElectricityBillUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: ElectricityBillUpdateManyWithWhereWithoutHouseholdInput | ElectricityBillUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: ElectricityBillScalarWhereInput | ElectricityBillScalarWhereInput[]
  }

  export type HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<HouseholdWaterSupplyCreateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput> | HouseholdWaterSupplyCreateWithoutHouseholdInput[] | HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput | HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput[]
    upsert?: HouseholdWaterSupplyUpsertWithWhereUniqueWithoutHouseholdInput | HouseholdWaterSupplyUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: HouseholdWaterSupplyCreateManyHouseholdInputEnvelope
    set?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    disconnect?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    delete?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    connect?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    update?: HouseholdWaterSupplyUpdateWithWhereUniqueWithoutHouseholdInput | HouseholdWaterSupplyUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: HouseholdWaterSupplyUpdateManyWithWhereWithoutHouseholdInput | HouseholdWaterSupplyUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: HouseholdWaterSupplyScalarWhereInput | HouseholdWaterSupplyScalarWhereInput[]
  }

  export type OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput> | OtherEnergyConsumptionCreateWithoutHouseholdInput[] | OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput | OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput[]
    upsert?: OtherEnergyConsumptionUpsertWithWhereUniqueWithoutHouseholdInput | OtherEnergyConsumptionUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: OtherEnergyConsumptionCreateManyHouseholdInputEnvelope
    set?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    disconnect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    delete?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    update?: OtherEnergyConsumptionUpdateWithWhereUniqueWithoutHouseholdInput | OtherEnergyConsumptionUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: OtherEnergyConsumptionUpdateManyWithWhereWithoutHouseholdInput | OtherEnergyConsumptionUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: OtherEnergyConsumptionScalarWhereInput | OtherEnergyConsumptionScalarWhereInput[]
  }

  export type CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdInput, CarbonFootprintUncheckedCreateWithoutHouseholdInput> | CarbonFootprintCreateWithoutHouseholdInput[] | CarbonFootprintUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdInput | CarbonFootprintCreateOrConnectWithoutHouseholdInput[]
    upsert?: CarbonFootprintUpsertWithWhereUniqueWithoutHouseholdInput | CarbonFootprintUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: CarbonFootprintCreateManyHouseholdInputEnvelope
    set?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    disconnect?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    delete?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    connect?: CarbonFootprintWhereUniqueInput | CarbonFootprintWhereUniqueInput[]
    update?: CarbonFootprintUpdateWithWhereUniqueWithoutHouseholdInput | CarbonFootprintUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: CarbonFootprintUpdateManyWithWhereWithoutHouseholdInput | CarbonFootprintUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: CarbonFootprintScalarWhereInput | CarbonFootprintScalarWhereInput[]
  }

  export type PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<PrivateVehicleCreateWithoutHouseholdInput, PrivateVehicleUncheckedCreateWithoutHouseholdInput> | PrivateVehicleCreateWithoutHouseholdInput[] | PrivateVehicleUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutHouseholdInput | PrivateVehicleCreateOrConnectWithoutHouseholdInput[]
    upsert?: PrivateVehicleUpsertWithWhereUniqueWithoutHouseholdInput | PrivateVehicleUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: PrivateVehicleCreateManyHouseholdInputEnvelope
    set?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    disconnect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    delete?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    update?: PrivateVehicleUpdateWithWhereUniqueWithoutHouseholdInput | PrivateVehicleUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: PrivateVehicleUpdateManyWithWhereWithoutHouseholdInput | PrivateVehicleUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
  }

  export type TransportationUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<TransportationCreateWithoutHouseholdInput, TransportationUncheckedCreateWithoutHouseholdInput> | TransportationCreateWithoutHouseholdInput[] | TransportationUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: TransportationCreateOrConnectWithoutHouseholdInput | TransportationCreateOrConnectWithoutHouseholdInput[]
    upsert?: TransportationUpsertWithWhereUniqueWithoutHouseholdInput | TransportationUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: TransportationCreateManyHouseholdInputEnvelope
    set?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    disconnect?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    delete?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    connect?: TransportationWhereUniqueInput | TransportationWhereUniqueInput[]
    update?: TransportationUpdateWithWhereUniqueWithoutHouseholdInput | TransportationUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: TransportationUpdateManyWithWhereWithoutHouseholdInput | TransportationUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: TransportationScalarWhereInput | TransportationScalarWhereInput[]
  }

  export type HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<HouseholdElectricityCreateWithoutHouseholdInput, HouseholdElectricityUncheckedCreateWithoutHouseholdInput> | HouseholdElectricityCreateWithoutHouseholdInput[] | HouseholdElectricityUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdElectricityCreateOrConnectWithoutHouseholdInput | HouseholdElectricityCreateOrConnectWithoutHouseholdInput[]
    upsert?: HouseholdElectricityUpsertWithWhereUniqueWithoutHouseholdInput | HouseholdElectricityUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: HouseholdElectricityCreateManyHouseholdInputEnvelope
    set?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    disconnect?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    delete?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    connect?: HouseholdElectricityWhereUniqueInput | HouseholdElectricityWhereUniqueInput[]
    update?: HouseholdElectricityUpdateWithWhereUniqueWithoutHouseholdInput | HouseholdElectricityUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: HouseholdElectricityUpdateManyWithWhereWithoutHouseholdInput | HouseholdElectricityUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: HouseholdElectricityScalarWhereInput | HouseholdElectricityScalarWhereInput[]
  }

  export type WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<WaterBillCreateWithoutHouseholdInput, WaterBillUncheckedCreateWithoutHouseholdInput> | WaterBillCreateWithoutHouseholdInput[] | WaterBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutHouseholdInput | WaterBillCreateOrConnectWithoutHouseholdInput[]
    upsert?: WaterBillUpsertWithWhereUniqueWithoutHouseholdInput | WaterBillUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: WaterBillCreateManyHouseholdInputEnvelope
    set?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    disconnect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    delete?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    update?: WaterBillUpdateWithWhereUniqueWithoutHouseholdInput | WaterBillUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: WaterBillUpdateManyWithWhereWithoutHouseholdInput | WaterBillUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: WaterBillScalarWhereInput | WaterBillScalarWhereInput[]
  }

  export type HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<HouseholdOtherEnergyCreateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput> | HouseholdOtherEnergyCreateWithoutHouseholdInput[] | HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput | HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput[]
    upsert?: HouseholdOtherEnergyUpsertWithWhereUniqueWithoutHouseholdInput | HouseholdOtherEnergyUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: HouseholdOtherEnergyCreateManyHouseholdInputEnvelope
    set?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    disconnect?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    delete?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    connect?: HouseholdOtherEnergyWhereUniqueInput | HouseholdOtherEnergyWhereUniqueInput[]
    update?: HouseholdOtherEnergyUpdateWithWhereUniqueWithoutHouseholdInput | HouseholdOtherEnergyUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: HouseholdOtherEnergyUpdateManyWithWhereWithoutHouseholdInput | HouseholdOtherEnergyUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: HouseholdOtherEnergyScalarWhereInput | HouseholdOtherEnergyScalarWhereInput[]
  }

  export type ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<ElectricityBillCreateWithoutHouseholdInput, ElectricityBillUncheckedCreateWithoutHouseholdInput> | ElectricityBillCreateWithoutHouseholdInput[] | ElectricityBillUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutHouseholdInput | ElectricityBillCreateOrConnectWithoutHouseholdInput[]
    upsert?: ElectricityBillUpsertWithWhereUniqueWithoutHouseholdInput | ElectricityBillUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: ElectricityBillCreateManyHouseholdInputEnvelope
    set?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    disconnect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    delete?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    update?: ElectricityBillUpdateWithWhereUniqueWithoutHouseholdInput | ElectricityBillUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: ElectricityBillUpdateManyWithWhereWithoutHouseholdInput | ElectricityBillUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: ElectricityBillScalarWhereInput | ElectricityBillScalarWhereInput[]
  }

  export type HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<HouseholdWaterSupplyCreateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput> | HouseholdWaterSupplyCreateWithoutHouseholdInput[] | HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput | HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput[]
    upsert?: HouseholdWaterSupplyUpsertWithWhereUniqueWithoutHouseholdInput | HouseholdWaterSupplyUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: HouseholdWaterSupplyCreateManyHouseholdInputEnvelope
    set?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    disconnect?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    delete?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    connect?: HouseholdWaterSupplyWhereUniqueInput | HouseholdWaterSupplyWhereUniqueInput[]
    update?: HouseholdWaterSupplyUpdateWithWhereUniqueWithoutHouseholdInput | HouseholdWaterSupplyUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: HouseholdWaterSupplyUpdateManyWithWhereWithoutHouseholdInput | HouseholdWaterSupplyUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: HouseholdWaterSupplyScalarWhereInput | HouseholdWaterSupplyScalarWhereInput[]
  }

  export type OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput> | OtherEnergyConsumptionCreateWithoutHouseholdInput[] | OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput | OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput[]
    upsert?: OtherEnergyConsumptionUpsertWithWhereUniqueWithoutHouseholdInput | OtherEnergyConsumptionUpsertWithWhereUniqueWithoutHouseholdInput[]
    createMany?: OtherEnergyConsumptionCreateManyHouseholdInputEnvelope
    set?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    disconnect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    delete?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    update?: OtherEnergyConsumptionUpdateWithWhereUniqueWithoutHouseholdInput | OtherEnergyConsumptionUpdateWithWhereUniqueWithoutHouseholdInput[]
    updateMany?: OtherEnergyConsumptionUpdateManyWithWhereWithoutHouseholdInput | OtherEnergyConsumptionUpdateManyWithWhereWithoutHouseholdInput[]
    deleteMany?: OtherEnergyConsumptionScalarWhereInput | OtherEnergyConsumptionScalarWhereInput[]
  }

  export type HouseholdCreateNestedOneWithoutCarbonFootprintsInput = {
    create?: XOR<HouseholdCreateWithoutCarbonFootprintsInput, HouseholdUncheckedCreateWithoutCarbonFootprintsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutCarbonFootprintsInput
    connect?: HouseholdWhereUniqueInput
  }

  export type HouseholdElectricityCreateNestedOneWithoutCarbonFootprintInput = {
    create?: XOR<HouseholdElectricityCreateWithoutCarbonFootprintInput, HouseholdElectricityUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: HouseholdElectricityCreateOrConnectWithoutCarbonFootprintInput
    connect?: HouseholdElectricityWhereUniqueInput
  }

  export type HouseholdWaterSupplyCreateNestedOneWithoutCarbonFootprintInput = {
    create?: XOR<HouseholdWaterSupplyCreateWithoutCarbonFootprintInput, HouseholdWaterSupplyUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: HouseholdWaterSupplyCreateOrConnectWithoutCarbonFootprintInput
    connect?: HouseholdWaterSupplyWhereUniqueInput
  }

  export type HouseholdOtherEnergyCreateNestedOneWithoutCarbonFootprintInput = {
    create?: XOR<HouseholdOtherEnergyCreateWithoutCarbonFootprintInput, HouseholdOtherEnergyUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: HouseholdOtherEnergyCreateOrConnectWithoutCarbonFootprintInput
    connect?: HouseholdOtherEnergyWhereUniqueInput
  }

  export type TransportationCreateNestedOneWithoutCarbonFootprintInput = {
    create?: XOR<TransportationCreateWithoutCarbonFootprintInput, TransportationUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: TransportationCreateOrConnectWithoutCarbonFootprintInput
    connect?: TransportationWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type HouseholdUpdateOneRequiredWithoutCarbonFootprintsNestedInput = {
    create?: XOR<HouseholdCreateWithoutCarbonFootprintsInput, HouseholdUncheckedCreateWithoutCarbonFootprintsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutCarbonFootprintsInput
    upsert?: HouseholdUpsertWithoutCarbonFootprintsInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutCarbonFootprintsInput, HouseholdUpdateWithoutCarbonFootprintsInput>, HouseholdUncheckedUpdateWithoutCarbonFootprintsInput>
  }

  export type HouseholdElectricityUpdateOneRequiredWithoutCarbonFootprintNestedInput = {
    create?: XOR<HouseholdElectricityCreateWithoutCarbonFootprintInput, HouseholdElectricityUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: HouseholdElectricityCreateOrConnectWithoutCarbonFootprintInput
    upsert?: HouseholdElectricityUpsertWithoutCarbonFootprintInput
    connect?: HouseholdElectricityWhereUniqueInput
    update?: XOR<XOR<HouseholdElectricityUpdateToOneWithWhereWithoutCarbonFootprintInput, HouseholdElectricityUpdateWithoutCarbonFootprintInput>, HouseholdElectricityUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type HouseholdWaterSupplyUpdateOneRequiredWithoutCarbonFootprintNestedInput = {
    create?: XOR<HouseholdWaterSupplyCreateWithoutCarbonFootprintInput, HouseholdWaterSupplyUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: HouseholdWaterSupplyCreateOrConnectWithoutCarbonFootprintInput
    upsert?: HouseholdWaterSupplyUpsertWithoutCarbonFootprintInput
    connect?: HouseholdWaterSupplyWhereUniqueInput
    update?: XOR<XOR<HouseholdWaterSupplyUpdateToOneWithWhereWithoutCarbonFootprintInput, HouseholdWaterSupplyUpdateWithoutCarbonFootprintInput>, HouseholdWaterSupplyUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type HouseholdOtherEnergyUpdateOneRequiredWithoutCarbonFootprintNestedInput = {
    create?: XOR<HouseholdOtherEnergyCreateWithoutCarbonFootprintInput, HouseholdOtherEnergyUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: HouseholdOtherEnergyCreateOrConnectWithoutCarbonFootprintInput
    upsert?: HouseholdOtherEnergyUpsertWithoutCarbonFootprintInput
    connect?: HouseholdOtherEnergyWhereUniqueInput
    update?: XOR<XOR<HouseholdOtherEnergyUpdateToOneWithWhereWithoutCarbonFootprintInput, HouseholdOtherEnergyUpdateWithoutCarbonFootprintInput>, HouseholdOtherEnergyUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type TransportationUpdateOneRequiredWithoutCarbonFootprintNestedInput = {
    create?: XOR<TransportationCreateWithoutCarbonFootprintInput, TransportationUncheckedCreateWithoutCarbonFootprintInput>
    connectOrCreate?: TransportationCreateOrConnectWithoutCarbonFootprintInput
    upsert?: TransportationUpsertWithoutCarbonFootprintInput
    connect?: TransportationWhereUniqueInput
    update?: XOR<XOR<TransportationUpdateToOneWithWhereWithoutCarbonFootprintInput, TransportationUpdateWithoutCarbonFootprintInput>, TransportationUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type PrivateVehicleCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<PrivateVehicleCreateWithoutEmissionFactorInput, PrivateVehicleUncheckedCreateWithoutEmissionFactorInput> | PrivateVehicleCreateWithoutEmissionFactorInput[] | PrivateVehicleUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutEmissionFactorInput | PrivateVehicleCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: PrivateVehicleCreateManyEmissionFactorInputEnvelope
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
  }

  export type ElectricityBillCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<ElectricityBillCreateWithoutEmissionFactorInput, ElectricityBillUncheckedCreateWithoutEmissionFactorInput> | ElectricityBillCreateWithoutEmissionFactorInput[] | ElectricityBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutEmissionFactorInput | ElectricityBillCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: ElectricityBillCreateManyEmissionFactorInputEnvelope
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
  }

  export type WaterBillCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<WaterBillCreateWithoutEmissionFactorInput, WaterBillUncheckedCreateWithoutEmissionFactorInput> | WaterBillCreateWithoutEmissionFactorInput[] | WaterBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutEmissionFactorInput | WaterBillCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: WaterBillCreateManyEmissionFactorInputEnvelope
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
  }

  export type OtherEnergyConsumptionCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput> | OtherEnergyConsumptionCreateWithoutEmissionFactorInput[] | OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput | OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: OtherEnergyConsumptionCreateManyEmissionFactorInputEnvelope
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
  }

  export type PrivateVehicleUncheckedCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<PrivateVehicleCreateWithoutEmissionFactorInput, PrivateVehicleUncheckedCreateWithoutEmissionFactorInput> | PrivateVehicleCreateWithoutEmissionFactorInput[] | PrivateVehicleUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutEmissionFactorInput | PrivateVehicleCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: PrivateVehicleCreateManyEmissionFactorInputEnvelope
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
  }

  export type ElectricityBillUncheckedCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<ElectricityBillCreateWithoutEmissionFactorInput, ElectricityBillUncheckedCreateWithoutEmissionFactorInput> | ElectricityBillCreateWithoutEmissionFactorInput[] | ElectricityBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutEmissionFactorInput | ElectricityBillCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: ElectricityBillCreateManyEmissionFactorInputEnvelope
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
  }

  export type WaterBillUncheckedCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<WaterBillCreateWithoutEmissionFactorInput, WaterBillUncheckedCreateWithoutEmissionFactorInput> | WaterBillCreateWithoutEmissionFactorInput[] | WaterBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutEmissionFactorInput | WaterBillCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: WaterBillCreateManyEmissionFactorInputEnvelope
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
  }

  export type OtherEnergyConsumptionUncheckedCreateNestedManyWithoutEmissionFactorInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput> | OtherEnergyConsumptionCreateWithoutEmissionFactorInput[] | OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput | OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput[]
    createMany?: OtherEnergyConsumptionCreateManyEmissionFactorInputEnvelope
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
  }

  export type EnumSourceTypeFieldUpdateOperationsInput = {
    set?: $Enums.SourceType
  }

  export type PrivateVehicleUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<PrivateVehicleCreateWithoutEmissionFactorInput, PrivateVehicleUncheckedCreateWithoutEmissionFactorInput> | PrivateVehicleCreateWithoutEmissionFactorInput[] | PrivateVehicleUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutEmissionFactorInput | PrivateVehicleCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: PrivateVehicleUpsertWithWhereUniqueWithoutEmissionFactorInput | PrivateVehicleUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: PrivateVehicleCreateManyEmissionFactorInputEnvelope
    set?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    disconnect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    delete?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    update?: PrivateVehicleUpdateWithWhereUniqueWithoutEmissionFactorInput | PrivateVehicleUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: PrivateVehicleUpdateManyWithWhereWithoutEmissionFactorInput | PrivateVehicleUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
  }

  export type ElectricityBillUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<ElectricityBillCreateWithoutEmissionFactorInput, ElectricityBillUncheckedCreateWithoutEmissionFactorInput> | ElectricityBillCreateWithoutEmissionFactorInput[] | ElectricityBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutEmissionFactorInput | ElectricityBillCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: ElectricityBillUpsertWithWhereUniqueWithoutEmissionFactorInput | ElectricityBillUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: ElectricityBillCreateManyEmissionFactorInputEnvelope
    set?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    disconnect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    delete?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    update?: ElectricityBillUpdateWithWhereUniqueWithoutEmissionFactorInput | ElectricityBillUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: ElectricityBillUpdateManyWithWhereWithoutEmissionFactorInput | ElectricityBillUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: ElectricityBillScalarWhereInput | ElectricityBillScalarWhereInput[]
  }

  export type WaterBillUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<WaterBillCreateWithoutEmissionFactorInput, WaterBillUncheckedCreateWithoutEmissionFactorInput> | WaterBillCreateWithoutEmissionFactorInput[] | WaterBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutEmissionFactorInput | WaterBillCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: WaterBillUpsertWithWhereUniqueWithoutEmissionFactorInput | WaterBillUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: WaterBillCreateManyEmissionFactorInputEnvelope
    set?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    disconnect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    delete?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    update?: WaterBillUpdateWithWhereUniqueWithoutEmissionFactorInput | WaterBillUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: WaterBillUpdateManyWithWhereWithoutEmissionFactorInput | WaterBillUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: WaterBillScalarWhereInput | WaterBillScalarWhereInput[]
  }

  export type OtherEnergyConsumptionUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput> | OtherEnergyConsumptionCreateWithoutEmissionFactorInput[] | OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput | OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: OtherEnergyConsumptionUpsertWithWhereUniqueWithoutEmissionFactorInput | OtherEnergyConsumptionUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: OtherEnergyConsumptionCreateManyEmissionFactorInputEnvelope
    set?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    disconnect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    delete?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    update?: OtherEnergyConsumptionUpdateWithWhereUniqueWithoutEmissionFactorInput | OtherEnergyConsumptionUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: OtherEnergyConsumptionUpdateManyWithWhereWithoutEmissionFactorInput | OtherEnergyConsumptionUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: OtherEnergyConsumptionScalarWhereInput | OtherEnergyConsumptionScalarWhereInput[]
  }

  export type PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<PrivateVehicleCreateWithoutEmissionFactorInput, PrivateVehicleUncheckedCreateWithoutEmissionFactorInput> | PrivateVehicleCreateWithoutEmissionFactorInput[] | PrivateVehicleUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutEmissionFactorInput | PrivateVehicleCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: PrivateVehicleUpsertWithWhereUniqueWithoutEmissionFactorInput | PrivateVehicleUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: PrivateVehicleCreateManyEmissionFactorInputEnvelope
    set?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    disconnect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    delete?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    update?: PrivateVehicleUpdateWithWhereUniqueWithoutEmissionFactorInput | PrivateVehicleUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: PrivateVehicleUpdateManyWithWhereWithoutEmissionFactorInput | PrivateVehicleUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
  }

  export type ElectricityBillUncheckedUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<ElectricityBillCreateWithoutEmissionFactorInput, ElectricityBillUncheckedCreateWithoutEmissionFactorInput> | ElectricityBillCreateWithoutEmissionFactorInput[] | ElectricityBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: ElectricityBillCreateOrConnectWithoutEmissionFactorInput | ElectricityBillCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: ElectricityBillUpsertWithWhereUniqueWithoutEmissionFactorInput | ElectricityBillUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: ElectricityBillCreateManyEmissionFactorInputEnvelope
    set?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    disconnect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    delete?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    connect?: ElectricityBillWhereUniqueInput | ElectricityBillWhereUniqueInput[]
    update?: ElectricityBillUpdateWithWhereUniqueWithoutEmissionFactorInput | ElectricityBillUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: ElectricityBillUpdateManyWithWhereWithoutEmissionFactorInput | ElectricityBillUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: ElectricityBillScalarWhereInput | ElectricityBillScalarWhereInput[]
  }

  export type WaterBillUncheckedUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<WaterBillCreateWithoutEmissionFactorInput, WaterBillUncheckedCreateWithoutEmissionFactorInput> | WaterBillCreateWithoutEmissionFactorInput[] | WaterBillUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: WaterBillCreateOrConnectWithoutEmissionFactorInput | WaterBillCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: WaterBillUpsertWithWhereUniqueWithoutEmissionFactorInput | WaterBillUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: WaterBillCreateManyEmissionFactorInputEnvelope
    set?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    disconnect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    delete?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    connect?: WaterBillWhereUniqueInput | WaterBillWhereUniqueInput[]
    update?: WaterBillUpdateWithWhereUniqueWithoutEmissionFactorInput | WaterBillUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: WaterBillUpdateManyWithWhereWithoutEmissionFactorInput | WaterBillUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: WaterBillScalarWhereInput | WaterBillScalarWhereInput[]
  }

  export type OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorNestedInput = {
    create?: XOR<OtherEnergyConsumptionCreateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput> | OtherEnergyConsumptionCreateWithoutEmissionFactorInput[] | OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput[]
    connectOrCreate?: OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput | OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput[]
    upsert?: OtherEnergyConsumptionUpsertWithWhereUniqueWithoutEmissionFactorInput | OtherEnergyConsumptionUpsertWithWhereUniqueWithoutEmissionFactorInput[]
    createMany?: OtherEnergyConsumptionCreateManyEmissionFactorInputEnvelope
    set?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    disconnect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    delete?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    connect?: OtherEnergyConsumptionWhereUniqueInput | OtherEnergyConsumptionWhereUniqueInput[]
    update?: OtherEnergyConsumptionUpdateWithWhereUniqueWithoutEmissionFactorInput | OtherEnergyConsumptionUpdateWithWhereUniqueWithoutEmissionFactorInput[]
    updateMany?: OtherEnergyConsumptionUpdateManyWithWhereWithoutEmissionFactorInput | OtherEnergyConsumptionUpdateManyWithWhereWithoutEmissionFactorInput[]
    deleteMany?: OtherEnergyConsumptionScalarWhereInput | OtherEnergyConsumptionScalarWhereInput[]
  }

  export type PrivateVehicleCreateNestedManyWithoutVehiclePropertyInput = {
    create?: XOR<PrivateVehicleCreateWithoutVehiclePropertyInput, PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput> | PrivateVehicleCreateWithoutVehiclePropertyInput[] | PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput | PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput[]
    createMany?: PrivateVehicleCreateManyVehiclePropertyInputEnvelope
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
  }

  export type PrivateVehicleUncheckedCreateNestedManyWithoutVehiclePropertyInput = {
    create?: XOR<PrivateVehicleCreateWithoutVehiclePropertyInput, PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput> | PrivateVehicleCreateWithoutVehiclePropertyInput[] | PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput | PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput[]
    createMany?: PrivateVehicleCreateManyVehiclePropertyInputEnvelope
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
  }

  export type EnumModelTypeFieldUpdateOperationsInput = {
    set?: $Enums.ModelType
  }

  export type PrivateVehicleUpdateManyWithoutVehiclePropertyNestedInput = {
    create?: XOR<PrivateVehicleCreateWithoutVehiclePropertyInput, PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput> | PrivateVehicleCreateWithoutVehiclePropertyInput[] | PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput | PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput[]
    upsert?: PrivateVehicleUpsertWithWhereUniqueWithoutVehiclePropertyInput | PrivateVehicleUpsertWithWhereUniqueWithoutVehiclePropertyInput[]
    createMany?: PrivateVehicleCreateManyVehiclePropertyInputEnvelope
    set?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    disconnect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    delete?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    update?: PrivateVehicleUpdateWithWhereUniqueWithoutVehiclePropertyInput | PrivateVehicleUpdateWithWhereUniqueWithoutVehiclePropertyInput[]
    updateMany?: PrivateVehicleUpdateManyWithWhereWithoutVehiclePropertyInput | PrivateVehicleUpdateManyWithWhereWithoutVehiclePropertyInput[]
    deleteMany?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
  }

  export type PrivateVehicleUncheckedUpdateManyWithoutVehiclePropertyNestedInput = {
    create?: XOR<PrivateVehicleCreateWithoutVehiclePropertyInput, PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput> | PrivateVehicleCreateWithoutVehiclePropertyInput[] | PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput[]
    connectOrCreate?: PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput | PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput[]
    upsert?: PrivateVehicleUpsertWithWhereUniqueWithoutVehiclePropertyInput | PrivateVehicleUpsertWithWhereUniqueWithoutVehiclePropertyInput[]
    createMany?: PrivateVehicleCreateManyVehiclePropertyInputEnvelope
    set?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    disconnect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    delete?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    connect?: PrivateVehicleWhereUniqueInput | PrivateVehicleWhereUniqueInput[]
    update?: PrivateVehicleUpdateWithWhereUniqueWithoutVehiclePropertyInput | PrivateVehicleUpdateWithWhereUniqueWithoutVehiclePropertyInput[]
    updateMany?: PrivateVehicleUpdateManyWithWhereWithoutVehiclePropertyInput | PrivateVehicleUpdateManyWithWhereWithoutVehiclePropertyInput[]
    deleteMany?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
  }

  export type HouseholdCreateNestedOneWithoutPrivateVehiclesInput = {
    create?: XOR<HouseholdCreateWithoutPrivateVehiclesInput, HouseholdUncheckedCreateWithoutPrivateVehiclesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutPrivateVehiclesInput
    connect?: HouseholdWhereUniqueInput
  }

  export type EmissionFactorCreateNestedOneWithoutPrivateVehiclesInput = {
    create?: XOR<EmissionFactorCreateWithoutPrivateVehiclesInput, EmissionFactorUncheckedCreateWithoutPrivateVehiclesInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutPrivateVehiclesInput
    connect?: EmissionFactorWhereUniqueInput
  }

  export type VehiclePropertyCreateNestedOneWithoutPrivateVehiclesInput = {
    create?: XOR<VehiclePropertyCreateWithoutPrivateVehiclesInput, VehiclePropertyUncheckedCreateWithoutPrivateVehiclesInput>
    connectOrCreate?: VehiclePropertyCreateOrConnectWithoutPrivateVehiclesInput
    connect?: VehiclePropertyWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type HouseholdUpdateOneRequiredWithoutPrivateVehiclesNestedInput = {
    create?: XOR<HouseholdCreateWithoutPrivateVehiclesInput, HouseholdUncheckedCreateWithoutPrivateVehiclesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutPrivateVehiclesInput
    upsert?: HouseholdUpsertWithoutPrivateVehiclesInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutPrivateVehiclesInput, HouseholdUpdateWithoutPrivateVehiclesInput>, HouseholdUncheckedUpdateWithoutPrivateVehiclesInput>
  }

  export type EmissionFactorUpdateOneRequiredWithoutPrivateVehiclesNestedInput = {
    create?: XOR<EmissionFactorCreateWithoutPrivateVehiclesInput, EmissionFactorUncheckedCreateWithoutPrivateVehiclesInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutPrivateVehiclesInput
    upsert?: EmissionFactorUpsertWithoutPrivateVehiclesInput
    connect?: EmissionFactorWhereUniqueInput
    update?: XOR<XOR<EmissionFactorUpdateToOneWithWhereWithoutPrivateVehiclesInput, EmissionFactorUpdateWithoutPrivateVehiclesInput>, EmissionFactorUncheckedUpdateWithoutPrivateVehiclesInput>
  }

  export type VehiclePropertyUpdateOneRequiredWithoutPrivateVehiclesNestedInput = {
    create?: XOR<VehiclePropertyCreateWithoutPrivateVehiclesInput, VehiclePropertyUncheckedCreateWithoutPrivateVehiclesInput>
    connectOrCreate?: VehiclePropertyCreateOrConnectWithoutPrivateVehiclesInput
    upsert?: VehiclePropertyUpsertWithoutPrivateVehiclesInput
    connect?: VehiclePropertyWhereUniqueInput
    update?: XOR<XOR<VehiclePropertyUpdateToOneWithWhereWithoutPrivateVehiclesInput, VehiclePropertyUpdateWithoutPrivateVehiclesInput>, VehiclePropertyUncheckedUpdateWithoutPrivateVehiclesInput>
  }

  export type HouseholdCreateNestedOneWithoutTransportationsInput = {
    create?: XOR<HouseholdCreateWithoutTransportationsInput, HouseholdUncheckedCreateWithoutTransportationsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutTransportationsInput
    connect?: HouseholdWhereUniqueInput
  }

  export type CarbonFootprintCreateNestedOneWithoutTransportationInput = {
    create?: XOR<CarbonFootprintCreateWithoutTransportationInput, CarbonFootprintUncheckedCreateWithoutTransportationInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutTransportationInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type CarbonFootprintUncheckedCreateNestedOneWithoutTransportationInput = {
    create?: XOR<CarbonFootprintCreateWithoutTransportationInput, CarbonFootprintUncheckedCreateWithoutTransportationInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutTransportationInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type HouseholdUpdateOneRequiredWithoutTransportationsNestedInput = {
    create?: XOR<HouseholdCreateWithoutTransportationsInput, HouseholdUncheckedCreateWithoutTransportationsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutTransportationsInput
    upsert?: HouseholdUpsertWithoutTransportationsInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutTransportationsInput, HouseholdUpdateWithoutTransportationsInput>, HouseholdUncheckedUpdateWithoutTransportationsInput>
  }

  export type CarbonFootprintUpdateOneWithoutTransportationNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutTransportationInput, CarbonFootprintUncheckedCreateWithoutTransportationInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutTransportationInput
    upsert?: CarbonFootprintUpsertWithoutTransportationInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutTransportationInput, CarbonFootprintUpdateWithoutTransportationInput>, CarbonFootprintUncheckedUpdateWithoutTransportationInput>
  }

  export type CarbonFootprintUncheckedUpdateOneWithoutTransportationNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutTransportationInput, CarbonFootprintUncheckedCreateWithoutTransportationInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutTransportationInput
    upsert?: CarbonFootprintUpsertWithoutTransportationInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutTransportationInput, CarbonFootprintUpdateWithoutTransportationInput>, CarbonFootprintUncheckedUpdateWithoutTransportationInput>
  }

  export type HouseholdCreateNestedOneWithoutHouseholdElectricitiesInput = {
    create?: XOR<HouseholdCreateWithoutHouseholdElectricitiesInput, HouseholdUncheckedCreateWithoutHouseholdElectricitiesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutHouseholdElectricitiesInput
    connect?: HouseholdWhereUniqueInput
  }

  export type CarbonFootprintCreateNestedOneWithoutHouseholdElectricityInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdElectricityInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdElectricityInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdElectricityInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type HouseholdUpdateOneRequiredWithoutHouseholdElectricitiesNestedInput = {
    create?: XOR<HouseholdCreateWithoutHouseholdElectricitiesInput, HouseholdUncheckedCreateWithoutHouseholdElectricitiesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutHouseholdElectricitiesInput
    upsert?: HouseholdUpsertWithoutHouseholdElectricitiesInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutHouseholdElectricitiesInput, HouseholdUpdateWithoutHouseholdElectricitiesInput>, HouseholdUncheckedUpdateWithoutHouseholdElectricitiesInput>
  }

  export type CarbonFootprintUpdateOneWithoutHouseholdElectricityNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdElectricityInput
    upsert?: CarbonFootprintUpsertWithoutHouseholdElectricityInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutHouseholdElectricityInput, CarbonFootprintUpdateWithoutHouseholdElectricityInput>, CarbonFootprintUncheckedUpdateWithoutHouseholdElectricityInput>
  }

  export type CarbonFootprintUncheckedUpdateOneWithoutHouseholdElectricityNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdElectricityInput
    upsert?: CarbonFootprintUpsertWithoutHouseholdElectricityInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutHouseholdElectricityInput, CarbonFootprintUpdateWithoutHouseholdElectricityInput>, CarbonFootprintUncheckedUpdateWithoutHouseholdElectricityInput>
  }

  export type HouseholdCreateNestedOneWithoutElectricityBillsInput = {
    create?: XOR<HouseholdCreateWithoutElectricityBillsInput, HouseholdUncheckedCreateWithoutElectricityBillsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutElectricityBillsInput
    connect?: HouseholdWhereUniqueInput
  }

  export type EmissionFactorCreateNestedOneWithoutElectricityBillsInput = {
    create?: XOR<EmissionFactorCreateWithoutElectricityBillsInput, EmissionFactorUncheckedCreateWithoutElectricityBillsInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutElectricityBillsInput
    connect?: EmissionFactorWhereUniqueInput
  }

  export type HouseholdUpdateOneRequiredWithoutElectricityBillsNestedInput = {
    create?: XOR<HouseholdCreateWithoutElectricityBillsInput, HouseholdUncheckedCreateWithoutElectricityBillsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutElectricityBillsInput
    upsert?: HouseholdUpsertWithoutElectricityBillsInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutElectricityBillsInput, HouseholdUpdateWithoutElectricityBillsInput>, HouseholdUncheckedUpdateWithoutElectricityBillsInput>
  }

  export type EmissionFactorUpdateOneRequiredWithoutElectricityBillsNestedInput = {
    create?: XOR<EmissionFactorCreateWithoutElectricityBillsInput, EmissionFactorUncheckedCreateWithoutElectricityBillsInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutElectricityBillsInput
    upsert?: EmissionFactorUpsertWithoutElectricityBillsInput
    connect?: EmissionFactorWhereUniqueInput
    update?: XOR<XOR<EmissionFactorUpdateToOneWithWhereWithoutElectricityBillsInput, EmissionFactorUpdateWithoutElectricityBillsInput>, EmissionFactorUncheckedUpdateWithoutElectricityBillsInput>
  }

  export type HouseholdCreateNestedOneWithoutHouseholdWaterSuppliesInput = {
    create?: XOR<HouseholdCreateWithoutHouseholdWaterSuppliesInput, HouseholdUncheckedCreateWithoutHouseholdWaterSuppliesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutHouseholdWaterSuppliesInput
    connect?: HouseholdWhereUniqueInput
  }

  export type CarbonFootprintCreateNestedOneWithoutHouseholdWaterSupplyInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdWaterSupplyInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdWaterSupplyInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdWaterSupplyInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type HouseholdUpdateOneRequiredWithoutHouseholdWaterSuppliesNestedInput = {
    create?: XOR<HouseholdCreateWithoutHouseholdWaterSuppliesInput, HouseholdUncheckedCreateWithoutHouseholdWaterSuppliesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutHouseholdWaterSuppliesInput
    upsert?: HouseholdUpsertWithoutHouseholdWaterSuppliesInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutHouseholdWaterSuppliesInput, HouseholdUpdateWithoutHouseholdWaterSuppliesInput>, HouseholdUncheckedUpdateWithoutHouseholdWaterSuppliesInput>
  }

  export type CarbonFootprintUpdateOneWithoutHouseholdWaterSupplyNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdWaterSupplyInput
    upsert?: CarbonFootprintUpsertWithoutHouseholdWaterSupplyInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutHouseholdWaterSupplyInput, CarbonFootprintUpdateWithoutHouseholdWaterSupplyInput>, CarbonFootprintUncheckedUpdateWithoutHouseholdWaterSupplyInput>
  }

  export type CarbonFootprintUncheckedUpdateOneWithoutHouseholdWaterSupplyNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdWaterSupplyInput
    upsert?: CarbonFootprintUpsertWithoutHouseholdWaterSupplyInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutHouseholdWaterSupplyInput, CarbonFootprintUpdateWithoutHouseholdWaterSupplyInput>, CarbonFootprintUncheckedUpdateWithoutHouseholdWaterSupplyInput>
  }

  export type HouseholdCreateNestedOneWithoutWaterBillsInput = {
    create?: XOR<HouseholdCreateWithoutWaterBillsInput, HouseholdUncheckedCreateWithoutWaterBillsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutWaterBillsInput
    connect?: HouseholdWhereUniqueInput
  }

  export type EmissionFactorCreateNestedOneWithoutWaterBillsInput = {
    create?: XOR<EmissionFactorCreateWithoutWaterBillsInput, EmissionFactorUncheckedCreateWithoutWaterBillsInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutWaterBillsInput
    connect?: EmissionFactorWhereUniqueInput
  }

  export type HouseholdUpdateOneRequiredWithoutWaterBillsNestedInput = {
    create?: XOR<HouseholdCreateWithoutWaterBillsInput, HouseholdUncheckedCreateWithoutWaterBillsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutWaterBillsInput
    upsert?: HouseholdUpsertWithoutWaterBillsInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutWaterBillsInput, HouseholdUpdateWithoutWaterBillsInput>, HouseholdUncheckedUpdateWithoutWaterBillsInput>
  }

  export type EmissionFactorUpdateOneRequiredWithoutWaterBillsNestedInput = {
    create?: XOR<EmissionFactorCreateWithoutWaterBillsInput, EmissionFactorUncheckedCreateWithoutWaterBillsInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutWaterBillsInput
    upsert?: EmissionFactorUpsertWithoutWaterBillsInput
    connect?: EmissionFactorWhereUniqueInput
    update?: XOR<XOR<EmissionFactorUpdateToOneWithWhereWithoutWaterBillsInput, EmissionFactorUpdateWithoutWaterBillsInput>, EmissionFactorUncheckedUpdateWithoutWaterBillsInput>
  }

  export type HouseholdCreateNestedOneWithoutHouseholdOtherEnergiesInput = {
    create?: XOR<HouseholdCreateWithoutHouseholdOtherEnergiesInput, HouseholdUncheckedCreateWithoutHouseholdOtherEnergiesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutHouseholdOtherEnergiesInput
    connect?: HouseholdWhereUniqueInput
  }

  export type CarbonFootprintCreateNestedOneWithoutHouseholdOtherEnergyInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdOtherEnergyInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdOtherEnergyInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdOtherEnergyInput
    connect?: CarbonFootprintWhereUniqueInput
  }

  export type HouseholdUpdateOneRequiredWithoutHouseholdOtherEnergiesNestedInput = {
    create?: XOR<HouseholdCreateWithoutHouseholdOtherEnergiesInput, HouseholdUncheckedCreateWithoutHouseholdOtherEnergiesInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutHouseholdOtherEnergiesInput
    upsert?: HouseholdUpsertWithoutHouseholdOtherEnergiesInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutHouseholdOtherEnergiesInput, HouseholdUpdateWithoutHouseholdOtherEnergiesInput>, HouseholdUncheckedUpdateWithoutHouseholdOtherEnergiesInput>
  }

  export type CarbonFootprintUpdateOneWithoutHouseholdOtherEnergyNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdOtherEnergyInput
    upsert?: CarbonFootprintUpsertWithoutHouseholdOtherEnergyInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutHouseholdOtherEnergyInput, CarbonFootprintUpdateWithoutHouseholdOtherEnergyInput>, CarbonFootprintUncheckedUpdateWithoutHouseholdOtherEnergyInput>
  }

  export type CarbonFootprintUncheckedUpdateOneWithoutHouseholdOtherEnergyNestedInput = {
    create?: XOR<CarbonFootprintCreateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput>
    connectOrCreate?: CarbonFootprintCreateOrConnectWithoutHouseholdOtherEnergyInput
    upsert?: CarbonFootprintUpsertWithoutHouseholdOtherEnergyInput
    disconnect?: CarbonFootprintWhereInput | boolean
    delete?: CarbonFootprintWhereInput | boolean
    connect?: CarbonFootprintWhereUniqueInput
    update?: XOR<XOR<CarbonFootprintUpdateToOneWithWhereWithoutHouseholdOtherEnergyInput, CarbonFootprintUpdateWithoutHouseholdOtherEnergyInput>, CarbonFootprintUncheckedUpdateWithoutHouseholdOtherEnergyInput>
  }

  export type HouseholdCreateNestedOneWithoutOtherEnergyConsumptionsInput = {
    create?: XOR<HouseholdCreateWithoutOtherEnergyConsumptionsInput, HouseholdUncheckedCreateWithoutOtherEnergyConsumptionsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutOtherEnergyConsumptionsInput
    connect?: HouseholdWhereUniqueInput
  }

  export type EmissionFactorCreateNestedOneWithoutOtherEnergyConsumptionsInput = {
    create?: XOR<EmissionFactorCreateWithoutOtherEnergyConsumptionsInput, EmissionFactorUncheckedCreateWithoutOtherEnergyConsumptionsInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutOtherEnergyConsumptionsInput
    connect?: EmissionFactorWhereUniqueInput
  }

  export type EnumEnergyUsageTypeFieldUpdateOperationsInput = {
    set?: $Enums.EnergyUsageType
  }

  export type HouseholdUpdateOneRequiredWithoutOtherEnergyConsumptionsNestedInput = {
    create?: XOR<HouseholdCreateWithoutOtherEnergyConsumptionsInput, HouseholdUncheckedCreateWithoutOtherEnergyConsumptionsInput>
    connectOrCreate?: HouseholdCreateOrConnectWithoutOtherEnergyConsumptionsInput
    upsert?: HouseholdUpsertWithoutOtherEnergyConsumptionsInput
    connect?: HouseholdWhereUniqueInput
    update?: XOR<XOR<HouseholdUpdateToOneWithWhereWithoutOtherEnergyConsumptionsInput, HouseholdUpdateWithoutOtherEnergyConsumptionsInput>, HouseholdUncheckedUpdateWithoutOtherEnergyConsumptionsInput>
  }

  export type EmissionFactorUpdateOneRequiredWithoutOtherEnergyConsumptionsNestedInput = {
    create?: XOR<EmissionFactorCreateWithoutOtherEnergyConsumptionsInput, EmissionFactorUncheckedCreateWithoutOtherEnergyConsumptionsInput>
    connectOrCreate?: EmissionFactorCreateOrConnectWithoutOtherEnergyConsumptionsInput
    upsert?: EmissionFactorUpsertWithoutOtherEnergyConsumptionsInput
    connect?: EmissionFactorWhereUniqueInput
    update?: XOR<XOR<EmissionFactorUpdateToOneWithWhereWithoutOtherEnergyConsumptionsInput, EmissionFactorUpdateWithoutOtherEnergyConsumptionsInput>, EmissionFactorUncheckedUpdateWithoutOtherEnergyConsumptionsInput>
  }

  export type ProfilePermissionCreateNestedManyWithoutProfileInput = {
    create?: XOR<ProfilePermissionCreateWithoutProfileInput, ProfilePermissionUncheckedCreateWithoutProfileInput> | ProfilePermissionCreateWithoutProfileInput[] | ProfilePermissionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutProfileInput | ProfilePermissionCreateOrConnectWithoutProfileInput[]
    createMany?: ProfilePermissionCreateManyProfileInputEnvelope
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
  }

  export type ProfilePermissionUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<ProfilePermissionCreateWithoutProfileInput, ProfilePermissionUncheckedCreateWithoutProfileInput> | ProfilePermissionCreateWithoutProfileInput[] | ProfilePermissionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutProfileInput | ProfilePermissionCreateOrConnectWithoutProfileInput[]
    createMany?: ProfilePermissionCreateManyProfileInputEnvelope
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
  }

  export type ProfilePermissionUpdateManyWithoutProfileNestedInput = {
    create?: XOR<ProfilePermissionCreateWithoutProfileInput, ProfilePermissionUncheckedCreateWithoutProfileInput> | ProfilePermissionCreateWithoutProfileInput[] | ProfilePermissionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutProfileInput | ProfilePermissionCreateOrConnectWithoutProfileInput[]
    upsert?: ProfilePermissionUpsertWithWhereUniqueWithoutProfileInput | ProfilePermissionUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: ProfilePermissionCreateManyProfileInputEnvelope
    set?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    disconnect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    delete?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    update?: ProfilePermissionUpdateWithWhereUniqueWithoutProfileInput | ProfilePermissionUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: ProfilePermissionUpdateManyWithWhereWithoutProfileInput | ProfilePermissionUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: ProfilePermissionScalarWhereInput | ProfilePermissionScalarWhereInput[]
  }

  export type ProfilePermissionUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<ProfilePermissionCreateWithoutProfileInput, ProfilePermissionUncheckedCreateWithoutProfileInput> | ProfilePermissionCreateWithoutProfileInput[] | ProfilePermissionUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutProfileInput | ProfilePermissionCreateOrConnectWithoutProfileInput[]
    upsert?: ProfilePermissionUpsertWithWhereUniqueWithoutProfileInput | ProfilePermissionUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: ProfilePermissionCreateManyProfileInputEnvelope
    set?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    disconnect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    delete?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    update?: ProfilePermissionUpdateWithWhereUniqueWithoutProfileInput | ProfilePermissionUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: ProfilePermissionUpdateManyWithWhereWithoutProfileInput | ProfilePermissionUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: ProfilePermissionScalarWhereInput | ProfilePermissionScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutProfilePermissionsInput = {
    create?: XOR<ProfileCreateWithoutProfilePermissionsInput, ProfileUncheckedCreateWithoutProfilePermissionsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfilePermissionsInput
    connect?: ProfileWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutProfilePermissionsInput = {
    create?: XOR<TeamCreateWithoutProfilePermissionsInput, TeamUncheckedCreateWithoutProfilePermissionsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutProfilePermissionsInput
    connect?: TeamWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutProfilePermissionsNestedInput = {
    create?: XOR<ProfileCreateWithoutProfilePermissionsInput, ProfileUncheckedCreateWithoutProfilePermissionsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfilePermissionsInput
    upsert?: ProfileUpsertWithoutProfilePermissionsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutProfilePermissionsInput, ProfileUpdateWithoutProfilePermissionsInput>, ProfileUncheckedUpdateWithoutProfilePermissionsInput>
  }

  export type TeamUpdateOneRequiredWithoutProfilePermissionsNestedInput = {
    create?: XOR<TeamCreateWithoutProfilePermissionsInput, TeamUncheckedCreateWithoutProfilePermissionsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutProfilePermissionsInput
    upsert?: TeamUpsertWithoutProfilePermissionsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutProfilePermissionsInput, TeamUpdateWithoutProfilePermissionsInput>, TeamUncheckedUpdateWithoutProfilePermissionsInput>
  }

  export type AddressCreateNestedOneWithoutTeamsInput = {
    create?: XOR<AddressCreateWithoutTeamsInput, AddressUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutTeamsInput
    connect?: AddressWhereUniqueInput
  }

  export type ProfilePermissionCreateNestedManyWithoutTeamInput = {
    create?: XOR<ProfilePermissionCreateWithoutTeamInput, ProfilePermissionUncheckedCreateWithoutTeamInput> | ProfilePermissionCreateWithoutTeamInput[] | ProfilePermissionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutTeamInput | ProfilePermissionCreateOrConnectWithoutTeamInput[]
    createMany?: ProfilePermissionCreateManyTeamInputEnvelope
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
  }

  export type ProfilePermissionUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<ProfilePermissionCreateWithoutTeamInput, ProfilePermissionUncheckedCreateWithoutTeamInput> | ProfilePermissionCreateWithoutTeamInput[] | ProfilePermissionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutTeamInput | ProfilePermissionCreateOrConnectWithoutTeamInput[]
    createMany?: ProfilePermissionCreateManyTeamInputEnvelope
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
  }

  export type EnumMaximumLevelFieldUpdateOperationsInput = {
    set?: $Enums.MaximumLevel
  }

  export type AddressUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<AddressCreateWithoutTeamsInput, AddressUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutTeamsInput
    upsert?: AddressUpsertWithoutTeamsInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutTeamsInput, AddressUpdateWithoutTeamsInput>, AddressUncheckedUpdateWithoutTeamsInput>
  }

  export type ProfilePermissionUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ProfilePermissionCreateWithoutTeamInput, ProfilePermissionUncheckedCreateWithoutTeamInput> | ProfilePermissionCreateWithoutTeamInput[] | ProfilePermissionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutTeamInput | ProfilePermissionCreateOrConnectWithoutTeamInput[]
    upsert?: ProfilePermissionUpsertWithWhereUniqueWithoutTeamInput | ProfilePermissionUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ProfilePermissionCreateManyTeamInputEnvelope
    set?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    disconnect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    delete?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    update?: ProfilePermissionUpdateWithWhereUniqueWithoutTeamInput | ProfilePermissionUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ProfilePermissionUpdateManyWithWhereWithoutTeamInput | ProfilePermissionUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ProfilePermissionScalarWhereInput | ProfilePermissionScalarWhereInput[]
  }

  export type ProfilePermissionUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ProfilePermissionCreateWithoutTeamInput, ProfilePermissionUncheckedCreateWithoutTeamInput> | ProfilePermissionCreateWithoutTeamInput[] | ProfilePermissionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProfilePermissionCreateOrConnectWithoutTeamInput | ProfilePermissionCreateOrConnectWithoutTeamInput[]
    upsert?: ProfilePermissionUpsertWithWhereUniqueWithoutTeamInput | ProfilePermissionUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ProfilePermissionCreateManyTeamInputEnvelope
    set?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    disconnect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    delete?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    connect?: ProfilePermissionWhereUniqueInput | ProfilePermissionWhereUniqueInput[]
    update?: ProfilePermissionUpdateWithWhereUniqueWithoutTeamInput | ProfilePermissionUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ProfilePermissionUpdateManyWithWhereWithoutTeamInput | ProfilePermissionUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ProfilePermissionScalarWhereInput | ProfilePermissionScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumHouseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseType | EnumHouseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseTypeFilter<$PrismaModel> | $Enums.HouseType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumHouseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseType | EnumHouseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseType[] | ListEnumHouseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseTypeWithAggregatesFilter<$PrismaModel> | $Enums.HouseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHouseTypeFilter<$PrismaModel>
    _max?: NestedEnumHouseTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SourceType | EnumSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSourceTypeFilter<$PrismaModel> | $Enums.SourceType
  }

  export type NestedEnumSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SourceType | EnumSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SourceType[] | ListEnumSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.SourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumSourceTypeFilter<$PrismaModel>
  }

  export type NestedEnumModelTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelType | EnumModelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumModelTypeFilter<$PrismaModel> | $Enums.ModelType
  }

  export type NestedEnumModelTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ModelType | EnumModelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ModelType[] | ListEnumModelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumModelTypeWithAggregatesFilter<$PrismaModel> | $Enums.ModelType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumModelTypeFilter<$PrismaModel>
    _max?: NestedEnumModelTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumEnergyUsageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EnergyUsageType | EnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEnergyUsageTypeFilter<$PrismaModel> | $Enums.EnergyUsageType
  }

  export type NestedEnumEnergyUsageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnergyUsageType | EnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnergyUsageType[] | ListEnumEnergyUsageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEnergyUsageTypeWithAggregatesFilter<$PrismaModel> | $Enums.EnergyUsageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnergyUsageTypeFilter<$PrismaModel>
    _max?: NestedEnumEnergyUsageTypeFilter<$PrismaModel>
  }

  export type NestedEnumMaximumLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.MaximumLevel | EnumMaximumLevelFieldRefInput<$PrismaModel>
    in?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumMaximumLevelFilter<$PrismaModel> | $Enums.MaximumLevel
  }

  export type NestedEnumMaximumLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaximumLevel | EnumMaximumLevelFieldRefInput<$PrismaModel>
    in?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaximumLevel[] | ListEnumMaximumLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumMaximumLevelWithAggregatesFilter<$PrismaModel> | $Enums.MaximumLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaximumLevelFilter<$PrismaModel>
    _max?: NestedEnumMaximumLevelFilter<$PrismaModel>
  }

  export type HouseholdCreateWithoutAddressInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutAddressInput = {
    id?: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutAddressInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutAddressInput, HouseholdUncheckedCreateWithoutAddressInput>
  }

  export type HouseholdCreateManyAddressInputEnvelope = {
    data: HouseholdCreateManyAddressInput | HouseholdCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutAddressInput = {
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profilePermissions?: ProfilePermissionCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutAddressInput = {
    id?: number
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profilePermissions?: ProfilePermissionUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutAddressInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutAddressInput, TeamUncheckedCreateWithoutAddressInput>
  }

  export type TeamCreateManyAddressInputEnvelope = {
    data: TeamCreateManyAddressInput | TeamCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type HouseholdUpsertWithWhereUniqueWithoutAddressInput = {
    where: HouseholdWhereUniqueInput
    update: XOR<HouseholdUpdateWithoutAddressInput, HouseholdUncheckedUpdateWithoutAddressInput>
    create: XOR<HouseholdCreateWithoutAddressInput, HouseholdUncheckedCreateWithoutAddressInput>
  }

  export type HouseholdUpdateWithWhereUniqueWithoutAddressInput = {
    where: HouseholdWhereUniqueInput
    data: XOR<HouseholdUpdateWithoutAddressInput, HouseholdUncheckedUpdateWithoutAddressInput>
  }

  export type HouseholdUpdateManyWithWhereWithoutAddressInput = {
    where: HouseholdScalarWhereInput
    data: XOR<HouseholdUpdateManyMutationInput, HouseholdUncheckedUpdateManyWithoutAddressInput>
  }

  export type HouseholdScalarWhereInput = {
    AND?: HouseholdScalarWhereInput | HouseholdScalarWhereInput[]
    OR?: HouseholdScalarWhereInput[]
    NOT?: HouseholdScalarWhereInput | HouseholdScalarWhereInput[]
    id?: IntFilter<"Household"> | number
    addressId?: IntFilter<"Household"> | number
    addressDetail?: StringFilter<"Household"> | string
    houseType?: EnumHouseTypeFilter<"Household"> | $Enums.HouseType
    recordedDate?: DateTimeFilter<"Household"> | Date | string
    createdAt?: DateTimeFilter<"Household"> | Date | string
    createdBy?: DateTimeFilter<"Household"> | Date | string
    updatedAt?: DateTimeFilter<"Household"> | Date | string
    updatedBy?: DateTimeFilter<"Household"> | Date | string
  }

  export type TeamUpsertWithWhereUniqueWithoutAddressInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutAddressInput, TeamUncheckedUpdateWithoutAddressInput>
    create: XOR<TeamCreateWithoutAddressInput, TeamUncheckedCreateWithoutAddressInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutAddressInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutAddressInput, TeamUncheckedUpdateWithoutAddressInput>
  }

  export type TeamUpdateManyWithWhereWithoutAddressInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutAddressInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: IntFilter<"Team"> | number
    addressId?: IntFilter<"Team"> | number
    title?: StringFilter<"Team"> | string
    maximumLevel?: EnumMaximumLevelFilter<"Team"> | $Enums.MaximumLevel
    createdAt?: DateTimeFilter<"Team"> | Date | string
    createdBy?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    updatedBy?: DateTimeFilter<"Team"> | Date | string
  }

  export type AddressCreateWithoutHouseholdsInput = {
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    teams?: TeamCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutHouseholdsInput = {
    id?: number
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    teams?: TeamUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutHouseholdsInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutHouseholdsInput, AddressUncheckedCreateWithoutHouseholdsInput>
  }

  export type CarbonFootprintCreateWithoutHouseholdInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    householdElectricity: HouseholdElectricityCreateNestedOneWithoutCarbonFootprintInput
    householdWaterSupply: HouseholdWaterSupplyCreateNestedOneWithoutCarbonFootprintInput
    householdOtherEnergy: HouseholdOtherEnergyCreateNestedOneWithoutCarbonFootprintInput
    transportation: TransportationCreateNestedOneWithoutCarbonFootprintInput
  }

  export type CarbonFootprintUncheckedCreateWithoutHouseholdInput = {
    id?: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintCreateOrConnectWithoutHouseholdInput = {
    where: CarbonFootprintWhereUniqueInput
    create: XOR<CarbonFootprintCreateWithoutHouseholdInput, CarbonFootprintUncheckedCreateWithoutHouseholdInput>
  }

  export type CarbonFootprintCreateManyHouseholdInputEnvelope = {
    data: CarbonFootprintCreateManyHouseholdInput | CarbonFootprintCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type PrivateVehicleCreateWithoutHouseholdInput = {
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    emissionFactor: EmissionFactorCreateNestedOneWithoutPrivateVehiclesInput
    vehicleProperty: VehiclePropertyCreateNestedOneWithoutPrivateVehiclesInput
  }

  export type PrivateVehicleUncheckedCreateWithoutHouseholdInput = {
    id?: number
    emissionFactorId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleCreateOrConnectWithoutHouseholdInput = {
    where: PrivateVehicleWhereUniqueInput
    create: XOR<PrivateVehicleCreateWithoutHouseholdInput, PrivateVehicleUncheckedCreateWithoutHouseholdInput>
  }

  export type PrivateVehicleCreateManyHouseholdInputEnvelope = {
    data: PrivateVehicleCreateManyHouseholdInput | PrivateVehicleCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type TransportationCreateWithoutHouseholdInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutTransportationInput
  }

  export type TransportationUncheckedCreateWithoutHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutTransportationInput
  }

  export type TransportationCreateOrConnectWithoutHouseholdInput = {
    where: TransportationWhereUniqueInput
    create: XOR<TransportationCreateWithoutHouseholdInput, TransportationUncheckedCreateWithoutHouseholdInput>
  }

  export type TransportationCreateManyHouseholdInputEnvelope = {
    data: TransportationCreateManyHouseholdInput | TransportationCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type HouseholdElectricityCreateWithoutHouseholdInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutHouseholdElectricityInput
  }

  export type HouseholdElectricityUncheckedCreateWithoutHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdElectricityInput
  }

  export type HouseholdElectricityCreateOrConnectWithoutHouseholdInput = {
    where: HouseholdElectricityWhereUniqueInput
    create: XOR<HouseholdElectricityCreateWithoutHouseholdInput, HouseholdElectricityUncheckedCreateWithoutHouseholdInput>
  }

  export type HouseholdElectricityCreateManyHouseholdInputEnvelope = {
    data: HouseholdElectricityCreateManyHouseholdInput | HouseholdElectricityCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type WaterBillCreateWithoutHouseholdInput = {
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    emissionFactor: EmissionFactorCreateNestedOneWithoutWaterBillsInput
  }

  export type WaterBillUncheckedCreateWithoutHouseholdInput = {
    id?: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type WaterBillCreateOrConnectWithoutHouseholdInput = {
    where: WaterBillWhereUniqueInput
    create: XOR<WaterBillCreateWithoutHouseholdInput, WaterBillUncheckedCreateWithoutHouseholdInput>
  }

  export type WaterBillCreateManyHouseholdInputEnvelope = {
    data: WaterBillCreateManyHouseholdInput | WaterBillCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type HouseholdOtherEnergyCreateWithoutHouseholdInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutHouseholdOtherEnergyInput
  }

  export type HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdOtherEnergyInput
  }

  export type HouseholdOtherEnergyCreateOrConnectWithoutHouseholdInput = {
    where: HouseholdOtherEnergyWhereUniqueInput
    create: XOR<HouseholdOtherEnergyCreateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput>
  }

  export type HouseholdOtherEnergyCreateManyHouseholdInputEnvelope = {
    data: HouseholdOtherEnergyCreateManyHouseholdInput | HouseholdOtherEnergyCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type ElectricityBillCreateWithoutHouseholdInput = {
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    emissionFactor: EmissionFactorCreateNestedOneWithoutElectricityBillsInput
  }

  export type ElectricityBillUncheckedCreateWithoutHouseholdInput = {
    id?: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ElectricityBillCreateOrConnectWithoutHouseholdInput = {
    where: ElectricityBillWhereUniqueInput
    create: XOR<ElectricityBillCreateWithoutHouseholdInput, ElectricityBillUncheckedCreateWithoutHouseholdInput>
  }

  export type ElectricityBillCreateManyHouseholdInputEnvelope = {
    data: ElectricityBillCreateManyHouseholdInput | ElectricityBillCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type HouseholdWaterSupplyCreateWithoutHouseholdInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintCreateNestedOneWithoutHouseholdWaterSupplyInput
  }

  export type HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprint?: CarbonFootprintUncheckedCreateNestedOneWithoutHouseholdWaterSupplyInput
  }

  export type HouseholdWaterSupplyCreateOrConnectWithoutHouseholdInput = {
    where: HouseholdWaterSupplyWhereUniqueInput
    create: XOR<HouseholdWaterSupplyCreateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput>
  }

  export type HouseholdWaterSupplyCreateManyHouseholdInputEnvelope = {
    data: HouseholdWaterSupplyCreateManyHouseholdInput | HouseholdWaterSupplyCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type OtherEnergyConsumptionCreateWithoutHouseholdInput = {
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    emissionFactor: EmissionFactorCreateNestedOneWithoutOtherEnergyConsumptionsInput
  }

  export type OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput = {
    id?: number
    emissionFactorId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type OtherEnergyConsumptionCreateOrConnectWithoutHouseholdInput = {
    where: OtherEnergyConsumptionWhereUniqueInput
    create: XOR<OtherEnergyConsumptionCreateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput>
  }

  export type OtherEnergyConsumptionCreateManyHouseholdInputEnvelope = {
    data: OtherEnergyConsumptionCreateManyHouseholdInput | OtherEnergyConsumptionCreateManyHouseholdInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutHouseholdsInput = {
    update: XOR<AddressUpdateWithoutHouseholdsInput, AddressUncheckedUpdateWithoutHouseholdsInput>
    create: XOR<AddressCreateWithoutHouseholdsInput, AddressUncheckedCreateWithoutHouseholdsInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutHouseholdsInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutHouseholdsInput, AddressUncheckedUpdateWithoutHouseholdsInput>
  }

  export type AddressUpdateWithoutHouseholdsInput = {
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    teams?: TeamUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutHouseholdsInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    teams?: TeamUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type CarbonFootprintUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: CarbonFootprintWhereUniqueInput
    update: XOR<CarbonFootprintUpdateWithoutHouseholdInput, CarbonFootprintUncheckedUpdateWithoutHouseholdInput>
    create: XOR<CarbonFootprintCreateWithoutHouseholdInput, CarbonFootprintUncheckedCreateWithoutHouseholdInput>
  }

  export type CarbonFootprintUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: CarbonFootprintWhereUniqueInput
    data: XOR<CarbonFootprintUpdateWithoutHouseholdInput, CarbonFootprintUncheckedUpdateWithoutHouseholdInput>
  }

  export type CarbonFootprintUpdateManyWithWhereWithoutHouseholdInput = {
    where: CarbonFootprintScalarWhereInput
    data: XOR<CarbonFootprintUpdateManyMutationInput, CarbonFootprintUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type CarbonFootprintScalarWhereInput = {
    AND?: CarbonFootprintScalarWhereInput | CarbonFootprintScalarWhereInput[]
    OR?: CarbonFootprintScalarWhereInput[]
    NOT?: CarbonFootprintScalarWhereInput | CarbonFootprintScalarWhereInput[]
    id?: IntFilter<"CarbonFootprint"> | number
    householdId?: IntFilter<"CarbonFootprint"> | number
    householdElectricityId?: IntFilter<"CarbonFootprint"> | number
    householdWaterSupplyId?: IntFilter<"CarbonFootprint"> | number
    householdOtherEnergyId?: IntFilter<"CarbonFootprint"> | number
    transportaionId?: IntFilter<"CarbonFootprint"> | number
    totalCarbonFootprint?: DecimalFilter<"CarbonFootprint"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"CarbonFootprint"> | Date | string
    createdAt?: DateTimeFilter<"CarbonFootprint"> | Date | string
    createdBy?: DateTimeFilter<"CarbonFootprint"> | Date | string
    updatedAt?: DateTimeFilter<"CarbonFootprint"> | Date | string
    updatedBy?: DateTimeFilter<"CarbonFootprint"> | Date | string
  }

  export type PrivateVehicleUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: PrivateVehicleWhereUniqueInput
    update: XOR<PrivateVehicleUpdateWithoutHouseholdInput, PrivateVehicleUncheckedUpdateWithoutHouseholdInput>
    create: XOR<PrivateVehicleCreateWithoutHouseholdInput, PrivateVehicleUncheckedCreateWithoutHouseholdInput>
  }

  export type PrivateVehicleUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: PrivateVehicleWhereUniqueInput
    data: XOR<PrivateVehicleUpdateWithoutHouseholdInput, PrivateVehicleUncheckedUpdateWithoutHouseholdInput>
  }

  export type PrivateVehicleUpdateManyWithWhereWithoutHouseholdInput = {
    where: PrivateVehicleScalarWhereInput
    data: XOR<PrivateVehicleUpdateManyMutationInput, PrivateVehicleUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type PrivateVehicleScalarWhereInput = {
    AND?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
    OR?: PrivateVehicleScalarWhereInput[]
    NOT?: PrivateVehicleScalarWhereInput | PrivateVehicleScalarWhereInput[]
    id?: IntFilter<"PrivateVehicle"> | number
    householdId?: IntFilter<"PrivateVehicle"> | number
    emissionFactorId?: IntFilter<"PrivateVehicle"> | number
    vehiclePropertyId?: IntFilter<"PrivateVehicle"> | number
    startMonthDistance?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFilter<"PrivateVehicle"> | boolean
    carbonEmissionEq?: DecimalFilter<"PrivateVehicle"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"PrivateVehicle"> | Date | string
    createdAt?: DateTimeFilter<"PrivateVehicle"> | Date | string
    createdBy?: DateTimeFilter<"PrivateVehicle"> | Date | string
    updatedAt?: DateTimeFilter<"PrivateVehicle"> | Date | string
    updatedBy?: DateTimeFilter<"PrivateVehicle"> | Date | string
  }

  export type TransportationUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: TransportationWhereUniqueInput
    update: XOR<TransportationUpdateWithoutHouseholdInput, TransportationUncheckedUpdateWithoutHouseholdInput>
    create: XOR<TransportationCreateWithoutHouseholdInput, TransportationUncheckedCreateWithoutHouseholdInput>
  }

  export type TransportationUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: TransportationWhereUniqueInput
    data: XOR<TransportationUpdateWithoutHouseholdInput, TransportationUncheckedUpdateWithoutHouseholdInput>
  }

  export type TransportationUpdateManyWithWhereWithoutHouseholdInput = {
    where: TransportationScalarWhereInput
    data: XOR<TransportationUpdateManyMutationInput, TransportationUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type TransportationScalarWhereInput = {
    AND?: TransportationScalarWhereInput | TransportationScalarWhereInput[]
    OR?: TransportationScalarWhereInput[]
    NOT?: TransportationScalarWhereInput | TransportationScalarWhereInput[]
    id?: IntFilter<"Transportation"> | number
    householdId?: IntFilter<"Transportation"> | number
    totalCarbonFootprint?: DecimalFilter<"Transportation"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"Transportation"> | Date | string
    createdAt?: DateTimeFilter<"Transportation"> | Date | string
    createdBy?: DateTimeFilter<"Transportation"> | Date | string
    updatedAt?: DateTimeFilter<"Transportation"> | Date | string
    updatedBy?: DateTimeFilter<"Transportation"> | Date | string
  }

  export type HouseholdElectricityUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: HouseholdElectricityWhereUniqueInput
    update: XOR<HouseholdElectricityUpdateWithoutHouseholdInput, HouseholdElectricityUncheckedUpdateWithoutHouseholdInput>
    create: XOR<HouseholdElectricityCreateWithoutHouseholdInput, HouseholdElectricityUncheckedCreateWithoutHouseholdInput>
  }

  export type HouseholdElectricityUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: HouseholdElectricityWhereUniqueInput
    data: XOR<HouseholdElectricityUpdateWithoutHouseholdInput, HouseholdElectricityUncheckedUpdateWithoutHouseholdInput>
  }

  export type HouseholdElectricityUpdateManyWithWhereWithoutHouseholdInput = {
    where: HouseholdElectricityScalarWhereInput
    data: XOR<HouseholdElectricityUpdateManyMutationInput, HouseholdElectricityUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type HouseholdElectricityScalarWhereInput = {
    AND?: HouseholdElectricityScalarWhereInput | HouseholdElectricityScalarWhereInput[]
    OR?: HouseholdElectricityScalarWhereInput[]
    NOT?: HouseholdElectricityScalarWhereInput | HouseholdElectricityScalarWhereInput[]
    id?: IntFilter<"HouseholdElectricity"> | number
    householdId?: IntFilter<"HouseholdElectricity"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdElectricity"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdElectricity"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdElectricity"> | Date | string
  }

  export type WaterBillUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: WaterBillWhereUniqueInput
    update: XOR<WaterBillUpdateWithoutHouseholdInput, WaterBillUncheckedUpdateWithoutHouseholdInput>
    create: XOR<WaterBillCreateWithoutHouseholdInput, WaterBillUncheckedCreateWithoutHouseholdInput>
  }

  export type WaterBillUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: WaterBillWhereUniqueInput
    data: XOR<WaterBillUpdateWithoutHouseholdInput, WaterBillUncheckedUpdateWithoutHouseholdInput>
  }

  export type WaterBillUpdateManyWithWhereWithoutHouseholdInput = {
    where: WaterBillScalarWhereInput
    data: XOR<WaterBillUpdateManyMutationInput, WaterBillUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type WaterBillScalarWhereInput = {
    AND?: WaterBillScalarWhereInput | WaterBillScalarWhereInput[]
    OR?: WaterBillScalarWhereInput[]
    NOT?: WaterBillScalarWhereInput | WaterBillScalarWhereInput[]
    id?: IntFilter<"WaterBill"> | number
    householdId?: IntFilter<"WaterBill"> | number
    emissionFactorId?: IntFilter<"WaterBill"> | number
    amountConsumption?: DecimalFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFilter<"WaterBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"WaterBill"> | Date | string
    createdAt?: DateTimeFilter<"WaterBill"> | Date | string
    createdBy?: DateTimeFilter<"WaterBill"> | Date | string
    updatedAt?: DateTimeFilter<"WaterBill"> | Date | string
    updatedBy?: DateTimeFilter<"WaterBill"> | Date | string
  }

  export type HouseholdOtherEnergyUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: HouseholdOtherEnergyWhereUniqueInput
    update: XOR<HouseholdOtherEnergyUpdateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedUpdateWithoutHouseholdInput>
    create: XOR<HouseholdOtherEnergyCreateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedCreateWithoutHouseholdInput>
  }

  export type HouseholdOtherEnergyUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: HouseholdOtherEnergyWhereUniqueInput
    data: XOR<HouseholdOtherEnergyUpdateWithoutHouseholdInput, HouseholdOtherEnergyUncheckedUpdateWithoutHouseholdInput>
  }

  export type HouseholdOtherEnergyUpdateManyWithWhereWithoutHouseholdInput = {
    where: HouseholdOtherEnergyScalarWhereInput
    data: XOR<HouseholdOtherEnergyUpdateManyMutationInput, HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type HouseholdOtherEnergyScalarWhereInput = {
    AND?: HouseholdOtherEnergyScalarWhereInput | HouseholdOtherEnergyScalarWhereInput[]
    OR?: HouseholdOtherEnergyScalarWhereInput[]
    NOT?: HouseholdOtherEnergyScalarWhereInput | HouseholdOtherEnergyScalarWhereInput[]
    id?: IntFilter<"HouseholdOtherEnergy"> | number
    householdId?: IntFilter<"HouseholdOtherEnergy"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdOtherEnergy"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdOtherEnergy"> | Date | string
  }

  export type ElectricityBillUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: ElectricityBillWhereUniqueInput
    update: XOR<ElectricityBillUpdateWithoutHouseholdInput, ElectricityBillUncheckedUpdateWithoutHouseholdInput>
    create: XOR<ElectricityBillCreateWithoutHouseholdInput, ElectricityBillUncheckedCreateWithoutHouseholdInput>
  }

  export type ElectricityBillUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: ElectricityBillWhereUniqueInput
    data: XOR<ElectricityBillUpdateWithoutHouseholdInput, ElectricityBillUncheckedUpdateWithoutHouseholdInput>
  }

  export type ElectricityBillUpdateManyWithWhereWithoutHouseholdInput = {
    where: ElectricityBillScalarWhereInput
    data: XOR<ElectricityBillUpdateManyMutationInput, ElectricityBillUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type ElectricityBillScalarWhereInput = {
    AND?: ElectricityBillScalarWhereInput | ElectricityBillScalarWhereInput[]
    OR?: ElectricityBillScalarWhereInput[]
    NOT?: ElectricityBillScalarWhereInput | ElectricityBillScalarWhereInput[]
    id?: IntFilter<"ElectricityBill"> | number
    householdId?: IntFilter<"ElectricityBill"> | number
    emissionFactorId?: IntFilter<"ElectricityBill"> | number
    amountConsumption?: DecimalFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFilter<"ElectricityBill"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"ElectricityBill"> | Date | string
    createdAt?: DateTimeFilter<"ElectricityBill"> | Date | string
    createdBy?: DateTimeFilter<"ElectricityBill"> | Date | string
    updatedAt?: DateTimeFilter<"ElectricityBill"> | Date | string
    updatedBy?: DateTimeFilter<"ElectricityBill"> | Date | string
  }

  export type HouseholdWaterSupplyUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: HouseholdWaterSupplyWhereUniqueInput
    update: XOR<HouseholdWaterSupplyUpdateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedUpdateWithoutHouseholdInput>
    create: XOR<HouseholdWaterSupplyCreateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedCreateWithoutHouseholdInput>
  }

  export type HouseholdWaterSupplyUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: HouseholdWaterSupplyWhereUniqueInput
    data: XOR<HouseholdWaterSupplyUpdateWithoutHouseholdInput, HouseholdWaterSupplyUncheckedUpdateWithoutHouseholdInput>
  }

  export type HouseholdWaterSupplyUpdateManyWithWhereWithoutHouseholdInput = {
    where: HouseholdWaterSupplyScalarWhereInput
    data: XOR<HouseholdWaterSupplyUpdateManyMutationInput, HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type HouseholdWaterSupplyScalarWhereInput = {
    AND?: HouseholdWaterSupplyScalarWhereInput | HouseholdWaterSupplyScalarWhereInput[]
    OR?: HouseholdWaterSupplyScalarWhereInput[]
    NOT?: HouseholdWaterSupplyScalarWhereInput | HouseholdWaterSupplyScalarWhereInput[]
    id?: IntFilter<"HouseholdWaterSupply"> | number
    householdId?: IntFilter<"HouseholdWaterSupply"> | number
    totalCarbonFootprint?: DecimalFilter<"HouseholdWaterSupply"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    createdAt?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    createdBy?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    updatedAt?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
    updatedBy?: DateTimeFilter<"HouseholdWaterSupply"> | Date | string
  }

  export type OtherEnergyConsumptionUpsertWithWhereUniqueWithoutHouseholdInput = {
    where: OtherEnergyConsumptionWhereUniqueInput
    update: XOR<OtherEnergyConsumptionUpdateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedUpdateWithoutHouseholdInput>
    create: XOR<OtherEnergyConsumptionCreateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedCreateWithoutHouseholdInput>
  }

  export type OtherEnergyConsumptionUpdateWithWhereUniqueWithoutHouseholdInput = {
    where: OtherEnergyConsumptionWhereUniqueInput
    data: XOR<OtherEnergyConsumptionUpdateWithoutHouseholdInput, OtherEnergyConsumptionUncheckedUpdateWithoutHouseholdInput>
  }

  export type OtherEnergyConsumptionUpdateManyWithWhereWithoutHouseholdInput = {
    where: OtherEnergyConsumptionScalarWhereInput
    data: XOR<OtherEnergyConsumptionUpdateManyMutationInput, OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdInput>
  }

  export type OtherEnergyConsumptionScalarWhereInput = {
    AND?: OtherEnergyConsumptionScalarWhereInput | OtherEnergyConsumptionScalarWhereInput[]
    OR?: OtherEnergyConsumptionScalarWhereInput[]
    NOT?: OtherEnergyConsumptionScalarWhereInput | OtherEnergyConsumptionScalarWhereInput[]
    id?: IntFilter<"OtherEnergyConsumption"> | number
    householdId?: IntFilter<"OtherEnergyConsumption"> | number
    emissionFactorId?: IntFilter<"OtherEnergyConsumption"> | number
    energyUsageType?: EnumEnergyUsageTypeFilter<"OtherEnergyConsumption"> | $Enums.EnergyUsageType
    amountConsumption?: DecimalFilter<"OtherEnergyConsumption"> | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    createdAt?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    createdBy?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    updatedAt?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
    updatedBy?: DateTimeFilter<"OtherEnergyConsumption"> | Date | string
  }

  export type HouseholdCreateWithoutCarbonFootprintsInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutCarbonFootprintsInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutCarbonFootprintsInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutCarbonFootprintsInput, HouseholdUncheckedCreateWithoutCarbonFootprintsInput>
  }

  export type HouseholdElectricityCreateWithoutCarbonFootprintInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutHouseholdElectricitiesInput
  }

  export type HouseholdElectricityUncheckedCreateWithoutCarbonFootprintInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdElectricityCreateOrConnectWithoutCarbonFootprintInput = {
    where: HouseholdElectricityWhereUniqueInput
    create: XOR<HouseholdElectricityCreateWithoutCarbonFootprintInput, HouseholdElectricityUncheckedCreateWithoutCarbonFootprintInput>
  }

  export type HouseholdWaterSupplyCreateWithoutCarbonFootprintInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutHouseholdWaterSuppliesInput
  }

  export type HouseholdWaterSupplyUncheckedCreateWithoutCarbonFootprintInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdWaterSupplyCreateOrConnectWithoutCarbonFootprintInput = {
    where: HouseholdWaterSupplyWhereUniqueInput
    create: XOR<HouseholdWaterSupplyCreateWithoutCarbonFootprintInput, HouseholdWaterSupplyUncheckedCreateWithoutCarbonFootprintInput>
  }

  export type HouseholdOtherEnergyCreateWithoutCarbonFootprintInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutHouseholdOtherEnergiesInput
  }

  export type HouseholdOtherEnergyUncheckedCreateWithoutCarbonFootprintInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdOtherEnergyCreateOrConnectWithoutCarbonFootprintInput = {
    where: HouseholdOtherEnergyWhereUniqueInput
    create: XOR<HouseholdOtherEnergyCreateWithoutCarbonFootprintInput, HouseholdOtherEnergyUncheckedCreateWithoutCarbonFootprintInput>
  }

  export type TransportationCreateWithoutCarbonFootprintInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutTransportationsInput
  }

  export type TransportationUncheckedCreateWithoutCarbonFootprintInput = {
    id?: number
    householdId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type TransportationCreateOrConnectWithoutCarbonFootprintInput = {
    where: TransportationWhereUniqueInput
    create: XOR<TransportationCreateWithoutCarbonFootprintInput, TransportationUncheckedCreateWithoutCarbonFootprintInput>
  }

  export type HouseholdUpsertWithoutCarbonFootprintsInput = {
    update: XOR<HouseholdUpdateWithoutCarbonFootprintsInput, HouseholdUncheckedUpdateWithoutCarbonFootprintsInput>
    create: XOR<HouseholdCreateWithoutCarbonFootprintsInput, HouseholdUncheckedCreateWithoutCarbonFootprintsInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutCarbonFootprintsInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutCarbonFootprintsInput, HouseholdUncheckedUpdateWithoutCarbonFootprintsInput>
  }

  export type HouseholdUpdateWithoutCarbonFootprintsInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutCarbonFootprintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdElectricityUpsertWithoutCarbonFootprintInput = {
    update: XOR<HouseholdElectricityUpdateWithoutCarbonFootprintInput, HouseholdElectricityUncheckedUpdateWithoutCarbonFootprintInput>
    create: XOR<HouseholdElectricityCreateWithoutCarbonFootprintInput, HouseholdElectricityUncheckedCreateWithoutCarbonFootprintInput>
    where?: HouseholdElectricityWhereInput
  }

  export type HouseholdElectricityUpdateToOneWithWhereWithoutCarbonFootprintInput = {
    where?: HouseholdElectricityWhereInput
    data: XOR<HouseholdElectricityUpdateWithoutCarbonFootprintInput, HouseholdElectricityUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type HouseholdElectricityUpdateWithoutCarbonFootprintInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutHouseholdElectricitiesNestedInput
  }

  export type HouseholdElectricityUncheckedUpdateWithoutCarbonFootprintInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdWaterSupplyUpsertWithoutCarbonFootprintInput = {
    update: XOR<HouseholdWaterSupplyUpdateWithoutCarbonFootprintInput, HouseholdWaterSupplyUncheckedUpdateWithoutCarbonFootprintInput>
    create: XOR<HouseholdWaterSupplyCreateWithoutCarbonFootprintInput, HouseholdWaterSupplyUncheckedCreateWithoutCarbonFootprintInput>
    where?: HouseholdWaterSupplyWhereInput
  }

  export type HouseholdWaterSupplyUpdateToOneWithWhereWithoutCarbonFootprintInput = {
    where?: HouseholdWaterSupplyWhereInput
    data: XOR<HouseholdWaterSupplyUpdateWithoutCarbonFootprintInput, HouseholdWaterSupplyUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type HouseholdWaterSupplyUpdateWithoutCarbonFootprintInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutHouseholdWaterSuppliesNestedInput
  }

  export type HouseholdWaterSupplyUncheckedUpdateWithoutCarbonFootprintInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdOtherEnergyUpsertWithoutCarbonFootprintInput = {
    update: XOR<HouseholdOtherEnergyUpdateWithoutCarbonFootprintInput, HouseholdOtherEnergyUncheckedUpdateWithoutCarbonFootprintInput>
    create: XOR<HouseholdOtherEnergyCreateWithoutCarbonFootprintInput, HouseholdOtherEnergyUncheckedCreateWithoutCarbonFootprintInput>
    where?: HouseholdOtherEnergyWhereInput
  }

  export type HouseholdOtherEnergyUpdateToOneWithWhereWithoutCarbonFootprintInput = {
    where?: HouseholdOtherEnergyWhereInput
    data: XOR<HouseholdOtherEnergyUpdateWithoutCarbonFootprintInput, HouseholdOtherEnergyUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type HouseholdOtherEnergyUpdateWithoutCarbonFootprintInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutHouseholdOtherEnergiesNestedInput
  }

  export type HouseholdOtherEnergyUncheckedUpdateWithoutCarbonFootprintInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportationUpsertWithoutCarbonFootprintInput = {
    update: XOR<TransportationUpdateWithoutCarbonFootprintInput, TransportationUncheckedUpdateWithoutCarbonFootprintInput>
    create: XOR<TransportationCreateWithoutCarbonFootprintInput, TransportationUncheckedCreateWithoutCarbonFootprintInput>
    where?: TransportationWhereInput
  }

  export type TransportationUpdateToOneWithWhereWithoutCarbonFootprintInput = {
    where?: TransportationWhereInput
    data: XOR<TransportationUpdateWithoutCarbonFootprintInput, TransportationUncheckedUpdateWithoutCarbonFootprintInput>
  }

  export type TransportationUpdateWithoutCarbonFootprintInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutTransportationsNestedInput
  }

  export type TransportationUncheckedUpdateWithoutCarbonFootprintInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleCreateWithoutEmissionFactorInput = {
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutPrivateVehiclesInput
    vehicleProperty: VehiclePropertyCreateNestedOneWithoutPrivateVehiclesInput
  }

  export type PrivateVehicleUncheckedCreateWithoutEmissionFactorInput = {
    id?: number
    householdId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleCreateOrConnectWithoutEmissionFactorInput = {
    where: PrivateVehicleWhereUniqueInput
    create: XOR<PrivateVehicleCreateWithoutEmissionFactorInput, PrivateVehicleUncheckedCreateWithoutEmissionFactorInput>
  }

  export type PrivateVehicleCreateManyEmissionFactorInputEnvelope = {
    data: PrivateVehicleCreateManyEmissionFactorInput | PrivateVehicleCreateManyEmissionFactorInput[]
    skipDuplicates?: boolean
  }

  export type ElectricityBillCreateWithoutEmissionFactorInput = {
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutElectricityBillsInput
  }

  export type ElectricityBillUncheckedCreateWithoutEmissionFactorInput = {
    id?: number
    householdId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ElectricityBillCreateOrConnectWithoutEmissionFactorInput = {
    where: ElectricityBillWhereUniqueInput
    create: XOR<ElectricityBillCreateWithoutEmissionFactorInput, ElectricityBillUncheckedCreateWithoutEmissionFactorInput>
  }

  export type ElectricityBillCreateManyEmissionFactorInputEnvelope = {
    data: ElectricityBillCreateManyEmissionFactorInput | ElectricityBillCreateManyEmissionFactorInput[]
    skipDuplicates?: boolean
  }

  export type WaterBillCreateWithoutEmissionFactorInput = {
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutWaterBillsInput
  }

  export type WaterBillUncheckedCreateWithoutEmissionFactorInput = {
    id?: number
    householdId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type WaterBillCreateOrConnectWithoutEmissionFactorInput = {
    where: WaterBillWhereUniqueInput
    create: XOR<WaterBillCreateWithoutEmissionFactorInput, WaterBillUncheckedCreateWithoutEmissionFactorInput>
  }

  export type WaterBillCreateManyEmissionFactorInputEnvelope = {
    data: WaterBillCreateManyEmissionFactorInput | WaterBillCreateManyEmissionFactorInput[]
    skipDuplicates?: boolean
  }

  export type OtherEnergyConsumptionCreateWithoutEmissionFactorInput = {
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutOtherEnergyConsumptionsInput
  }

  export type OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput = {
    id?: number
    householdId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type OtherEnergyConsumptionCreateOrConnectWithoutEmissionFactorInput = {
    where: OtherEnergyConsumptionWhereUniqueInput
    create: XOR<OtherEnergyConsumptionCreateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput>
  }

  export type OtherEnergyConsumptionCreateManyEmissionFactorInputEnvelope = {
    data: OtherEnergyConsumptionCreateManyEmissionFactorInput | OtherEnergyConsumptionCreateManyEmissionFactorInput[]
    skipDuplicates?: boolean
  }

  export type PrivateVehicleUpsertWithWhereUniqueWithoutEmissionFactorInput = {
    where: PrivateVehicleWhereUniqueInput
    update: XOR<PrivateVehicleUpdateWithoutEmissionFactorInput, PrivateVehicleUncheckedUpdateWithoutEmissionFactorInput>
    create: XOR<PrivateVehicleCreateWithoutEmissionFactorInput, PrivateVehicleUncheckedCreateWithoutEmissionFactorInput>
  }

  export type PrivateVehicleUpdateWithWhereUniqueWithoutEmissionFactorInput = {
    where: PrivateVehicleWhereUniqueInput
    data: XOR<PrivateVehicleUpdateWithoutEmissionFactorInput, PrivateVehicleUncheckedUpdateWithoutEmissionFactorInput>
  }

  export type PrivateVehicleUpdateManyWithWhereWithoutEmissionFactorInput = {
    where: PrivateVehicleScalarWhereInput
    data: XOR<PrivateVehicleUpdateManyMutationInput, PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorInput>
  }

  export type ElectricityBillUpsertWithWhereUniqueWithoutEmissionFactorInput = {
    where: ElectricityBillWhereUniqueInput
    update: XOR<ElectricityBillUpdateWithoutEmissionFactorInput, ElectricityBillUncheckedUpdateWithoutEmissionFactorInput>
    create: XOR<ElectricityBillCreateWithoutEmissionFactorInput, ElectricityBillUncheckedCreateWithoutEmissionFactorInput>
  }

  export type ElectricityBillUpdateWithWhereUniqueWithoutEmissionFactorInput = {
    where: ElectricityBillWhereUniqueInput
    data: XOR<ElectricityBillUpdateWithoutEmissionFactorInput, ElectricityBillUncheckedUpdateWithoutEmissionFactorInput>
  }

  export type ElectricityBillUpdateManyWithWhereWithoutEmissionFactorInput = {
    where: ElectricityBillScalarWhereInput
    data: XOR<ElectricityBillUpdateManyMutationInput, ElectricityBillUncheckedUpdateManyWithoutEmissionFactorInput>
  }

  export type WaterBillUpsertWithWhereUniqueWithoutEmissionFactorInput = {
    where: WaterBillWhereUniqueInput
    update: XOR<WaterBillUpdateWithoutEmissionFactorInput, WaterBillUncheckedUpdateWithoutEmissionFactorInput>
    create: XOR<WaterBillCreateWithoutEmissionFactorInput, WaterBillUncheckedCreateWithoutEmissionFactorInput>
  }

  export type WaterBillUpdateWithWhereUniqueWithoutEmissionFactorInput = {
    where: WaterBillWhereUniqueInput
    data: XOR<WaterBillUpdateWithoutEmissionFactorInput, WaterBillUncheckedUpdateWithoutEmissionFactorInput>
  }

  export type WaterBillUpdateManyWithWhereWithoutEmissionFactorInput = {
    where: WaterBillScalarWhereInput
    data: XOR<WaterBillUpdateManyMutationInput, WaterBillUncheckedUpdateManyWithoutEmissionFactorInput>
  }

  export type OtherEnergyConsumptionUpsertWithWhereUniqueWithoutEmissionFactorInput = {
    where: OtherEnergyConsumptionWhereUniqueInput
    update: XOR<OtherEnergyConsumptionUpdateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedUpdateWithoutEmissionFactorInput>
    create: XOR<OtherEnergyConsumptionCreateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedCreateWithoutEmissionFactorInput>
  }

  export type OtherEnergyConsumptionUpdateWithWhereUniqueWithoutEmissionFactorInput = {
    where: OtherEnergyConsumptionWhereUniqueInput
    data: XOR<OtherEnergyConsumptionUpdateWithoutEmissionFactorInput, OtherEnergyConsumptionUncheckedUpdateWithoutEmissionFactorInput>
  }

  export type OtherEnergyConsumptionUpdateManyWithWhereWithoutEmissionFactorInput = {
    where: OtherEnergyConsumptionScalarWhereInput
    data: XOR<OtherEnergyConsumptionUpdateManyMutationInput, OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorInput>
  }

  export type PrivateVehicleCreateWithoutVehiclePropertyInput = {
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutPrivateVehiclesInput
    emissionFactor: EmissionFactorCreateNestedOneWithoutPrivateVehiclesInput
  }

  export type PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleCreateOrConnectWithoutVehiclePropertyInput = {
    where: PrivateVehicleWhereUniqueInput
    create: XOR<PrivateVehicleCreateWithoutVehiclePropertyInput, PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput>
  }

  export type PrivateVehicleCreateManyVehiclePropertyInputEnvelope = {
    data: PrivateVehicleCreateManyVehiclePropertyInput | PrivateVehicleCreateManyVehiclePropertyInput[]
    skipDuplicates?: boolean
  }

  export type PrivateVehicleUpsertWithWhereUniqueWithoutVehiclePropertyInput = {
    where: PrivateVehicleWhereUniqueInput
    update: XOR<PrivateVehicleUpdateWithoutVehiclePropertyInput, PrivateVehicleUncheckedUpdateWithoutVehiclePropertyInput>
    create: XOR<PrivateVehicleCreateWithoutVehiclePropertyInput, PrivateVehicleUncheckedCreateWithoutVehiclePropertyInput>
  }

  export type PrivateVehicleUpdateWithWhereUniqueWithoutVehiclePropertyInput = {
    where: PrivateVehicleWhereUniqueInput
    data: XOR<PrivateVehicleUpdateWithoutVehiclePropertyInput, PrivateVehicleUncheckedUpdateWithoutVehiclePropertyInput>
  }

  export type PrivateVehicleUpdateManyWithWhereWithoutVehiclePropertyInput = {
    where: PrivateVehicleScalarWhereInput
    data: XOR<PrivateVehicleUpdateManyMutationInput, PrivateVehicleUncheckedUpdateManyWithoutVehiclePropertyInput>
  }

  export type HouseholdCreateWithoutPrivateVehiclesInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutPrivateVehiclesInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutPrivateVehiclesInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutPrivateVehiclesInput, HouseholdUncheckedCreateWithoutPrivateVehiclesInput>
  }

  export type EmissionFactorCreateWithoutPrivateVehiclesInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    electricityBills?: ElectricityBillCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorUncheckedCreateWithoutPrivateVehiclesInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorCreateOrConnectWithoutPrivateVehiclesInput = {
    where: EmissionFactorWhereUniqueInput
    create: XOR<EmissionFactorCreateWithoutPrivateVehiclesInput, EmissionFactorUncheckedCreateWithoutPrivateVehiclesInput>
  }

  export type VehiclePropertyCreateWithoutPrivateVehiclesInput = {
    modelType: $Enums.ModelType
    consumptionRate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type VehiclePropertyUncheckedCreateWithoutPrivateVehiclesInput = {
    id?: number
    modelType: $Enums.ModelType
    consumptionRate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type VehiclePropertyCreateOrConnectWithoutPrivateVehiclesInput = {
    where: VehiclePropertyWhereUniqueInput
    create: XOR<VehiclePropertyCreateWithoutPrivateVehiclesInput, VehiclePropertyUncheckedCreateWithoutPrivateVehiclesInput>
  }

  export type HouseholdUpsertWithoutPrivateVehiclesInput = {
    update: XOR<HouseholdUpdateWithoutPrivateVehiclesInput, HouseholdUncheckedUpdateWithoutPrivateVehiclesInput>
    create: XOR<HouseholdCreateWithoutPrivateVehiclesInput, HouseholdUncheckedCreateWithoutPrivateVehiclesInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutPrivateVehiclesInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutPrivateVehiclesInput, HouseholdUncheckedUpdateWithoutPrivateVehiclesInput>
  }

  export type HouseholdUpdateWithoutPrivateVehiclesInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutPrivateVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type EmissionFactorUpsertWithoutPrivateVehiclesInput = {
    update: XOR<EmissionFactorUpdateWithoutPrivateVehiclesInput, EmissionFactorUncheckedUpdateWithoutPrivateVehiclesInput>
    create: XOR<EmissionFactorCreateWithoutPrivateVehiclesInput, EmissionFactorUncheckedCreateWithoutPrivateVehiclesInput>
    where?: EmissionFactorWhereInput
  }

  export type EmissionFactorUpdateToOneWithWhereWithoutPrivateVehiclesInput = {
    where?: EmissionFactorWhereInput
    data: XOR<EmissionFactorUpdateWithoutPrivateVehiclesInput, EmissionFactorUncheckedUpdateWithoutPrivateVehiclesInput>
  }

  export type EmissionFactorUpdateWithoutPrivateVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityBills?: ElectricityBillUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutEmissionFactorNestedInput
  }

  export type EmissionFactorUncheckedUpdateWithoutPrivateVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorNestedInput
  }

  export type VehiclePropertyUpsertWithoutPrivateVehiclesInput = {
    update: XOR<VehiclePropertyUpdateWithoutPrivateVehiclesInput, VehiclePropertyUncheckedUpdateWithoutPrivateVehiclesInput>
    create: XOR<VehiclePropertyCreateWithoutPrivateVehiclesInput, VehiclePropertyUncheckedCreateWithoutPrivateVehiclesInput>
    where?: VehiclePropertyWhereInput
  }

  export type VehiclePropertyUpdateToOneWithWhereWithoutPrivateVehiclesInput = {
    where?: VehiclePropertyWhereInput
    data: XOR<VehiclePropertyUpdateWithoutPrivateVehiclesInput, VehiclePropertyUncheckedUpdateWithoutPrivateVehiclesInput>
  }

  export type VehiclePropertyUpdateWithoutPrivateVehiclesInput = {
    modelType?: EnumModelTypeFieldUpdateOperationsInput | $Enums.ModelType
    consumptionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehiclePropertyUncheckedUpdateWithoutPrivateVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelType?: EnumModelTypeFieldUpdateOperationsInput | $Enums.ModelType
    consumptionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdCreateWithoutTransportationsInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutTransportationsInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutTransportationsInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutTransportationsInput, HouseholdUncheckedCreateWithoutTransportationsInput>
  }

  export type CarbonFootprintCreateWithoutTransportationInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutCarbonFootprintsInput
    householdElectricity: HouseholdElectricityCreateNestedOneWithoutCarbonFootprintInput
    householdWaterSupply: HouseholdWaterSupplyCreateNestedOneWithoutCarbonFootprintInput
    householdOtherEnergy: HouseholdOtherEnergyCreateNestedOneWithoutCarbonFootprintInput
  }

  export type CarbonFootprintUncheckedCreateWithoutTransportationInput = {
    id?: number
    householdId: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintCreateOrConnectWithoutTransportationInput = {
    where: CarbonFootprintWhereUniqueInput
    create: XOR<CarbonFootprintCreateWithoutTransportationInput, CarbonFootprintUncheckedCreateWithoutTransportationInput>
  }

  export type HouseholdUpsertWithoutTransportationsInput = {
    update: XOR<HouseholdUpdateWithoutTransportationsInput, HouseholdUncheckedUpdateWithoutTransportationsInput>
    create: XOR<HouseholdCreateWithoutTransportationsInput, HouseholdUncheckedCreateWithoutTransportationsInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutTransportationsInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutTransportationsInput, HouseholdUncheckedUpdateWithoutTransportationsInput>
  }

  export type HouseholdUpdateWithoutTransportationsInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutTransportationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type CarbonFootprintUpsertWithoutTransportationInput = {
    update: XOR<CarbonFootprintUpdateWithoutTransportationInput, CarbonFootprintUncheckedUpdateWithoutTransportationInput>
    create: XOR<CarbonFootprintCreateWithoutTransportationInput, CarbonFootprintUncheckedCreateWithoutTransportationInput>
    where?: CarbonFootprintWhereInput
  }

  export type CarbonFootprintUpdateToOneWithWhereWithoutTransportationInput = {
    where?: CarbonFootprintWhereInput
    data: XOR<CarbonFootprintUpdateWithoutTransportationInput, CarbonFootprintUncheckedUpdateWithoutTransportationInput>
  }

  export type CarbonFootprintUpdateWithoutTransportationInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutCarbonFootprintsNestedInput
    householdElectricity?: HouseholdElectricityUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdWaterSupply?: HouseholdWaterSupplyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdOtherEnergy?: HouseholdOtherEnergyUpdateOneRequiredWithoutCarbonFootprintNestedInput
  }

  export type CarbonFootprintUncheckedUpdateWithoutTransportationInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdCreateWithoutHouseholdElectricitiesInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutHouseholdElectricitiesInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutHouseholdElectricitiesInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutHouseholdElectricitiesInput, HouseholdUncheckedCreateWithoutHouseholdElectricitiesInput>
  }

  export type CarbonFootprintCreateWithoutHouseholdElectricityInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutCarbonFootprintsInput
    householdWaterSupply: HouseholdWaterSupplyCreateNestedOneWithoutCarbonFootprintInput
    householdOtherEnergy: HouseholdOtherEnergyCreateNestedOneWithoutCarbonFootprintInput
    transportation: TransportationCreateNestedOneWithoutCarbonFootprintInput
  }

  export type CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput = {
    id?: number
    householdId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintCreateOrConnectWithoutHouseholdElectricityInput = {
    where: CarbonFootprintWhereUniqueInput
    create: XOR<CarbonFootprintCreateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput>
  }

  export type HouseholdUpsertWithoutHouseholdElectricitiesInput = {
    update: XOR<HouseholdUpdateWithoutHouseholdElectricitiesInput, HouseholdUncheckedUpdateWithoutHouseholdElectricitiesInput>
    create: XOR<HouseholdCreateWithoutHouseholdElectricitiesInput, HouseholdUncheckedCreateWithoutHouseholdElectricitiesInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutHouseholdElectricitiesInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutHouseholdElectricitiesInput, HouseholdUncheckedUpdateWithoutHouseholdElectricitiesInput>
  }

  export type HouseholdUpdateWithoutHouseholdElectricitiesInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutHouseholdElectricitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type CarbonFootprintUpsertWithoutHouseholdElectricityInput = {
    update: XOR<CarbonFootprintUpdateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedUpdateWithoutHouseholdElectricityInput>
    create: XOR<CarbonFootprintCreateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedCreateWithoutHouseholdElectricityInput>
    where?: CarbonFootprintWhereInput
  }

  export type CarbonFootprintUpdateToOneWithWhereWithoutHouseholdElectricityInput = {
    where?: CarbonFootprintWhereInput
    data: XOR<CarbonFootprintUpdateWithoutHouseholdElectricityInput, CarbonFootprintUncheckedUpdateWithoutHouseholdElectricityInput>
  }

  export type CarbonFootprintUpdateWithoutHouseholdElectricityInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutCarbonFootprintsNestedInput
    householdWaterSupply?: HouseholdWaterSupplyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdOtherEnergy?: HouseholdOtherEnergyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    transportation?: TransportationUpdateOneRequiredWithoutCarbonFootprintNestedInput
  }

  export type CarbonFootprintUncheckedUpdateWithoutHouseholdElectricityInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdCreateWithoutElectricityBillsInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutElectricityBillsInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutElectricityBillsInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutElectricityBillsInput, HouseholdUncheckedCreateWithoutElectricityBillsInput>
  }

  export type EmissionFactorCreateWithoutElectricityBillsInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorUncheckedCreateWithoutElectricityBillsInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorCreateOrConnectWithoutElectricityBillsInput = {
    where: EmissionFactorWhereUniqueInput
    create: XOR<EmissionFactorCreateWithoutElectricityBillsInput, EmissionFactorUncheckedCreateWithoutElectricityBillsInput>
  }

  export type HouseholdUpsertWithoutElectricityBillsInput = {
    update: XOR<HouseholdUpdateWithoutElectricityBillsInput, HouseholdUncheckedUpdateWithoutElectricityBillsInput>
    create: XOR<HouseholdCreateWithoutElectricityBillsInput, HouseholdUncheckedCreateWithoutElectricityBillsInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutElectricityBillsInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutElectricityBillsInput, HouseholdUncheckedUpdateWithoutElectricityBillsInput>
  }

  export type HouseholdUpdateWithoutElectricityBillsInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutElectricityBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type EmissionFactorUpsertWithoutElectricityBillsInput = {
    update: XOR<EmissionFactorUpdateWithoutElectricityBillsInput, EmissionFactorUncheckedUpdateWithoutElectricityBillsInput>
    create: XOR<EmissionFactorCreateWithoutElectricityBillsInput, EmissionFactorUncheckedCreateWithoutElectricityBillsInput>
    where?: EmissionFactorWhereInput
  }

  export type EmissionFactorUpdateToOneWithWhereWithoutElectricityBillsInput = {
    where?: EmissionFactorWhereInput
    data: XOR<EmissionFactorUpdateWithoutElectricityBillsInput, EmissionFactorUncheckedUpdateWithoutElectricityBillsInput>
  }

  export type EmissionFactorUpdateWithoutElectricityBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutEmissionFactorNestedInput
  }

  export type EmissionFactorUncheckedUpdateWithoutElectricityBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorNestedInput
  }

  export type HouseholdCreateWithoutHouseholdWaterSuppliesInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutHouseholdWaterSuppliesInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutHouseholdWaterSuppliesInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutHouseholdWaterSuppliesInput, HouseholdUncheckedCreateWithoutHouseholdWaterSuppliesInput>
  }

  export type CarbonFootprintCreateWithoutHouseholdWaterSupplyInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutCarbonFootprintsInput
    householdElectricity: HouseholdElectricityCreateNestedOneWithoutCarbonFootprintInput
    householdOtherEnergy: HouseholdOtherEnergyCreateNestedOneWithoutCarbonFootprintInput
    transportation: TransportationCreateNestedOneWithoutCarbonFootprintInput
  }

  export type CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput = {
    id?: number
    householdId: number
    householdElectricityId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintCreateOrConnectWithoutHouseholdWaterSupplyInput = {
    where: CarbonFootprintWhereUniqueInput
    create: XOR<CarbonFootprintCreateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput>
  }

  export type HouseholdUpsertWithoutHouseholdWaterSuppliesInput = {
    update: XOR<HouseholdUpdateWithoutHouseholdWaterSuppliesInput, HouseholdUncheckedUpdateWithoutHouseholdWaterSuppliesInput>
    create: XOR<HouseholdCreateWithoutHouseholdWaterSuppliesInput, HouseholdUncheckedCreateWithoutHouseholdWaterSuppliesInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutHouseholdWaterSuppliesInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutHouseholdWaterSuppliesInput, HouseholdUncheckedUpdateWithoutHouseholdWaterSuppliesInput>
  }

  export type HouseholdUpdateWithoutHouseholdWaterSuppliesInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutHouseholdWaterSuppliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type CarbonFootprintUpsertWithoutHouseholdWaterSupplyInput = {
    update: XOR<CarbonFootprintUpdateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedUpdateWithoutHouseholdWaterSupplyInput>
    create: XOR<CarbonFootprintCreateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedCreateWithoutHouseholdWaterSupplyInput>
    where?: CarbonFootprintWhereInput
  }

  export type CarbonFootprintUpdateToOneWithWhereWithoutHouseholdWaterSupplyInput = {
    where?: CarbonFootprintWhereInput
    data: XOR<CarbonFootprintUpdateWithoutHouseholdWaterSupplyInput, CarbonFootprintUncheckedUpdateWithoutHouseholdWaterSupplyInput>
  }

  export type CarbonFootprintUpdateWithoutHouseholdWaterSupplyInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutCarbonFootprintsNestedInput
    householdElectricity?: HouseholdElectricityUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdOtherEnergy?: HouseholdOtherEnergyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    transportation?: TransportationUpdateOneRequiredWithoutCarbonFootprintNestedInput
  }

  export type CarbonFootprintUncheckedUpdateWithoutHouseholdWaterSupplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdCreateWithoutWaterBillsInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutWaterBillsInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutWaterBillsInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutWaterBillsInput, HouseholdUncheckedCreateWithoutWaterBillsInput>
  }

  export type EmissionFactorCreateWithoutWaterBillsInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutEmissionFactorInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorUncheckedCreateWithoutWaterBillsInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutEmissionFactorInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorCreateOrConnectWithoutWaterBillsInput = {
    where: EmissionFactorWhereUniqueInput
    create: XOR<EmissionFactorCreateWithoutWaterBillsInput, EmissionFactorUncheckedCreateWithoutWaterBillsInput>
  }

  export type HouseholdUpsertWithoutWaterBillsInput = {
    update: XOR<HouseholdUpdateWithoutWaterBillsInput, HouseholdUncheckedUpdateWithoutWaterBillsInput>
    create: XOR<HouseholdCreateWithoutWaterBillsInput, HouseholdUncheckedCreateWithoutWaterBillsInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutWaterBillsInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutWaterBillsInput, HouseholdUncheckedUpdateWithoutWaterBillsInput>
  }

  export type HouseholdUpdateWithoutWaterBillsInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutWaterBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type EmissionFactorUpsertWithoutWaterBillsInput = {
    update: XOR<EmissionFactorUpdateWithoutWaterBillsInput, EmissionFactorUncheckedUpdateWithoutWaterBillsInput>
    create: XOR<EmissionFactorCreateWithoutWaterBillsInput, EmissionFactorUncheckedCreateWithoutWaterBillsInput>
    where?: EmissionFactorWhereInput
  }

  export type EmissionFactorUpdateToOneWithWhereWithoutWaterBillsInput = {
    where?: EmissionFactorWhereInput
    data: XOR<EmissionFactorUpdateWithoutWaterBillsInput, EmissionFactorUncheckedUpdateWithoutWaterBillsInput>
  }

  export type EmissionFactorUpdateWithoutWaterBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUpdateManyWithoutEmissionFactorNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutEmissionFactorNestedInput
  }

  export type EmissionFactorUncheckedUpdateWithoutWaterBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorNestedInput
  }

  export type HouseholdCreateWithoutHouseholdOtherEnergiesInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutHouseholdOtherEnergiesInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutHouseholdOtherEnergiesInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutHouseholdOtherEnergiesInput, HouseholdUncheckedCreateWithoutHouseholdOtherEnergiesInput>
  }

  export type CarbonFootprintCreateWithoutHouseholdOtherEnergyInput = {
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    household: HouseholdCreateNestedOneWithoutCarbonFootprintsInput
    householdElectricity: HouseholdElectricityCreateNestedOneWithoutCarbonFootprintInput
    householdWaterSupply: HouseholdWaterSupplyCreateNestedOneWithoutCarbonFootprintInput
    transportation: TransportationCreateNestedOneWithoutCarbonFootprintInput
  }

  export type CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput = {
    id?: number
    householdId: number
    householdElectricityId: number
    householdWaterSupplyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintCreateOrConnectWithoutHouseholdOtherEnergyInput = {
    where: CarbonFootprintWhereUniqueInput
    create: XOR<CarbonFootprintCreateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput>
  }

  export type HouseholdUpsertWithoutHouseholdOtherEnergiesInput = {
    update: XOR<HouseholdUpdateWithoutHouseholdOtherEnergiesInput, HouseholdUncheckedUpdateWithoutHouseholdOtherEnergiesInput>
    create: XOR<HouseholdCreateWithoutHouseholdOtherEnergiesInput, HouseholdUncheckedCreateWithoutHouseholdOtherEnergiesInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutHouseholdOtherEnergiesInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutHouseholdOtherEnergiesInput, HouseholdUncheckedUpdateWithoutHouseholdOtherEnergiesInput>
  }

  export type HouseholdUpdateWithoutHouseholdOtherEnergiesInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutHouseholdOtherEnergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type CarbonFootprintUpsertWithoutHouseholdOtherEnergyInput = {
    update: XOR<CarbonFootprintUpdateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedUpdateWithoutHouseholdOtherEnergyInput>
    create: XOR<CarbonFootprintCreateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedCreateWithoutHouseholdOtherEnergyInput>
    where?: CarbonFootprintWhereInput
  }

  export type CarbonFootprintUpdateToOneWithWhereWithoutHouseholdOtherEnergyInput = {
    where?: CarbonFootprintWhereInput
    data: XOR<CarbonFootprintUpdateWithoutHouseholdOtherEnergyInput, CarbonFootprintUncheckedUpdateWithoutHouseholdOtherEnergyInput>
  }

  export type CarbonFootprintUpdateWithoutHouseholdOtherEnergyInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutCarbonFootprintsNestedInput
    householdElectricity?: HouseholdElectricityUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdWaterSupply?: HouseholdWaterSupplyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    transportation?: TransportationUpdateOneRequiredWithoutCarbonFootprintNestedInput
  }

  export type CarbonFootprintUncheckedUpdateWithoutHouseholdOtherEnergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdCreateWithoutOtherEnergyConsumptionsInput = {
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutHouseholdsInput
    carbonFootprints?: CarbonFootprintCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdUncheckedCreateWithoutOtherEnergyConsumptionsInput = {
    id?: number
    addressId: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    carbonFootprints?: CarbonFootprintUncheckedCreateNestedManyWithoutHouseholdInput
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutHouseholdInput
    transportations?: TransportationUncheckedCreateNestedManyWithoutHouseholdInput
    householdElectricities?: HouseholdElectricityUncheckedCreateNestedManyWithoutHouseholdInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedCreateNestedManyWithoutHouseholdInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutHouseholdInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedCreateNestedManyWithoutHouseholdInput
  }

  export type HouseholdCreateOrConnectWithoutOtherEnergyConsumptionsInput = {
    where: HouseholdWhereUniqueInput
    create: XOR<HouseholdCreateWithoutOtherEnergyConsumptionsInput, HouseholdUncheckedCreateWithoutOtherEnergyConsumptionsInput>
  }

  export type EmissionFactorCreateWithoutOtherEnergyConsumptionsInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleCreateNestedManyWithoutEmissionFactorInput
    electricityBills?: ElectricityBillCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorUncheckedCreateWithoutOtherEnergyConsumptionsInput = {
    id: number
    sourceType: $Enums.SourceType
    name: string
    carbonCoefficient: Decimal | DecimalJsLike | number | string
    unit: string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    privateVehicles?: PrivateVehicleUncheckedCreateNestedManyWithoutEmissionFactorInput
    electricityBills?: ElectricityBillUncheckedCreateNestedManyWithoutEmissionFactorInput
    waterBills?: WaterBillUncheckedCreateNestedManyWithoutEmissionFactorInput
  }

  export type EmissionFactorCreateOrConnectWithoutOtherEnergyConsumptionsInput = {
    where: EmissionFactorWhereUniqueInput
    create: XOR<EmissionFactorCreateWithoutOtherEnergyConsumptionsInput, EmissionFactorUncheckedCreateWithoutOtherEnergyConsumptionsInput>
  }

  export type HouseholdUpsertWithoutOtherEnergyConsumptionsInput = {
    update: XOR<HouseholdUpdateWithoutOtherEnergyConsumptionsInput, HouseholdUncheckedUpdateWithoutOtherEnergyConsumptionsInput>
    create: XOR<HouseholdCreateWithoutOtherEnergyConsumptionsInput, HouseholdUncheckedCreateWithoutOtherEnergyConsumptionsInput>
    where?: HouseholdWhereInput
  }

  export type HouseholdUpdateToOneWithWhereWithoutOtherEnergyConsumptionsInput = {
    where?: HouseholdWhereInput
    data: XOR<HouseholdUpdateWithoutOtherEnergyConsumptionsInput, HouseholdUncheckedUpdateWithoutOtherEnergyConsumptionsInput>
  }

  export type HouseholdUpdateWithoutOtherEnergyConsumptionsInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutHouseholdsNestedInput
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutOtherEnergyConsumptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type EmissionFactorUpsertWithoutOtherEnergyConsumptionsInput = {
    update: XOR<EmissionFactorUpdateWithoutOtherEnergyConsumptionsInput, EmissionFactorUncheckedUpdateWithoutOtherEnergyConsumptionsInput>
    create: XOR<EmissionFactorCreateWithoutOtherEnergyConsumptionsInput, EmissionFactorUncheckedCreateWithoutOtherEnergyConsumptionsInput>
    where?: EmissionFactorWhereInput
  }

  export type EmissionFactorUpdateToOneWithWhereWithoutOtherEnergyConsumptionsInput = {
    where?: EmissionFactorWhereInput
    data: XOR<EmissionFactorUpdateWithoutOtherEnergyConsumptionsInput, EmissionFactorUncheckedUpdateWithoutOtherEnergyConsumptionsInput>
  }

  export type EmissionFactorUpdateWithoutOtherEnergyConsumptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUpdateManyWithoutEmissionFactorNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUpdateManyWithoutEmissionFactorNestedInput
  }

  export type EmissionFactorUncheckedUpdateWithoutOtherEnergyConsumptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceType?: EnumSourceTypeFieldUpdateOperationsInput | $Enums.SourceType
    name?: StringFieldUpdateOperationsInput | string
    carbonCoefficient?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutEmissionFactorNestedInput
  }

  export type ProfilePermissionCreateWithoutProfileInput = {
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    team: TeamCreateNestedOneWithoutProfilePermissionsInput
  }

  export type ProfilePermissionUncheckedCreateWithoutProfileInput = {
    id?: number
    teamId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfilePermissionCreateOrConnectWithoutProfileInput = {
    where: ProfilePermissionWhereUniqueInput
    create: XOR<ProfilePermissionCreateWithoutProfileInput, ProfilePermissionUncheckedCreateWithoutProfileInput>
  }

  export type ProfilePermissionCreateManyProfileInputEnvelope = {
    data: ProfilePermissionCreateManyProfileInput | ProfilePermissionCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type ProfilePermissionUpsertWithWhereUniqueWithoutProfileInput = {
    where: ProfilePermissionWhereUniqueInput
    update: XOR<ProfilePermissionUpdateWithoutProfileInput, ProfilePermissionUncheckedUpdateWithoutProfileInput>
    create: XOR<ProfilePermissionCreateWithoutProfileInput, ProfilePermissionUncheckedCreateWithoutProfileInput>
  }

  export type ProfilePermissionUpdateWithWhereUniqueWithoutProfileInput = {
    where: ProfilePermissionWhereUniqueInput
    data: XOR<ProfilePermissionUpdateWithoutProfileInput, ProfilePermissionUncheckedUpdateWithoutProfileInput>
  }

  export type ProfilePermissionUpdateManyWithWhereWithoutProfileInput = {
    where: ProfilePermissionScalarWhereInput
    data: XOR<ProfilePermissionUpdateManyMutationInput, ProfilePermissionUncheckedUpdateManyWithoutProfileInput>
  }

  export type ProfilePermissionScalarWhereInput = {
    AND?: ProfilePermissionScalarWhereInput | ProfilePermissionScalarWhereInput[]
    OR?: ProfilePermissionScalarWhereInput[]
    NOT?: ProfilePermissionScalarWhereInput | ProfilePermissionScalarWhereInput[]
    id?: IntFilter<"ProfilePermission"> | number
    profileId?: IntFilter<"ProfilePermission"> | number
    teamId?: IntFilter<"ProfilePermission"> | number
    canEditSubdistrict?: BoolFilter<"ProfilePermission"> | boolean
    canGrant?: BoolFilter<"ProfilePermission"> | boolean
    createdAt?: DateTimeFilter<"ProfilePermission"> | Date | string
    createdBy?: DateTimeFilter<"ProfilePermission"> | Date | string
    updatedAt?: DateTimeFilter<"ProfilePermission"> | Date | string
    updatedBy?: DateTimeFilter<"ProfilePermission"> | Date | string
  }

  export type ProfileCreateWithoutProfilePermissionsInput = {
    firstname: string
    lastname: string
    email: string
    password: string
    phoneNumber: string
    profileImg: string
    isStaff: boolean
    isActive: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfileUncheckedCreateWithoutProfilePermissionsInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    password: string
    phoneNumber: string
    profileImg: string
    isStaff: boolean
    isActive: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfileCreateOrConnectWithoutProfilePermissionsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutProfilePermissionsInput, ProfileUncheckedCreateWithoutProfilePermissionsInput>
  }

  export type TeamCreateWithoutProfilePermissionsInput = {
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    address: AddressCreateNestedOneWithoutTeamsInput
  }

  export type TeamUncheckedCreateWithoutProfilePermissionsInput = {
    id?: number
    addressId: number
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type TeamCreateOrConnectWithoutProfilePermissionsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutProfilePermissionsInput, TeamUncheckedCreateWithoutProfilePermissionsInput>
  }

  export type ProfileUpsertWithoutProfilePermissionsInput = {
    update: XOR<ProfileUpdateWithoutProfilePermissionsInput, ProfileUncheckedUpdateWithoutProfilePermissionsInput>
    create: XOR<ProfileCreateWithoutProfilePermissionsInput, ProfileUncheckedCreateWithoutProfilePermissionsInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutProfilePermissionsInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutProfilePermissionsInput, ProfileUncheckedUpdateWithoutProfilePermissionsInput>
  }

  export type ProfileUpdateWithoutProfilePermissionsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profileImg?: StringFieldUpdateOperationsInput | string
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutProfilePermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profileImg?: StringFieldUpdateOperationsInput | string
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpsertWithoutProfilePermissionsInput = {
    update: XOR<TeamUpdateWithoutProfilePermissionsInput, TeamUncheckedUpdateWithoutProfilePermissionsInput>
    create: XOR<TeamCreateWithoutProfilePermissionsInput, TeamUncheckedCreateWithoutProfilePermissionsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutProfilePermissionsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutProfilePermissionsInput, TeamUncheckedUpdateWithoutProfilePermissionsInput>
  }

  export type TeamUpdateWithoutProfilePermissionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutTeamsNestedInput
  }

  export type TeamUncheckedUpdateWithoutProfilePermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateWithoutTeamsInput = {
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    households?: HouseholdCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutTeamsInput = {
    id?: number
    regionName: string
    provinceName: string
    districtName: string
    subdistrictName: string
    zipcode: string
    households?: HouseholdUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutTeamsInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutTeamsInput, AddressUncheckedCreateWithoutTeamsInput>
  }

  export type ProfilePermissionCreateWithoutTeamInput = {
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
    profile: ProfileCreateNestedOneWithoutProfilePermissionsInput
  }

  export type ProfilePermissionUncheckedCreateWithoutTeamInput = {
    id?: number
    profileId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfilePermissionCreateOrConnectWithoutTeamInput = {
    where: ProfilePermissionWhereUniqueInput
    create: XOR<ProfilePermissionCreateWithoutTeamInput, ProfilePermissionUncheckedCreateWithoutTeamInput>
  }

  export type ProfilePermissionCreateManyTeamInputEnvelope = {
    data: ProfilePermissionCreateManyTeamInput | ProfilePermissionCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutTeamsInput = {
    update: XOR<AddressUpdateWithoutTeamsInput, AddressUncheckedUpdateWithoutTeamsInput>
    create: XOR<AddressCreateWithoutTeamsInput, AddressUncheckedCreateWithoutTeamsInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutTeamsInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutTeamsInput, AddressUncheckedUpdateWithoutTeamsInput>
  }

  export type AddressUpdateWithoutTeamsInput = {
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    households?: HouseholdUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionName?: StringFieldUpdateOperationsInput | string
    provinceName?: StringFieldUpdateOperationsInput | string
    districtName?: StringFieldUpdateOperationsInput | string
    subdistrictName?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    households?: HouseholdUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type ProfilePermissionUpsertWithWhereUniqueWithoutTeamInput = {
    where: ProfilePermissionWhereUniqueInput
    update: XOR<ProfilePermissionUpdateWithoutTeamInput, ProfilePermissionUncheckedUpdateWithoutTeamInput>
    create: XOR<ProfilePermissionCreateWithoutTeamInput, ProfilePermissionUncheckedCreateWithoutTeamInput>
  }

  export type ProfilePermissionUpdateWithWhereUniqueWithoutTeamInput = {
    where: ProfilePermissionWhereUniqueInput
    data: XOR<ProfilePermissionUpdateWithoutTeamInput, ProfilePermissionUncheckedUpdateWithoutTeamInput>
  }

  export type ProfilePermissionUpdateManyWithWhereWithoutTeamInput = {
    where: ProfilePermissionScalarWhereInput
    data: XOR<ProfilePermissionUpdateManyMutationInput, ProfilePermissionUncheckedUpdateManyWithoutTeamInput>
  }

  export type HouseholdCreateManyAddressInput = {
    id?: number
    addressDetail: string
    houseType: $Enums.HouseType
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type TeamCreateManyAddressInput = {
    id?: number
    title: string
    maximumLevel: $Enums.MaximumLevel
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdUpdateWithoutAddressInput = {
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprints?: CarbonFootprintUncheckedUpdateManyWithoutHouseholdNestedInput
    privateVehicles?: PrivateVehicleUncheckedUpdateManyWithoutHouseholdNestedInput
    transportations?: TransportationUncheckedUpdateManyWithoutHouseholdNestedInput
    householdElectricities?: HouseholdElectricityUncheckedUpdateManyWithoutHouseholdNestedInput
    waterBills?: WaterBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdOtherEnergies?: HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdNestedInput
    electricityBills?: ElectricityBillUncheckedUpdateManyWithoutHouseholdNestedInput
    householdWaterSupplies?: HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdNestedInput
    otherEnergyConsumptions?: OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdNestedInput
  }

  export type HouseholdUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressDetail?: StringFieldUpdateOperationsInput | string
    houseType?: EnumHouseTypeFieldUpdateOperationsInput | $Enums.HouseType
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutAddressInput = {
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profilePermissions?: ProfilePermissionUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profilePermissions?: ProfilePermissionUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    maximumLevel?: EnumMaximumLevelFieldUpdateOperationsInput | $Enums.MaximumLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarbonFootprintCreateManyHouseholdInput = {
    id?: number
    householdElectricityId: number
    householdWaterSupplyId: number
    householdOtherEnergyId: number
    transportaionId: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleCreateManyHouseholdInput = {
    id?: number
    emissionFactorId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type TransportationCreateManyHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdElectricityCreateManyHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type WaterBillCreateManyHouseholdInput = {
    id?: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdOtherEnergyCreateManyHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ElectricityBillCreateManyHouseholdInput = {
    id?: number
    emissionFactorId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type HouseholdWaterSupplyCreateManyHouseholdInput = {
    id?: number
    totalCarbonFootprint: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type OtherEnergyConsumptionCreateManyHouseholdInput = {
    id?: number
    emissionFactorId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type CarbonFootprintUpdateWithoutHouseholdInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    householdElectricity?: HouseholdElectricityUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdWaterSupply?: HouseholdWaterSupplyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    householdOtherEnergy?: HouseholdOtherEnergyUpdateOneRequiredWithoutCarbonFootprintNestedInput
    transportation?: TransportationUpdateOneRequiredWithoutCarbonFootprintNestedInput
  }

  export type CarbonFootprintUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarbonFootprintUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdElectricityId?: IntFieldUpdateOperationsInput | number
    householdWaterSupplyId?: IntFieldUpdateOperationsInput | number
    householdOtherEnergyId?: IntFieldUpdateOperationsInput | number
    transportaionId?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleUpdateWithoutHouseholdInput = {
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutPrivateVehiclesNestedInput
    vehicleProperty?: VehiclePropertyUpdateOneRequiredWithoutPrivateVehiclesNestedInput
  }

  export type PrivateVehicleUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    vehiclePropertyId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    vehiclePropertyId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportationUpdateWithoutHouseholdInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUpdateOneWithoutTransportationNestedInput
  }

  export type TransportationUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutTransportationNestedInput
  }

  export type TransportationUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdElectricityUpdateWithoutHouseholdInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUpdateOneWithoutHouseholdElectricityNestedInput
  }

  export type HouseholdElectricityUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutHouseholdElectricityNestedInput
  }

  export type HouseholdElectricityUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillUpdateWithoutHouseholdInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutWaterBillsNestedInput
  }

  export type WaterBillUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdOtherEnergyUpdateWithoutHouseholdInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUpdateOneWithoutHouseholdOtherEnergyNestedInput
  }

  export type HouseholdOtherEnergyUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutHouseholdOtherEnergyNestedInput
  }

  export type HouseholdOtherEnergyUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillUpdateWithoutHouseholdInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutElectricityBillsNestedInput
  }

  export type ElectricityBillUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseholdWaterSupplyUpdateWithoutHouseholdInput = {
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUpdateOneWithoutHouseholdWaterSupplyNestedInput
  }

  export type HouseholdWaterSupplyUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    carbonFootprint?: CarbonFootprintUncheckedUpdateOneWithoutHouseholdWaterSupplyNestedInput
  }

  export type HouseholdWaterSupplyUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalCarbonFootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionUpdateWithoutHouseholdInput = {
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutOtherEnergyConsumptionsNestedInput
  }

  export type OtherEnergyConsumptionUncheckedUpdateWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionUncheckedUpdateManyWithoutHouseholdInput = {
    id?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleCreateManyEmissionFactorInput = {
    id?: number
    householdId: number
    vehiclePropertyId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ElectricityBillCreateManyEmissionFactorInput = {
    id?: number
    householdId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    electricityMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type WaterBillCreateManyEmissionFactorInput = {
    id?: number
    householdId: number
    amountConsumption: Decimal | DecimalJsLike | number | string
    waterMeter: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type OtherEnergyConsumptionCreateManyEmissionFactorInput = {
    id?: number
    householdId: number
    energyUsageType: $Enums.EnergyUsageType
    amountConsumption: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleUpdateWithoutEmissionFactorInput = {
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutPrivateVehiclesNestedInput
    vehicleProperty?: VehiclePropertyUpdateOneRequiredWithoutPrivateVehiclesNestedInput
  }

  export type PrivateVehicleUncheckedUpdateWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    vehiclePropertyId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleUncheckedUpdateManyWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    vehiclePropertyId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillUpdateWithoutEmissionFactorInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutElectricityBillsNestedInput
  }

  export type ElectricityBillUncheckedUpdateWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ElectricityBillUncheckedUpdateManyWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    electricityMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillUpdateWithoutEmissionFactorInput = {
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutWaterBillsNestedInput
  }

  export type WaterBillUncheckedUpdateWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaterBillUncheckedUpdateManyWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    waterMeter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionUpdateWithoutEmissionFactorInput = {
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutOtherEnergyConsumptionsNestedInput
  }

  export type OtherEnergyConsumptionUncheckedUpdateWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtherEnergyConsumptionUncheckedUpdateManyWithoutEmissionFactorInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    energyUsageType?: EnumEnergyUsageTypeFieldUpdateOperationsInput | $Enums.EnergyUsageType
    amountConsumption?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleCreateManyVehiclePropertyInput = {
    id?: number
    householdId: number
    emissionFactorId: number
    startMonthDistance: Decimal | DecimalJsLike | number | string
    endMonthDistance: Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth: Decimal | DecimalJsLike | number | string
    isRegularMaintain: boolean
    carbonEmissionEq: Decimal | DecimalJsLike | number | string
    recordedDate: Date | string
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type PrivateVehicleUpdateWithoutVehiclePropertyInput = {
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    household?: HouseholdUpdateOneRequiredWithoutPrivateVehiclesNestedInput
    emissionFactor?: EmissionFactorUpdateOneRequiredWithoutPrivateVehiclesNestedInput
  }

  export type PrivateVehicleUncheckedUpdateWithoutVehiclePropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrivateVehicleUncheckedUpdateManyWithoutVehiclePropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    householdId?: IntFieldUpdateOperationsInput | number
    emissionFactorId?: IntFieldUpdateOperationsInput | number
    startMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    endMonthDistance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelComsumptionPerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isRegularMaintain?: BoolFieldUpdateOperationsInput | boolean
    carbonEmissionEq?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    recordedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionCreateManyProfileInput = {
    id?: number
    teamId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfilePermissionUpdateWithoutProfileInput = {
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutProfilePermissionsNestedInput
  }

  export type ProfilePermissionUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionCreateManyTeamInput = {
    id?: number
    profileId: number
    canEditSubdistrict: boolean
    canGrant: boolean
    createdAt?: Date | string
    createdBy: Date | string
    updatedAt: Date | string
    updatedBy: Date | string
  }

  export type ProfilePermissionUpdateWithoutTeamInput = {
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutProfilePermissionsNestedInput
  }

  export type ProfilePermissionUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePermissionUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
    canEditSubdistrict?: BoolFieldUpdateOperationsInput | boolean
    canGrant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AddressCountOutputTypeDefaultArgs instead
     */
    export type AddressCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HouseholdCountOutputTypeDefaultArgs instead
     */
    export type HouseholdCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HouseholdCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmissionFactorCountOutputTypeDefaultArgs instead
     */
    export type EmissionFactorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmissionFactorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehiclePropertyCountOutputTypeDefaultArgs instead
     */
    export type VehiclePropertyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehiclePropertyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileCountOutputTypeDefaultArgs instead
     */
    export type ProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HouseholdDefaultArgs instead
     */
    export type HouseholdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HouseholdDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarbonFootprintDefaultArgs instead
     */
    export type CarbonFootprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarbonFootprintDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmissionFactorDefaultArgs instead
     */
    export type EmissionFactorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmissionFactorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehiclePropertyDefaultArgs instead
     */
    export type VehiclePropertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehiclePropertyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrivateVehicleDefaultArgs instead
     */
    export type PrivateVehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrivateVehicleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransportationDefaultArgs instead
     */
    export type TransportationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransportationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HouseholdElectricityDefaultArgs instead
     */
    export type HouseholdElectricityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HouseholdElectricityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ElectricityBillDefaultArgs instead
     */
    export type ElectricityBillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ElectricityBillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HouseholdWaterSupplyDefaultArgs instead
     */
    export type HouseholdWaterSupplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HouseholdWaterSupplyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WaterBillDefaultArgs instead
     */
    export type WaterBillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WaterBillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HouseholdOtherEnergyDefaultArgs instead
     */
    export type HouseholdOtherEnergyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HouseholdOtherEnergyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OtherEnergyConsumptionDefaultArgs instead
     */
    export type OtherEnergyConsumptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OtherEnergyConsumptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfilePermissionDefaultArgs instead
     */
    export type ProfilePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfilePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}